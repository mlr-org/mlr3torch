% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorch.R
\name{PipeOpTorch}
\alias{PipeOpTorch}
\title{Base Class for Torch Module Constructor Wrappers}
\description{
\code{PipeOpTorch} wraps a \code{torch::nn_module_generator}. It builds an isomorphic \code{Graph} and also keeps track of the tensor shape(s) involved.
}
\section{Inheriting}{

When inheriting from this class, one should overload the \code{private$.shapes_out()} and the \code{private$.shape_dependent_params()}
methods.

\code{private$.shapes_out()} gets a list of \code{numeric} vectors as input. This list indicates the shape of input tensors that will be fed
to the module's \verb{$forward()} function. The list has one item per input tensor, typically only one. The shape vectors may contain \code{NA}
entries indicating arbitrary size (typically used for the batch dimension). The function should return a list of shapes of tensors that
are created by the module. If \code{multi_output} is \code{NULL} it should be of length 1. If \code{multi_output} is an \code{integer(1)}, then
this should be the same length as the return value of the module's \verb{$forward()}.

\code{private$.shape_dependent_params()} calculates construction arguments of \code{module_generator} that depend on the input shape.
It should return a named list.

It is possible to overload \code{private$.make_module()} instead of \code{private$.shape_dependent_params()}, in which case it is even allowed
to not give a \code{module_generator} during construction.
}

\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpTorch}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorch-new}{\code{PipeOpTorch$new()}}
\item \href{#method-PipeOpTorch-shapes_out}{\code{PipeOpTorch$shapes_out()}}
\item \href{#method-PipeOpTorch-clone}{\code{PipeOpTorch$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorch-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorch-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this \link[R6:R6Class]{R6 Class}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorch$new(
  id,
  module_generator,
  param_set = ps(),
  param_vals = list(),
  multi_input = 1,
  multi_output = NULL,
  packages = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{module_generator}}{(\code{nn_module_generator} | \code{NULL})\cr
When this is \code{NULL}, then \code{private$.make_module} must be overloaded.}

\item{\code{multi_input}}{(\code{NULL} | \code{integer(1)})\cr
\code{0}: \code{...}-input. Otherwise: \code{multi_input} times input channel named \verb{input1:}...\code{input#}.\cr
\code{module}'s \verb{$forward} function must take \code{...}-input if \code{multi_input} is 0, and must have \code{multi_input} arguments otherwise.}

\item{\code{multi_output}}{(\code{NULL} | \code{integer(1)})\cr
\code{NULL}: single output. Otherwise: \code{multi_output} times output channel named \verb{output1:}...\code{input#}.\cr
\code{module}'s \verb{$forward} function must return a \code{list} of \code{torch_tensor} if \code{multi_output} is not \code{NULL}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorch-shapes_out"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorch-shapes_out}{}}}
\subsection{Method \code{shapes_out()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorch$shapes_out(shapes_in)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorch-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorch-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorch$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
