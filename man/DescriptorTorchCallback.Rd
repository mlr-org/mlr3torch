% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DescriptorTorchCallback.R
\name{DescriptorTorchCallback}
\alias{DescriptorTorchCallback}
\title{Descriptor of Torch Callback}
\description{
This wraps a \code{\link{CallbackTorch}} and annotates it with metadata, most importantly a \code{\link{ParamSet}}.
The callback is created for the given parameter values by calling the \verb{$generate()} method.

This class is usually used to configure the callback of a torch learner, e.g. when constructing
a learner of in a \code{\link{ModelDescriptor}}.

For a list of available callbacks, see [\verb{mlr3torch_callbacks]}.
To conveniently retrieve a \code{\link{DescriptorTorchCallback}}, use \code{\link[=t_clbk]{t_clbk()}}.
}
\section{Parameters}{

Defined by the constructor argument \code{param_set}.
If no parameter set is provided during construction, the parameter set is constructed by creating a parameter
for each argument of the wrapped loss function, where the parametes are then of type \code{\link{ParamUty}}.
}

\examples{
# Create a new callback descriptor from an existing callback
descriptor = DescriptorTorchCallback$new(CallbackTorchCheckpoint)
# The parameters are inferred
descriptor$param_set

# Retrieve a callback descriptor from the dictionary
descriptor = t_clbk("checkpoint",
  path = tempfile(), freq = 1
)
descriptor
descriptor$label
descriptor$id

# Create the callback
callback = descriptor$generate()
callback
# is the same as
CallbackTorchCheckpoint$new(
  path = tempfile(), freq = 1
)

# open the help page of the wrapped callback
# descriptor$help()

# Use in a learner
learner = lrn("regr.mlp", callbacks = t_clbk("checkpoint"))
# the parameters of the callback are added to the learner's parameter set
learner$param_set

}
\seealso{
Other Callback: 
\code{\link{as_descriptor_torch_callbacks}()},
\code{\link{as_descriptor_torch_callback}()},
\code{\link{callback_descriptor}()},
\code{\link{callback_torch}()},
\code{\link{mlr3torch_callbacks}},
\code{\link{mlr_callbacks_torch.checkpoint}},
\code{\link{mlr_callbacks_torch.progress}},
\code{\link{mlr_callbacks_torch}},
\code{\link{mlr_context_torch}},
\code{\link{t_clbk}()}

Other Descriptor Torch: 
\code{\link{DescriptorTorchLoss}},
\code{\link{TorchOptimizer}},
\code{\link{as_descriptor_torch_callbacks}()},
\code{\link{as_descriptor_torch_loss}()},
\code{\link{as_torch_optimizer}()},
\code{\link{descriptor_torch}},
\code{\link{mlr3torch_losses}},
\code{\link{mlr3torch_optimizers}},
\code{\link{t_clbk}()},
\code{\link{t_loss}()},
\code{\link{t_opt}()}
}
\concept{Callback}
\concept{Descriptor Torch}
\section{Super class}{
\code{\link[mlr3torch:DescriptorTorch]{mlr3torch::DescriptorTorch}} -> \code{DescriptorTorchCallback}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DescriptorTorchCallback-new}{\code{DescriptorTorchCallback$new()}}
\item \href{#method-DescriptorTorchCallback-clone}{\code{DescriptorTorchCallback$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="DescriptorTorch" data-id="generate"><a href='../../mlr3torch/html/DescriptorTorch.html#method-DescriptorTorch-generate'><code>mlr3torch::DescriptorTorch$generate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="DescriptorTorch" data-id="help"><a href='../../mlr3torch/html/DescriptorTorch.html#method-DescriptorTorch-help'><code>mlr3torch::DescriptorTorch$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="DescriptorTorch" data-id="print"><a href='../../mlr3torch/html/DescriptorTorch.html#method-DescriptorTorch-print'><code>mlr3torch::DescriptorTorch$print()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DescriptorTorchCallback-new"></a>}}
\if{latex}{\out{\hypertarget{method-DescriptorTorchCallback-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DescriptorTorchCallback$new(
  callback_generator,
  param_set = NULL,
  id = deparse(substitute(id))[[1L]],
  label = capitalize(id),
  packages = NULL,
  man = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback_generator}}{(\code{R6ClassGenerator})\cr
The class generator for the callback that is being wrapped.}

\item{\code{param_set}}{(\code{ParamSet} or \code{NULL})\cr
The parameter set. If \code{NULL} (default) it is inferred from \code{callback_generator}.}

\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{label}}{(\code{character(1)})\cr
Label for the new instance.}

\item{\code{packages}}{(\code{character()})\cr
The R packages this object depends on.}

\item{\code{man}}{(\code{character(1)})\cr
String in the format \verb{[pkg]::[topic]} pointing to a manual page for this object.
The referenced help package can be opened via method \verb{$help()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DescriptorTorchCallback-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DescriptorTorchCallback-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DescriptorTorchCallback$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
