% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchModel.R
\name{mlr_pipeops_torch_model}
\alias{mlr_pipeops_torch_model}
\alias{PipeOpTorchModel}
\title{Builds a mlr3 Torch Learner from its Input}
\format{
\code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.
}
\description{
Use TorchOpModeLClassif or TorchOpModelRegr for the respective task type.
During \verb{$train()} this TorchOp first builds the model (network, optimizer,
loss, ...) and afterwards trains the network.
It's parameterset is identical to LearnerClassifTorch and LearnerRegrTorch respectively.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpTorchModel$new(id, param_vals, task_type)
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr The id for the object.
\item \code{param_set} :: \code{paradox::ParamSet}\cr The parameter set.
\item \code{task_type} :: \code{character(1)}\cr
The task type of the model. See \code{mlr_reflections$task_types} for available options.
}
}

\section{Input and Output Channels}{

There is one input channel \code{"input"} that takes in \code{ModelDescriptor} during traing and a \code{Task} of the specified
\code{task_type} during prediction.
The output is \code{NULL} during training and a \code{Prediction} of given \code{task_type} during prediction.
}

\section{State}{

A trained torch \code{\link{Learner}}.
}

\section{Parameters}{

\itemize{
\item \code{batch_size} :: (\code{integer(1)})\cr
The batch size.
\item \code{epochs} :: \code{integer(1)}\cr
The number of epochs.
\item \code{device} :: \code{character(1)}\cr
The device. One of \code{"auto"}, \code{"cpu"}, or \code{"cuda"}.
\item \code{measures_train} :: \code{list()} of \code{\link{Measure}}s.
Measures to be evaluated during training.
\item \code{measures_valid} :: \code{list()} of \code{\link{Measure}}s.
Measures to be evaluated during validation.
\item \code{augmentation} :: ??
TODO:
\item \code{callbacks} :: (list of) \code{CallbackTorch}\cr
The callbacks to .
\item \code{drop_last} :: \code{logical(1)}\cr
Whether to drop the last batch in each epoch during training. Default is \code{FALSE}.
\item \code{num_threads} :: \code{integer(1)}\cr
The number of threads (if \code{device} is \code{"cpu"}). Default is 1.
\item \code{shuffle} :: \code{logical(1)}\cr
Whether to shuffle the instances in the dataset. Default is \code{TRUE}.
}
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only Methods inherited from \code{\link{PipeOp}}.
}

\section{Internals}{

First a \code{\link{nn_graph}} is created by calling \code{\link[=model_descriptor_to_module]{model_descriptor_to_module()}} and than a \code{LearnerClassifTorchModel}
is created from the \code{module}, is initialized for the specification provided in the input \code{\link{ModelDescriptor}}.
Then the parameters are set according to the parameters specified in \code{PipeOpTorchModel} and its '$train()\verb{ method is called on the [}Task\verb{] provided through the [}ModelDescriptor`].
}

\seealso{
Other PipeOpTorch: 
\code{\link{mlr_pipeops_torch_avg_pool1d}},
\code{\link{mlr_pipeops_torch_avg_pool2d}},
\code{\link{mlr_pipeops_torch_avg_pool3d}},
\code{\link{mlr_pipeops_torch_avg_pool}},
\code{\link{mlr_pipeops_torch_batch_norm}},
\code{\link{mlr_pipeops_torch_celu}},
\code{\link{mlr_pipeops_torch_conv1d}},
\code{\link{mlr_pipeops_torch_conv2d}},
\code{\link{mlr_pipeops_torch_conv3d}},
\code{\link{mlr_pipeops_torch_conv_transpose1d}},
\code{\link{mlr_pipeops_torch_conv_transpose2d}},
\code{\link{mlr_pipeops_torch_conv_transpose3d}},
\code{\link{mlr_pipeops_torch_conv_transpose}},
\code{\link{mlr_pipeops_torch_conv}},
\code{\link{mlr_pipeops_torch_dropout}},
\code{\link{mlr_pipeops_torch_elu}},
\code{\link{mlr_pipeops_torch_flatten}},
\code{\link{mlr_pipeops_torch_gelu}},
\code{\link{mlr_pipeops_torch_glu}},
\code{\link{mlr_pipeops_torch_hard_shrink}},
\code{\link{mlr_pipeops_torch_hardsigmoid}},
\code{\link{mlr_pipeops_torch_hard}},
\code{\link{mlr_pipeops_torch_head}},
\code{\link{mlr_pipeops_torch_ingress_img}},
\code{\link{mlr_pipeops_torch_layer_norm}},
\code{\link{mlr_pipeops_torch_leaky_relu}},
\code{\link{mlr_pipeops_torch_log_sigmoid}},
\code{\link{mlr_pipeops_torch_max_pool1d}},
\code{\link{mlr_pipeops_torch_max_pool2d}},
\code{\link{mlr_pipeops_torch_max_pool3d}},
\code{\link{mlr_pipeops_torch_max_pool}},
\code{\link{mlr_pipeops_torch_merge_cat}},
\code{\link{mlr_pipeops_torch_merge_prod}},
\code{\link{mlr_pipeops_torch_merge_sum}},
\code{\link{mlr_pipeops_torch_merge}},
\code{\link{mlr_pipeops_torch_model_classif}},
\code{\link{mlr_pipeops_torch_model_regr}},
\code{\link{mlr_pipeops_torch_prelu}},
\code{\link{mlr_pipeops_torch_relu6}},
\code{\link{mlr_pipeops_torch_relu}},
\code{\link{mlr_pipeops_torch_reshape}},
\code{\link{mlr_pipeops_torch_rrelu}},
\code{\link{mlr_pipeops_torch_selu}},
\code{\link{mlr_pipeops_torch_sigmoid}},
\code{\link{mlr_pipeops_torch_softmax}},
\code{\link{mlr_pipeops_torch_softplus}},
\code{\link{mlr_pipeops_torch_softshrink}},
\code{\link{mlr_pipeops_torch_softsign}},
\code{\link{mlr_pipeops_torch_squeeze}},
\code{\link{mlr_pipeops_torch_tanhshrink}},
\code{\link{mlr_pipeops_torch_tanh}},
\code{\link{mlr_pipeops_torch_threshold}},
\code{\link{pipeop_torch_linear}}
}
\concept{PipeOpTorch}
