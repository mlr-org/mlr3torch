% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TorchOpMerge.R
\name{TorchOpMerge}
\alias{TorchOpMerge}
\alias{TorchOpAdd}
\alias{TorchOpMul}
\alias{TorchOpCat}
\title{Merges Multiple Tensors}
\description{
Merges multiple tensors.
}
\section{Order of inputs}{

In case the order of input matters (e.g. for method "cat"), the constructor argument 'innum'
should be set.
}

\examples{
library("mlr3pipelines")

top1 = top("linear_1", out_features = 10L)
top2 = top("linear_2", out_features = 10L)

# order is not specified:
top_add = top("add")
graph = gunion(list(top1, top2)) \%>>\% top_add

# order is specified:
top_cat = top("cat", .innum = 2)
graph = gunion(list(top1, top2))
graph$add_pipeop(top_cat)
graph$add_edge(src_id = "linear_1", dst_id = "cat", dst_channel = "input2")
graph$add_edge(src_id = "linear_2", dst_id = "cat", dst_channel = "input1")
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:TorchOp]{mlr3torch::TorchOp}} -> \code{TorchOpMerge}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TorchOpMerge-new}{\code{TorchOpMerge$new()}}
\item \href{#method-TorchOpMerge-clone}{\code{TorchOpMerge$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="build"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-build'><code>mlr3torch::TorchOp$build()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="print"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-print'><code>mlr3torch::TorchOp$print()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpMerge-new"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpMerge-new}{}}}
\subsection{Method \code{new()}}{
Initializes an instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpMerge$new(
  id = "merge",
  param_set = ps(),
  param_vals = list(),
  .method,
  .innum = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}

\item{\code{param_vals}}{(named \code{list()})\cr
The initial parameters for the object.}

\item{\code{.method}}{(\code{character(1)})\cr
The method for the concatenation. One of "add", "mul" or "cat".}

\item{\code{.innum}}{(\code{integer(1)})\cr
The number of input channels (optional). If provided, the input channels are set to
\code{"input1"}, \code{"input2"}, etc.. Otherwise the input channel is set to \code{...} (a 'vararg' channel).
Should be set, in case the order of the inputs is relevant.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpMerge-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpMerge-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpMerge$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:TorchOp]{mlr3torch::TorchOp}} -> \code{\link[mlr3torch:TorchOpMerge]{mlr3torch::TorchOpMerge}} -> \code{TorchOpAdd}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TorchOpAdd-new}{\code{TorchOpAdd$new()}}
\item \href{#method-TorchOpAdd-clone}{\code{TorchOpAdd$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="build"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-build'><code>mlr3torch::TorchOp$build()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="print"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-print'><code>mlr3torch::TorchOp$print()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpAdd-new"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpAdd-new}{}}}
\subsection{Method \code{new()}}{
Initializes an instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpAdd$new(id = "add", param_vals = list(), .innum = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
The initial parameters for the object.}

\item{\code{.innum}}{(\code{integer(1)})\cr
The number of input channels (optional). If provided, the input channels are set to
\code{"input1"}, \code{"input2"}, etc.. Otherwise the input channel is set to \code{...} (a 'vararg' channel).
Should be set, in case the order of the inputs is relevant.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpAdd-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpAdd-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpAdd$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:TorchOp]{mlr3torch::TorchOp}} -> \code{\link[mlr3torch:TorchOpMerge]{mlr3torch::TorchOpMerge}} -> \code{TorchOpMul}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TorchOpMul-new}{\code{TorchOpMul$new()}}
\item \href{#method-TorchOpMul-clone}{\code{TorchOpMul$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="build"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-build'><code>mlr3torch::TorchOp$build()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="print"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-print'><code>mlr3torch::TorchOp$print()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpMul-new"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpMul-new}{}}}
\subsection{Method \code{new()}}{
Initializes an instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpMul$new(id = "mul", param_vals = list(), .innum = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
The initial parameters for the object.}

\item{\code{.innum}}{(\code{integer(1)})\cr
The number of input channels (optional). If provided, the input channels are set to
\code{"input1"}, \code{"input2"}, etc.. Otherwise the input channel is set to \code{...} (a 'vararg' channel).
Should be set, in case the order of the inputs is relevant.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpMul-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpMul-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpMul$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:TorchOp]{mlr3torch::TorchOp}} -> \code{\link[mlr3torch:TorchOpMerge]{mlr3torch::TorchOpMerge}} -> \code{TorchOpCat}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TorchOpCat-new}{\code{TorchOpCat$new()}}
\item \href{#method-TorchOpCat-clone}{\code{TorchOpCat$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="build"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-build'><code>mlr3torch::TorchOp$build()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="TorchOp" data-id="print"><a href='../../mlr3torch/html/TorchOp.html#method-TorchOp-print'><code>mlr3torch::TorchOp$print()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpCat-new"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpCat-new}{}}}
\subsection{Method \code{new()}}{
Initializes an instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpCat$new(id = "cat", param_vals = list(), .innum = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
The initial parameters for the object.}

\item{\code{.innum}}{(\code{integer(1)})\cr
The number of input channels (optional). If provided, the input channels are set to
\code{"input1"}, \code{"input2"}, etc.. Otherwise the input channel is set to \code{...} (a 'vararg' channel).
Should be set, in case the order of the inputs is relevant.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOpCat-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOpCat-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOpCat$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
