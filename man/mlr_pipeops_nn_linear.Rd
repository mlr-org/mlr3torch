% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchLinear.R
\name{mlr_pipeops_nn_linear}
\alias{mlr_pipeops_nn_linear}
\alias{PipeOpTorchLinear}
\title{Linear module}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTorch}}/\code{\link{PipeOp}}.
}
\description{
Applies a linear transformation to the incoming data: \code{y = xA^T + b}
}
\section{Calls}{

Calls \code{\link[torch:nn_linear]{torch::nn_linear()}} when trained.
}

\section{Input and Output Channels}{

See \link{PipeOpTorch} for a description.
Input and output channels take

The output is the input \code{\link[mlr3:Task]{Task}} with all affected numeric features replaced by their
non-negative components.
}

\section{Parameters}{


\strong{Available}
\itemize{
\item \code{out_features} :: \code{integer(1)}\cr
Size of each output sample.
\item \code{bias} :: \code{logical(1)}\cr
If set to \code{FALSE}, the layer will not learn an additive bias. Default: \code{TRUE}
}

\strong{Inferred}
\itemize{
\item \code{in_features} :: \code{integer(1)}\cr
Last dimension of the input shape.
}
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTorch}}/\code{\link{PipeOp}}.
}

\examples{
# po
obj = po("nn_linear", out_features = 10)
obj$id
obj$module_generator
obj$shapes_out(c(16, 5, 7))

# pot
obj = pot("linear", out_features = 10)
obj$id
obj$module_generator

}
\concept{PipeOpTorch}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{PipeOpTorchLinear}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchLinear-new}{\code{PipeOpTorchLinear$new()}}
\item \href{#method-PipeOpTorchLinear-clone}{\code{PipeOpTorchLinear$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLinear-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLinear-new}{}}}
\subsection{Method \code{new()}}{
Initializes an instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLinear$new(id = "nn_linear", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
The initial parameters for the object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLinear-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLinear-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLinear$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
