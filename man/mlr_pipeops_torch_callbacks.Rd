% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchCallbacks.R
\name{mlr_pipeops_torch_callbacks}
\alias{mlr_pipeops_torch_callbacks}
\alias{PipeOpTorchCallbacks}
\title{Callback Configuration}
\format{
\code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.
}
\description{
Configures the callbacks of a deep learning model.
}
\section{Construction}{
 \code{PipeOpTorchCallbacks$new(callbacks = list(), id = "torch_callbacks", param_vals = list())}
\itemize{
\item \code{callbacks} :: \code{list} of \code{\link{TorchCallback}}s or \code{character()} or \cr
The callbacks (or something convertible via \code{\link[=as_torch_callbacks]{as_torch_callbacks()}}).
Must have unique ids. Default is \code{list()}.
All callbacks are cloned during construction.
\item \code{id} :: \code{character(1)}\cr The id for the object. The default is "torch_callbacks".
\item \code{param_vals} :: named \code{list()}\cr List of hyperparameter settings to overwrite the initial values. Default is  \code{list()}.
}
}

\section{Input and Output Channels}{

There is one input channel \code{"input"} and one output channel \code{"output"}.
During \emph{training}, the channels are of class \code{\link{ModelDescriptor}}.
During \emph{prediction}, the channels are of class \code{\link{Task}}.
}

\section{State}{

The state is set to an empty \code{list()}.
}

\section{Parameters}{

The parameters are defined dynamically from the callbacks, where the id of the respective callbacks is the
respective set id.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\section{Internals}{

During training the callbacks are cloned and added to the \code{\link{ModelDescriptor}}.
}

\examples{
po_cb = po("torch_callbacks", "checkpoint")
po_cb$param_set
mdin = po("torch_ingress_num")$train(list(tsk("iris")))
mdin[[1L]]$callbacks
mdout = po_cb$train(mdin)[[1L]]
mdout$callbacks
# Can be called again
po_cb1 = po("torch_callbacks", t_clbk("progress"))
mdout1 = po_cb1$train(list(mdout))[[1L]]
mdout1$callbacks
}
\seealso{
Other model_configuration: 
\code{\link{mlr_pipeops_torch_loss}},
\code{\link{mlr_pipeops_torch_optimizer}}
}
\concept{model_configuration}
