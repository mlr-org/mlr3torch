% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reset_last_layer.R
\name{reset_last_layer}
\alias{reset_last_layer}
\alias{reset_last_layer.AlexNet}
\alias{reset_last_layer.resnet}
\title{Reset a classification models last layer}
\usage{
reset_last_layer(model, num_classes, bias, freeze)

\method{reset_last_layer}{AlexNet}(model, num_classes, bias = TRUE, freeze = FALSE)

\method{reset_last_layer}{resnet}(model, num_classes, bias = TRUE, freeze = FALSE)
}
\arguments{
\item{model}{A pretrained model, e.g.
\code{torchvision::model_alexnet(pretrained = TRUE)}}

\item{num_classes}{Number of desired output classes.}

\item{bias}{\verb{[TRUE]} Whether to use bias in the last layer.}

\item{freeze}{(\code{logical(1)})\cr
Whether to freee all layers expect for the output layer.}
}
\value{
Same as input \code{model} with modified last layer.
}
\description{
Used for pretrained models where the last layer is set to e.g. 1000 classes
but training is intended to be applied to e.g. 10 classes.
}
\note{
As of this, this also freezes the parameters of all but the last layer.
}
\examples{
\dontrun{
# AlexNet
model = torchvision::model_alexnet(pretrained = TRUE)
model$classifier[[7]]$out_feature
model = reset_last_layer(model, 10)
model$classifier[[7]]$out_feature

# ResNet
model = torchvision::model_resnet18(pretrained = TRUE)
model$fc$out_feature
model = reset_last_layer(model, 10)
model$fc$out_feature
}
}
