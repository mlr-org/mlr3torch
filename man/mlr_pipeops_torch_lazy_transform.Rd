% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchLazyTransform.R
\name{mlr_pipeops_torch_lazy_transform}
\alias{mlr_pipeops_torch_lazy_transform}
\alias{PipeOpTorchLazyTransform}
\title{Base Class for Lazy Transformations}
\description{
This is the base class for lazy tensor transformations.
These can either be used as preprocessing for \code{\link{lazy_tensor}} objects or as part of the
graph contained in the \code{\link{ModelDescriptor}}.
Currently the \code{PipeOp} must have exactly one inut and one output.
}
\section{Inheriting}{

You need to:
\itemize{
\item Either provide a function as argument \code{fn} or overwrite the private \code{.make_module()} method.
See \code{\link{PipeOpTorch}} for how to do this.
\item In case the transformation changes the tensor shapes you must provide a private \code{.shapes_out()} method like
for \code{\link{PipeOpTorch}}. It can be assumed that the first dimension is \code{NA}, i.e. the batch dimension.
}

Depending on the data-loader, this function is either applied individually to each tensor from a batch and then
concatenated, or to the whole batch at once and should return the same result in both cases.
}

\section{Input and Output Channels}{

During \emph{training}, all inputs and outputs are of class \code{\link{Task}} or \code{\link{ModelDescriptor}}.
During \emph{prediction}, all inputs and outputs are of class \code{\link{Task}} or \code{\link{ModelDescriptor}}.
}

\section{State}{

The state is the value calculated by the public method \code{shapes_out()}.
}

\section{Parameters}{

The \code{\link[paradox:ParamSet]{ParamSet}} is specified by the child class inheriting from \code{\link{PipeOpTorchLazyTransform}}.
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{PipeOpTorchLazyTransform}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchLazyTransform-new}{\code{PipeOpTorchLazyTransform$new()}}
\item \href{#method-PipeOpTorchLazyTransform-clone}{\code{PipeOpTorchLazyTransform$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLazyTransform-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLazyTransform-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLazyTransform$new(
  fn,
  id = "lazy_transform",
  param_vals = list(),
  param_set = ps(),
  packages = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fn}}{(\verb{function()})\cr
A function that will be applied to a (lazy) tensor.
Additional arguments can be passed as parameters.
During actual preprocessing the (lazy) tensor will be passed by position.}

\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_vals}}{(named \code{list()})\cr
Parameter values to be set after construction.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}

\item{\code{packages}}{(\code{character()})\cr
The packages the function depends on.
If \code{fn} is from a namespace and no value is provided the namespace is automatically set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchLazyTransform-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchLazyTransform-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchLazyTransform$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
