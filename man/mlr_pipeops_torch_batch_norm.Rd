% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchBatchNorm.R
\name{mlr_pipeops_torch_batch_norm}
\alias{mlr_pipeops_torch_batch_norm}
\alias{PipeOpTorchBatchNorm}
\alias{PipeOpTorchBatchNorm1D}
\alias{PipeOpTorchBatchNorm2D}
\alias{PipeOpTorchBatchNorm3D}
\title{Base Class for Batch Normalization}
\description{
Base class for batch normalization.
Don't use this class directly.

Base class for batch normalization.
Don't use this class directly.
}
\section{Input and Output Channels}{

One input channel called \code{"input"} and one output channel called \code{"output"}.
For an explanation see \code{\link{PipeOpTorch}}.


One input channel called \code{"input"} and one output channel called \code{"output"}.
For an explanation see \code{\link{PipeOpTorch}}.


One input channel called \code{"input"} and one output channel called \code{"output"}.
For an explanation see \code{\link{PipeOpTorch}}.


One input channel called \code{"input"} and one output channel called \code{"output"}.
For an explanation see \code{\link{PipeOpTorch}}.
}

\section{State}{

The state is the value calculated by the public method \code{shapes_out()}.


The state is the value calculated by the public method \code{shapes_out()}.


The state is the value calculated by the public method \code{shapes_out()}.


The state is the value calculated by the public method \code{shapes_out()}.
}

\section{Parameters}{

\itemize{
\item \code{eps} :: \code{numeric(1)}\cr
A value added to the denominator for numerical stability. Default: \code{1e-5}.
\item \code{momentum} :: \code{numeric(1)}\cr
The value used for the running_mean and running_var computation. Can be set to \code{NULL} for cumulative moving average
(i.e. simple average). Default: 0.1
\item \code{affine} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module has learnable affine parameters. Default: \code{TRUE}
\item \code{track_running_stats} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module tracks the running mean and variance, and when set to \code{FALSE},
this module does not track such statistics and always uses batch statistics in both training and eval modes.
Default: \code{TRUE}
}


\itemize{
\item \code{eps} :: \code{numeric(1)}\cr
A value added to the denominator for numerical stability. Default: \code{1e-5}.
\item \code{momentum} :: \code{numeric(1)}\cr
The value used for the running_mean and running_var computation. Can be set to \code{NULL} for cumulative moving average
(i.e. simple average). Default: 0.1
\item \code{affine} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module has learnable affine parameters. Default: \code{TRUE}
\item \code{track_running_stats} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module tracks the running mean and variance, and when set to \code{FALSE},
this module does not track such statistics and always uses batch statistics in both training and eval modes.
Default: \code{TRUE}
}


\itemize{
\item \code{eps} :: \code{numeric(1)}\cr
A value added to the denominator for numerical stability. Default: \code{1e-5}.
\item \code{momentum} :: \code{numeric(1)}\cr
The value used for the running_mean and running_var computation. Can be set to \code{NULL} for cumulative moving average
(i.e. simple average). Default: 0.1
\item \code{affine} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module has learnable affine parameters. Default: \code{TRUE}
\item \code{track_running_stats} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module tracks the running mean and variance, and when set to \code{FALSE},
this module does not track such statistics and always uses batch statistics in both training and eval modes.
Default: \code{TRUE}
}


\itemize{
\item \code{eps} :: \code{numeric(1)}\cr
A value added to the denominator for numerical stability. Default: \code{1e-5}.
\item \code{momentum} :: \code{numeric(1)}\cr
The value used for the running_mean and running_var computation. Can be set to \code{NULL} for cumulative moving average
(i.e. simple average). Default: 0.1
\item \code{affine} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module has learnable affine parameters. Default: \code{TRUE}
\item \code{track_running_stats} :: \code{logical(1)}\cr
a boolean value that when set to \code{TRUE}, this module tracks the running mean and variance, and when set to \code{FALSE},
this module does not track such statistics and always uses batch statistics in both training and eval modes.
Default: \code{TRUE}
}
}

\section{Internals}{

See the respective child class.


Calls \code{\link[torch:nn_batch_norm1d]{torch::nn_batch_norm1d()}}.
The parameter \code{num_features} is inferred as the second dimension of the input shape.


Calls \code{\link[torch:nn_batch_norm2d]{torch::nn_batch_norm2d()}}.
The parameter \code{num_features} is inferred as the second dimension of the input shape.


Calls \code{\link[torch:nn_batch_norm3d]{torch::nn_batch_norm3d()}}.
The parameter \code{num_features} is inferred as the second dimension of the input shape.
}

\seealso{
Other PipeOps: 
\code{\link{mlr_pipeops_torch_avg_pool1d}},
\code{\link{mlr_pipeops_torch_avg_pool2d}},
\code{\link{mlr_pipeops_torch_avg_pool3d}},
\code{\link{mlr_pipeops_torch_avg_pool}},
\code{\link{mlr_pipeops_torch_celu}},
\code{\link{mlr_pipeops_torch_conv2d}},
\code{\link{mlr_pipeops_torch_conv3d}},
\code{\link{mlr_pipeops_torch_conv_transpose1d}},
\code{\link{mlr_pipeops_torch_conv_transpose2d}},
\code{\link{mlr_pipeops_torch_conv_transpose3d}},
\code{\link{mlr_pipeops_torch_conv_transpose}},
\code{\link{mlr_pipeops_torch_conv}},
\code{\link{mlr_pipeops_torch_dropout}},
\code{\link{mlr_pipeops_torch_elu}},
\code{\link{mlr_pipeops_torch_flatten}},
\code{\link{mlr_pipeops_torch_gelu}},
\code{\link{mlr_pipeops_torch_glu}},
\code{\link{mlr_pipeops_torch_hard_shrink}},
\code{\link{mlr_pipeops_torch_hardsigmoid}},
\code{\link{mlr_pipeops_torch_hard}},
\code{\link{mlr_pipeops_torch_head}},
\code{\link{mlr_pipeops_torch_ingress_categ}},
\code{\link{mlr_pipeops_torch_ingress_num}},
\code{\link{mlr_pipeops_torch_ingress}},
\code{\link{mlr_pipeops_torch_layer_norm}},
\code{\link{mlr_pipeops_torch_leaky_relu}},
\code{\link{mlr_pipeops_torch_log_sigmoid}},
\code{\link{mlr_pipeops_torch_max_pool1d}},
\code{\link{mlr_pipeops_torch_max_pool2d}},
\code{\link{mlr_pipeops_torch_max_pool3d}},
\code{\link{mlr_pipeops_torch_max_pool}},
\code{\link{mlr_pipeops_torch_merge_cat}},
\code{\link{mlr_pipeops_torch_merge_prod}},
\code{\link{mlr_pipeops_torch_merge_sum}},
\code{\link{mlr_pipeops_torch_merge}},
\code{\link{mlr_pipeops_torch_model_classif}},
\code{\link{mlr_pipeops_torch_model_regr}},
\code{\link{mlr_pipeops_torch_model}},
\code{\link{mlr_pipeops_torch_prelu}},
\code{\link{mlr_pipeops_torch_relu6}},
\code{\link{mlr_pipeops_torch_relu}},
\code{\link{mlr_pipeops_torch_reshape}},
\code{\link{mlr_pipeops_torch_rrelu}},
\code{\link{mlr_pipeops_torch_selu}},
\code{\link{mlr_pipeops_torch_sigmoid}},
\code{\link{mlr_pipeops_torch_softmax}},
\code{\link{mlr_pipeops_torch_softplus}},
\code{\link{mlr_pipeops_torch_softshrink}},
\code{\link{mlr_pipeops_torch_softsign}},
\code{\link{mlr_pipeops_torch_squeeze}},
\code{\link{mlr_pipeops_torch_tanhshrink}},
\code{\link{mlr_pipeops_torch_tanh}},
\code{\link{mlr_pipeops_torch_threshold}},
\code{\link{pipeop_torch_linear}}

Other PipeOps: 
\code{\link{mlr_pipeops_torch_avg_pool1d}},
\code{\link{mlr_pipeops_torch_avg_pool2d}},
\code{\link{mlr_pipeops_torch_avg_pool3d}},
\code{\link{mlr_pipeops_torch_avg_pool}},
\code{\link{mlr_pipeops_torch_celu}},
\code{\link{mlr_pipeops_torch_conv2d}},
\code{\link{mlr_pipeops_torch_conv3d}},
\code{\link{mlr_pipeops_torch_conv_transpose1d}},
\code{\link{mlr_pipeops_torch_conv_transpose2d}},
\code{\link{mlr_pipeops_torch_conv_transpose3d}},
\code{\link{mlr_pipeops_torch_conv_transpose}},
\code{\link{mlr_pipeops_torch_conv}},
\code{\link{mlr_pipeops_torch_dropout}},
\code{\link{mlr_pipeops_torch_elu}},
\code{\link{mlr_pipeops_torch_flatten}},
\code{\link{mlr_pipeops_torch_gelu}},
\code{\link{mlr_pipeops_torch_glu}},
\code{\link{mlr_pipeops_torch_hard_shrink}},
\code{\link{mlr_pipeops_torch_hardsigmoid}},
\code{\link{mlr_pipeops_torch_hard}},
\code{\link{mlr_pipeops_torch_head}},
\code{\link{mlr_pipeops_torch_ingress_categ}},
\code{\link{mlr_pipeops_torch_ingress_num}},
\code{\link{mlr_pipeops_torch_ingress}},
\code{\link{mlr_pipeops_torch_layer_norm}},
\code{\link{mlr_pipeops_torch_leaky_relu}},
\code{\link{mlr_pipeops_torch_log_sigmoid}},
\code{\link{mlr_pipeops_torch_max_pool1d}},
\code{\link{mlr_pipeops_torch_max_pool2d}},
\code{\link{mlr_pipeops_torch_max_pool3d}},
\code{\link{mlr_pipeops_torch_max_pool}},
\code{\link{mlr_pipeops_torch_merge_cat}},
\code{\link{mlr_pipeops_torch_merge_prod}},
\code{\link{mlr_pipeops_torch_merge_sum}},
\code{\link{mlr_pipeops_torch_merge}},
\code{\link{mlr_pipeops_torch_model_classif}},
\code{\link{mlr_pipeops_torch_model_regr}},
\code{\link{mlr_pipeops_torch_model}},
\code{\link{mlr_pipeops_torch_prelu}},
\code{\link{mlr_pipeops_torch_relu6}},
\code{\link{mlr_pipeops_torch_relu}},
\code{\link{mlr_pipeops_torch_reshape}},
\code{\link{mlr_pipeops_torch_rrelu}},
\code{\link{mlr_pipeops_torch_selu}},
\code{\link{mlr_pipeops_torch_sigmoid}},
\code{\link{mlr_pipeops_torch_softmax}},
\code{\link{mlr_pipeops_torch_softplus}},
\code{\link{mlr_pipeops_torch_softshrink}},
\code{\link{mlr_pipeops_torch_softsign}},
\code{\link{mlr_pipeops_torch_squeeze}},
\code{\link{mlr_pipeops_torch_tanhshrink}},
\code{\link{mlr_pipeops_torch_tanh}},
\code{\link{mlr_pipeops_torch_threshold}},
\code{\link{pipeop_torch_linear}}

Other PipeOps: 
\code{\link{mlr_pipeops_torch_avg_pool1d}},
\code{\link{mlr_pipeops_torch_avg_pool2d}},
\code{\link{mlr_pipeops_torch_avg_pool3d}},
\code{\link{mlr_pipeops_torch_avg_pool}},
\code{\link{mlr_pipeops_torch_celu}},
\code{\link{mlr_pipeops_torch_conv2d}},
\code{\link{mlr_pipeops_torch_conv3d}},
\code{\link{mlr_pipeops_torch_conv_transpose1d}},
\code{\link{mlr_pipeops_torch_conv_transpose2d}},
\code{\link{mlr_pipeops_torch_conv_transpose3d}},
\code{\link{mlr_pipeops_torch_conv_transpose}},
\code{\link{mlr_pipeops_torch_conv}},
\code{\link{mlr_pipeops_torch_dropout}},
\code{\link{mlr_pipeops_torch_elu}},
\code{\link{mlr_pipeops_torch_flatten}},
\code{\link{mlr_pipeops_torch_gelu}},
\code{\link{mlr_pipeops_torch_glu}},
\code{\link{mlr_pipeops_torch_hard_shrink}},
\code{\link{mlr_pipeops_torch_hardsigmoid}},
\code{\link{mlr_pipeops_torch_hard}},
\code{\link{mlr_pipeops_torch_head}},
\code{\link{mlr_pipeops_torch_ingress_categ}},
\code{\link{mlr_pipeops_torch_ingress_num}},
\code{\link{mlr_pipeops_torch_ingress}},
\code{\link{mlr_pipeops_torch_layer_norm}},
\code{\link{mlr_pipeops_torch_leaky_relu}},
\code{\link{mlr_pipeops_torch_log_sigmoid}},
\code{\link{mlr_pipeops_torch_max_pool1d}},
\code{\link{mlr_pipeops_torch_max_pool2d}},
\code{\link{mlr_pipeops_torch_max_pool3d}},
\code{\link{mlr_pipeops_torch_max_pool}},
\code{\link{mlr_pipeops_torch_merge_cat}},
\code{\link{mlr_pipeops_torch_merge_prod}},
\code{\link{mlr_pipeops_torch_merge_sum}},
\code{\link{mlr_pipeops_torch_merge}},
\code{\link{mlr_pipeops_torch_model_classif}},
\code{\link{mlr_pipeops_torch_model_regr}},
\code{\link{mlr_pipeops_torch_model}},
\code{\link{mlr_pipeops_torch_prelu}},
\code{\link{mlr_pipeops_torch_relu6}},
\code{\link{mlr_pipeops_torch_relu}},
\code{\link{mlr_pipeops_torch_reshape}},
\code{\link{mlr_pipeops_torch_rrelu}},
\code{\link{mlr_pipeops_torch_selu}},
\code{\link{mlr_pipeops_torch_sigmoid}},
\code{\link{mlr_pipeops_torch_softmax}},
\code{\link{mlr_pipeops_torch_softplus}},
\code{\link{mlr_pipeops_torch_softshrink}},
\code{\link{mlr_pipeops_torch_softsign}},
\code{\link{mlr_pipeops_torch_squeeze}},
\code{\link{mlr_pipeops_torch_tanhshrink}},
\code{\link{mlr_pipeops_torch_tanh}},
\code{\link{mlr_pipeops_torch_threshold}},
\code{\link{pipeop_torch_linear}}

Other PipeOps: 
\code{\link{mlr_pipeops_torch_avg_pool1d}},
\code{\link{mlr_pipeops_torch_avg_pool2d}},
\code{\link{mlr_pipeops_torch_avg_pool3d}},
\code{\link{mlr_pipeops_torch_avg_pool}},
\code{\link{mlr_pipeops_torch_celu}},
\code{\link{mlr_pipeops_torch_conv2d}},
\code{\link{mlr_pipeops_torch_conv3d}},
\code{\link{mlr_pipeops_torch_conv_transpose1d}},
\code{\link{mlr_pipeops_torch_conv_transpose2d}},
\code{\link{mlr_pipeops_torch_conv_transpose3d}},
\code{\link{mlr_pipeops_torch_conv_transpose}},
\code{\link{mlr_pipeops_torch_conv}},
\code{\link{mlr_pipeops_torch_dropout}},
\code{\link{mlr_pipeops_torch_elu}},
\code{\link{mlr_pipeops_torch_flatten}},
\code{\link{mlr_pipeops_torch_gelu}},
\code{\link{mlr_pipeops_torch_glu}},
\code{\link{mlr_pipeops_torch_hard_shrink}},
\code{\link{mlr_pipeops_torch_hardsigmoid}},
\code{\link{mlr_pipeops_torch_hard}},
\code{\link{mlr_pipeops_torch_head}},
\code{\link{mlr_pipeops_torch_ingress_categ}},
\code{\link{mlr_pipeops_torch_ingress_num}},
\code{\link{mlr_pipeops_torch_ingress}},
\code{\link{mlr_pipeops_torch_layer_norm}},
\code{\link{mlr_pipeops_torch_leaky_relu}},
\code{\link{mlr_pipeops_torch_log_sigmoid}},
\code{\link{mlr_pipeops_torch_max_pool1d}},
\code{\link{mlr_pipeops_torch_max_pool2d}},
\code{\link{mlr_pipeops_torch_max_pool3d}},
\code{\link{mlr_pipeops_torch_max_pool}},
\code{\link{mlr_pipeops_torch_merge_cat}},
\code{\link{mlr_pipeops_torch_merge_prod}},
\code{\link{mlr_pipeops_torch_merge_sum}},
\code{\link{mlr_pipeops_torch_merge}},
\code{\link{mlr_pipeops_torch_model_classif}},
\code{\link{mlr_pipeops_torch_model_regr}},
\code{\link{mlr_pipeops_torch_model}},
\code{\link{mlr_pipeops_torch_prelu}},
\code{\link{mlr_pipeops_torch_relu6}},
\code{\link{mlr_pipeops_torch_relu}},
\code{\link{mlr_pipeops_torch_reshape}},
\code{\link{mlr_pipeops_torch_rrelu}},
\code{\link{mlr_pipeops_torch_selu}},
\code{\link{mlr_pipeops_torch_sigmoid}},
\code{\link{mlr_pipeops_torch_softmax}},
\code{\link{mlr_pipeops_torch_softplus}},
\code{\link{mlr_pipeops_torch_softshrink}},
\code{\link{mlr_pipeops_torch_softsign}},
\code{\link{mlr_pipeops_torch_squeeze}},
\code{\link{mlr_pipeops_torch_tanhshrink}},
\code{\link{mlr_pipeops_torch_tanh}},
\code{\link{mlr_pipeops_torch_threshold}},
\code{\link{pipeop_torch_linear}}
}
\concept{PipeOps}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{PipeOpTorchBatchNorm}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchBatchNorm-new}{\code{PipeOpTorchBatchNorm$new()}}
\item \href{#method-PipeOpTorchBatchNorm-clone}{\code{PipeOpTorchBatchNorm$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm$new(
  id,
  module_generator,
  min_dim,
  max_dim,
  param_vals = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{module_generator}}{(\code{nn_module_generator})\cr
The torch module generator.}

\item{\code{min_dim}}{(integer(1))\cr
The minimum number of dimension for the input tensor.}

\item{\code{max_dim}}{(\code{integer(1)})\cr
The maximum number of dimension for the input tensor.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{\link[mlr3torch:PipeOpTorchBatchNorm]{mlr3torch::PipeOpTorchBatchNorm}} -> \code{PipeOpTorchBatchNorm1D}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchBatchNorm1D-new}{\code{PipeOpTorchBatchNorm1D$new()}}
\item \href{#method-PipeOpTorchBatchNorm1D-clone}{\code{PipeOpTorchBatchNorm1D$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm1D-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm1D-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm1D$new(id = "nn_batch_norm1d", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm1D-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm1D-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm1D$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{\link[mlr3torch:PipeOpTorchBatchNorm]{mlr3torch::PipeOpTorchBatchNorm}} -> \code{PipeOpTorchBatchNorm2D}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchBatchNorm2D-new}{\code{PipeOpTorchBatchNorm2D$new()}}
\item \href{#method-PipeOpTorchBatchNorm2D-clone}{\code{PipeOpTorchBatchNorm2D$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm2D-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm2D-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm2D$new(id = "nn_batch_norm2d", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm2D-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm2D-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm2D$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorch]{mlr3torch::PipeOpTorch}} -> \code{\link[mlr3torch:PipeOpTorchBatchNorm]{mlr3torch::PipeOpTorchBatchNorm}} -> \code{PipeOpTorchBatchNorm3D}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchBatchNorm3D-new}{\code{PipeOpTorchBatchNorm3D$new()}}
\item \href{#method-PipeOpTorchBatchNorm3D-clone}{\code{PipeOpTorchBatchNorm3D$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3torch" data-topic="PipeOpTorch" data-id="shapes_out"><a href='../../mlr3torch/html/PipeOpTorch.html#method-PipeOpTorch-shapes_out'><code>mlr3torch::PipeOpTorch$shapes_out()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm3D-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm3D-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm3D$new(id = "nn_batch_norm3d", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchBatchNorm3D-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchBatchNorm3D-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchBatchNorm3D$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
