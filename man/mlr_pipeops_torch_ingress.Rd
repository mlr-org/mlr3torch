% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchIngress.R
\name{mlr_pipeops_torch_ingress}
\alias{mlr_pipeops_torch_ingress}
\alias{PipeOpTorchIngress}
\title{Entrypoint to Torch Network}
\format{
\code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.
}
\description{
Use this as entry-point to mlr3torch-networks.
Unless you are an advanced user, you should not need to use this directly but \code{\link{PipeOpTorchIngressNumeric}},
\code{\link{PipeOpTorchIngressCategorical}} or \code{\link{PipeOpTorchIngressImage}}.
}
\section{Construction}{

\code{PipeOpTorchIngress$new(id, param_set = ps(), param_vals = list(), packages = character(0), feature_types)}
\itemize{
\item \code{id} :: \code{character(1)}\cr The id for the object.
\item \code{param_set} :: \code{link{ParamSet}{paradox}}\cr The parameter set.
\item \code{param_vals} :: named \code{list()}\cr List of hyperparameter settings to overwrite the initial values. Default is  \code{list()}.
\item \code{input} :: \code{data.table()}\cr
The input channels for this \code{PipeOp}. See \code{\link{PipeOp}} for an explanation.
\item \code{output} :: \code{data.table()}\cr
The output channels for this \code{PipeOp}. See \code{\link{PipeOp}} for an explanation.
\item \code{packages} :: \verb{character() \\cr The packages this }PipeOpTorchIngress` depends on.
\item \code{feature_types} :: \code{character()}\cr
The features types that can be consumed by this \code{PipeOpTorchIngress}.
Must be a subset of \code{mlr_reflections$task_feature_types}.
}
}

\section{Input and Output Channels}{
 One input channel called \code{"input"} and one output channel called"output". For an explanation see \code{\link{PipeOpTorch}}.
}

\section{State}{

The state is set to the input shape.
}

\section{Parameters}{

Defined by the construction argument \code{param_set}, as well as:
\itemize{
\item \code{select} :: \code{logical(1)}\cr
Whether to select the features of the task that can be consumed by this \code{PipeOpTorchIngress}.
Default is \code{FALSE}, i.e. it errs during training if it receives a task with feature types that it cannot handle.
}
}

\section{Fields}{

\itemize{
\item \code{feature_types} :: \code{character(1)}\cr
The features types that can be consumed by this \code{PipeOpTorchIngress}.
}
}

\section{Methods}{
 Only methods inherited from \code{PipeOpTorch}/\code{\link{PipeOp}{mlr3pipelines}}].
}

\section{Internals}{

Creates an object of class \code{\link{TorchIngressToken}} for the given task.
The purpuse of this is to store the information on how to construct the torch dataloader from the task for this
entry point of the network.
}

\seealso{
Other PipeOp: 
\code{\link{mlr_pipeops_torch_ingress_img}}
}
\concept{PipeOp}
