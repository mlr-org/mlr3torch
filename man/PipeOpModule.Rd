% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpModule.R
\name{PipeOpModule}
\alias{PipeOpModule}
\title{Base Class for Torch Module Wrappers}
\description{
\code{PipeOpModule} wraps a \code{torch::nn_module}. Graphs of \code{PipeOpModule}s are combined in a \code{\link{GraphModule}}.
}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpModule}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpModule-new}{\code{PipeOpModule$new()}}
\item \href{#method-PipeOpModule-clone}{\code{PipeOpModule$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpModule-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpModule-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this \link[R6:R6Class]{R6 Class}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpModule$new(
  id,
  module,
  multi_input = 1,
  multi_output = NULL,
  param_vals = list(),
  packages = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multi_input}}{(\code{NULL} | \code{integer(1)})\cr
\code{0}: \code{...}-input. Otherwise: \code{multi_input} times input channel named \verb{input1:}...\code{input#}.\cr
\code{module}'s \verb{$forward} function must take \code{...}-input if \code{multi_input} is 0, and must have \code{multi_input} arguments otherwise.}

\item{\code{multi_output}}{(\code{NULL} | \code{integer(1)})\cr
\code{NULL}: single output. Otherwise: \code{multi_output} times output channel named \verb{output1:}...\code{input#}.\cr
\code{module}'s \verb{$forward} function must return a \code{list} of \code{torch_tensor} if \code{multi_output} is not \code{NULL}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpModule-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpModule-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpModule$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
