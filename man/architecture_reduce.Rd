% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Architecture.R
\name{architecture_reduce}
\alias{architecture_reduce}
\title{Reduce an Architecture to Layers (nn_modules)}
\usage{
architecture_reduce(self, task = NULL, input = NULL)
}
\arguments{
\item{task}{(mlr3::Task) The task for which to build the architecture.}

\item{input}{(torch::Tensor) The input tensor. If NULL the output of the data-loader that is
generated from the task is used. (E.g. used when reducing a block)}

\item{architecture}{(mlr3torch::Architecture) The architecture that is being build from the task.}
}
\description{
A Architecture contains builders (nodes) and edges that indicate how the data will
flow through the layers that are constructed by the builders.
This function builds all the layers.
For that the ids of the grpah need to be topologically sorted and then one has to loop over the
topologically sorted layers and call the build function. The outputs of each layer are safed
until all the direct children of the node are built.

This structure is essentially identical to the network_forward function only that we here
additionally call the build function and also that the task is passe == idxd instead of the actual
network input as obtained from the dataloader.
}
