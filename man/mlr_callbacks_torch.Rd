% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallbackTorch.R
\name{mlr_callbacks_torch}
\alias{mlr_callbacks_torch}
\alias{CallbackTorch}
\title{Base Class for Torch Callbacks}
\format{
\code{\link{R6Class}} inheriting from \code{\link[mlr3misc:Callback]{Callback}}.
}
\description{
Base class for Torch Callbacks.
Torch Callbacks can be used to gain more control over the training process of a neural network without
having to write the whole training loop.
At each stage (see section "Stages") of the training loop, the corresponding \verb{on_<stage>(ctx)} method is run
that takes as argument a \code{\link{ContextTorch}} which gives access to the relevant objects.
}
\section{Construction}{

\code{CallbackTorch$new(id, label = NA_character_, man = NA_character_)}
See \code{\link{Callback}} for the construction arguments.
}

\section{Inheriting}{

It is recommended to use the sugar function \code{\link[=`callback_torch]{`callback_torch()}} to create custom callbacks.

It is important to not overwrite the private variable \verb{$.__trained__} which is used to communicate whether a
callback has already been used, as learners require unused callbacks.
}

\section{Stages}{

\itemize{
\item \code{begin} :: Run before the training loop begins.
\item \code{epoch_begin} :: Run he beginning of each epoch.
\item \code{before_validation} :: Run before each validation loop.
\item \code{batch_begin} :: Run before the forward call.
\item \code{after_backward} :: Run after the backward call.
\item \code{batch_end} :: Run after the optimizer step.
\item \code{batch_valid_begin} :: Run before the forward call in the validation loop.
\item \code{batch_valid_end} :: Run after the forward call in the validation loop.
\item \code{epoch_end} :: Run at the end of each epoch
\item \code{end} :: Run at the end of the training loop.
}
}

