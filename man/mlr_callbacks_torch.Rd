% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallbackTorch.R
\name{mlr_callbacks_torch}
\alias{mlr_callbacks_torch}
\alias{CallbackTorch}
\title{Base Class for Torch Callbacks}
\description{
Base class from which Callbacks should inherit.
They can be used to gain more control over the training process of a neural network without
having to write everything from scratch.
To create custom callbacks to use in a torch learner it is recommended to use the convenience function
\code{\link{torch_callback}}.

For each available stage (see section \emph{Stages}) a public method \verb{$on_<stage>(xtx)} can be defined.
This must be an function with argument \code{ctx}, which is a \code{\link{ContextTorch}}.

When a learner is trained, at a specific \verb{<stage>}, the \verb{$on_<stage>(ctx)} method of the callback is
executed, where the \code{ctx} represents the current state of the training loop.

Different stages of a callback can communicate with each other by assigning values to \verb{$self}.
It is recommended to use the sugar function \code{\link[=callback_torch]{callback_torch()}} to create custom callbacks.

When used in torch learner, the \code{CallbackTorch} is wrapped in a \code{\link{TorchCallback}}.
The latters parameter set represents the argument of the \code{\link{CallbackTorch}}'s \verb{$initialize()} method and can
be specified in the learner.
}
\section{Stages}{

\itemize{
\item \code{begin} :: Run before the training loop begins.
\item \code{epoch_begin} :: Run he beginning of each epoch.
\item \code{before_validation} :: Run before each validation loop.
\item \code{batch_begin} :: Run before the forward call.
\item \code{after_backward} :: Run after the backward call.
\item \code{batch_end} :: Run after the optimizer step.
\item \code{batch_valid_begin} :: Run before the forward call in the validation loop.
\item \code{batch_valid_end} :: Run after the forward call in the validation loop.
\item \code{epoch_end} :: Run at the end of each epoch.
\item \code{end} :: Run at last, using \code{on.exit()}.
}
}

\seealso{
Other Callback: 
\code{\link{TorchCallback}},
\code{\link{as_torch_callbacks}()},
\code{\link{as_torch_callback}()},
\code{\link{callback_torch}()},
\code{\link{mlr3torch_callbacks.checkpoint}},
\code{\link{mlr3torch_callbacks.progress}},
\code{\link{mlr3torch_callbacks}},
\code{\link{mlr_context_torch}},
\code{\link{t_clbk}()},
\code{\link{torch_callback}()}
}
\concept{Callback}

