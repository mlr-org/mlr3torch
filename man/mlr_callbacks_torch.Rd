% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallbackTorch.R
\name{mlr_callbacks_torch}
\alias{mlr_callbacks_torch}
\alias{CallbackTorch}
\title{Base Class for Torch Callbacks}
\format{
\code{\link{R6Class}}
}
\description{
Base class from which Torch Callbacks should inherit.
To create custom callbacks,to use in a torch learner use the convenience function \code{\link{torch_callback}}.

Torch Callbacks can be used to gain more control over the training process of a neural network without
having to write everything from scratch.
At each stage (see section "Stages") of the training loop, the corresponding \verb{on_<stage>(ctx)} method is run
that takes as argument a \code{\link{ContextTorch}} which gives access to the relevant objects.
}
\section{Construction}{

\code{CallbackTorch$new()}
}

\section{Fields}{

\itemize{
\item \code{id} :: (\code{character(1)})\cr
The id of the callback. Must be a class attribute.
\item \code{label} :: (\code{character(1)})\cr
The label of the callback.
}
}

\section{Methods}{

See section \emph{Stages}.
}

\section{Inheriting}{

It is recommended to use the sugar function [\verb{callback_torch()] to create custom callbacks, because there are some easy mistakes that can be made otherwise. It is e.g. important that the }"id"` of the callback is a class attribute and not an instance attribute.
The reason for this is that during initialization of a learner, the id of the callback must be available to
correctly construct the parameter space.
During initialization of the learner, only the callback class is available however, as instantiation happens
during training.
}

\section{Stages}{

\itemize{
\item \code{begin} :: Run before the training loop begins.
\item \code{epoch_begin} :: Run he beginning of each epoch.
\item \code{before_validation} :: Run before each validation loop.
\item \code{batch_begin} :: Run before the forward call.
\item \code{after_backward} :: Run after the backward call.
\item \code{batch_end} :: Run after the optimizer step.
\item \code{batch_valid_begin} :: Run before the forward call in the validation loop.
\item \code{batch_valid_end} :: Run after the forward call in the validation loop.
\item \code{epoch_end} :: Run at the end of each epoch.
\item \code{end} :: Run at last, using \code{on.exit()}.
}
}

