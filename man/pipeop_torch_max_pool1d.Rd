% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchMaxPool.R
\name{pipeop_torch_max_pool1d}
\alias{pipeop_torch_max_pool1d}
\alias{PipeOpTorchMaxPool1D}
\title{1D Max Pooling}
\format{
\link{\code{R6Class}} inheriting from \link{\code{PipeOpTorch}}/\link{\code{PipeOp}}.
}
\description{
Initializes an instance of this \link[R6:R6Class]{R6} class.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpTorchMaxPool1D$new(id = "nn_max_pool1d", return_indices = FALSE, param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr The id for the object. The default is "nn_max_pool1d".
\item \code{param_vals}` :: named \code{list()}\cr List of hyperparameter settings. Default is  \code{list()}.
\item \code{return_indices} :: \code{logical(1)}\cr
Whether to return the indices as well, in which case there are two output channels \code{"output"} and \code{"indices"}.
}
}

\section{State}{
 The state is the value calculated by the public method \code{shapes_out()}.
}

\section{Internals}{

Calls \code{\link[torch:nn_max_pool3d]{torch::nn_max_pool3d()}} during training.
The
}

\section{Fields}{
 Only fields inherited from \link{\code{PipeOpTorch}}/\link{\code{PipeOp}}.
}

\section{Methods}{
 Only methods inherited from \link{\code{PipeOpTorch}}/\link{\code{PipeOp}}.
}

\section{Credit}{
 Parts of this documentation have been copied or adapted from the R package \link{torch}, that comes under the
MIT license, which is included in the help page of \link{\code{mlr3torch}}, as well as in the top-level folder of
the package source.
}

\section{Input and Output Channels}{

There is one input channel \code{"input"}.
Depending on the constructor argument \code{return_indices}, there is either one output channel \code{"output"} if
\code{return_indices} is \code{FALSE}, or two channels \code{"output"} and \code{"indices"} if \code{return_indices} is \code{TRUE}.
For an explanation see \code{\link{PipeOpTorch}}.
}

\section{Parameters}{

\itemize{
\item \code{kernel_size} :: \code{integer()}\cr
The size of the window. Can be single number or a vector.
\item \code{stride} :: (\verb{integer(1))}\cr
The stride of the window. Can be a single number or a vector. Default: \code{kernel_size}
\item \code{padding} :: \code{integer()}\cr
Implicit zero paddings on both sides of the input. Can be a single number or a tuple (padW,). Default: 0
\item \code{dilation} :: \code{integer()}\cr
Controls the spacing between the kernel points; also known as the Ã  trous algorithm. Default: 1
\item \code{ceil_mode} :: \code{logical(1)}\cr
When True, will use ceil instead of floor to compute the output shape. Default: \code{FALSE}
}
}

\examples{
# po
obj = po("nn_max_pool1d", kernel_size = 3)
obj$id
obj$module_generator
obj$shapes_out(c(16, 5, 100))

# pot
obj = pot("max_pool1d")
obj$id

}
\seealso{
Other PipeOpTorch: 
\code{\link{pipeop_torch_avg_pool1d}},
\code{\link{pipeop_torch_avg_pool2d}},
\code{\link{pipeop_torch_avg_pool3d}},
\code{\link{pipeop_torch_avg_pool}},
\code{\link{pipeop_torch_batch_norm}},
\code{\link{pipeop_torch_celu}},
\code{\link{pipeop_torch_conv1d}},
\code{\link{pipeop_torch_conv2d}},
\code{\link{pipeop_torch_conv3d}},
\code{\link{pipeop_torch_conv_transpose1d}},
\code{\link{pipeop_torch_conv_transpose2d}},
\code{\link{pipeop_torch_conv_transpose3d}},
\code{\link{pipeop_torch_conv_transpose}},
\code{\link{pipeop_torch_conv}},
\code{\link{pipeop_torch_dropout}},
\code{\link{pipeop_torch_elu}},
\code{\link{pipeop_torch_flatten}},
\code{\link{pipeop_torch_gelu}},
\code{\link{pipeop_torch_glu}},
\code{\link{pipeop_torch_hard_shrink}},
\code{\link{pipeop_torch_hardsigmoid}},
\code{\link{pipeop_torch_hard}},
\code{\link{pipeop_torch_head}},
\code{\link{pipeop_torch_layer_norm}},
\code{\link{pipeop_torch_leaky_relu}},
\code{\link{pipeop_torch_linear}},
\code{\link{pipeop_torch_log_sigmoid}},
\code{\link{pipeop_torch_max_pool2d}},
\code{\link{pipeop_torch_max_pool3d}},
\code{\link{pipeop_torch_max_pool}},
\code{\link{pipeop_torch_merge_cat}},
\code{\link{pipeop_torch_merge_prod}},
\code{\link{pipeop_torch_merge_sum}},
\code{\link{pipeop_torch_merge}},
\code{\link{pipeop_torch_prelu}},
\code{\link{pipeop_torch_relu6}},
\code{\link{pipeop_torch_relu}},
\code{\link{pipeop_torch_reshape}},
\code{\link{pipeop_torch_rrelu}},
\code{\link{pipeop_torch_selu}},
\code{\link{pipeop_torch_sigmoid}},
\code{\link{pipeop_torch_softmax}},
\code{\link{pipeop_torch_softplus}},
\code{\link{pipeop_torch_softshrink}},
\code{\link{pipeop_torch_softsign}},
\code{\link{pipeop_torch_squeeze}},
\code{\link{pipeop_torch_tanhshrink}},
\code{\link{pipeop_torch_tanh}},
\code{\link{pipeop_torch_threshold}}
}
\concept{PipeOpTorch}
