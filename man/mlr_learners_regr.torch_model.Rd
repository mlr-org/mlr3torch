% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerTorchModel.R
\name{mlr_learners_regr.torch_model}
\alias{mlr_learners_regr.torch_model}
\alias{LearnerRegrTorchModel}
\title{Regression Torch Learner}
\format{
\code{\link{R6Class}} inheriting from \code{\link{LearnerRegrTorch}}, \code{\link{LearnerRegr}}, \code{\link{Learner}}.
}
\description{
Regression Torch Learner that is used internally by \code{\link{PipeOpTorchModelRegr}}.
}
\section{State}{
 See \code{\link{LearnerRegrTorch}}
}

\section{Parameters}{
 See \code{\link{LearnerRegrTorch}}
}

\section{Fields}{
 Fields inherited from \code{\link{LearnerRegrTorch}}, \code{\link{LearnerRegr}}, \code{\link{Learner}}.
}

\section{Methods}{
 Methods inherited from \code{\link{LearnerRegrTorch}}, \code{\link{LearnerRegr}}, \code{\link{Learner}}.
}

\section{Construction}{


Classification:

\code{LearnerClassifTorchModel$new(network, ingress_tokens, optimizer = t_opt("adam"), loss = t_loss("cross_entropy"), callbacks = list(), packages = character(0), feature_types = NULL)}

Regression:

\code{LearnerRegrTorchModel$new(network, ingress_tokens, optimizer = t_opt("adam"), loss = t_loss("mse"), callbacks = list(), packages = character(0), feature_types = NULL)}
\itemize{
\item \code{network} :: \code{\link{nn_module}}\cr
An instantiatded \code{\link{nn_module}}.
\item \code{ingress_tokens} :: \code{list} of \code{\link[=TorchIngressToken]{TorchIngressToken()}}\cr
A list with ingress tokens that defines how the dataloader will be defined.
\item \code{optimizer} :: (\code{\link{TorchOptimizer}})\cr
The optimizer for the model. Defaults is adam.
\item \code{loss} :: (\code{\link{TorchLoss}})\cr
The loss for the model. Default is cross entropy.
\item \code{callbacks}:: \code{list()} of \code{\link{TorchCallback}} objects\cr
The callbacks used for training. Must have unique IDs.
\item \code{packages} :: (\code{character()})\cr
The additional packages on which the learner depends.
added so do not have to be passed explicitly.
\item \code{feature_types} :: (\code{character()})\cr
The feature types the learner can deal with, see \code{mlr_reflections$task_feature_types}.
}
}

