% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTorchIngress.R
\name{mlr_pipeops_torch_ingress_img}
\alias{mlr_pipeops_torch_ingress_img}
\alias{PipeOpTorchIngressImage}
\title{Torch Entry Point for Images}
\description{
uses task with "imageuri" column and loads this as images.
doesn't do any preprocessing or so (image resizing) and instead just errors if images don't fit.
also no data augmentation etc.
}
\section{Parameters}{

\itemize{
\item \code{select} :: \code{logical(1)}\cr
Whether \code{PipeOp} should selected the supported feature types. Otherwise it will err, when receiving tasks
with unsupported feature types.
\item \code{channels} :: \code{integer(1)}\cr
The number of input channels.
\item \code{height} :: \code{integer(1)}\cr
The height of the pixels.
\item \code{width} :: \code{integer(1)}\cr
The width of the pixels.
}
}

\section{Internals}{

Uses \code{\link[magick:editing]{magick::image_read()}} to load the image.
}

\section{Input and Output Channels}{

One input channel called \code{"input"} and one output channel called \code{"output"}.
For an explanation see \code{\link{PipeOpTorch}}.
}

\section{State}{

The state is set to the input shape.
}

\examples{
po_ingress = po("torch_ingress_img", channels = 3, height = 64, width = 64)
po_ingress
}
\seealso{
Other PipeOp: 
\code{\link{mlr_pipeops_module}},
\code{\link{mlr_pipeops_torch_callbacks}},
\code{\link{mlr_pipeops_torch_optimizer}}

Other Graph Network: 
\code{\link{ModelDescriptor}()},
\code{\link{TorchIngressToken}()},
\code{\link{mlr_learners_torch_model}},
\code{\link{mlr_pipeops_module}},
\code{\link{mlr_pipeops_torch_ingress_categ}},
\code{\link{mlr_pipeops_torch_ingress_ltnsr}},
\code{\link{mlr_pipeops_torch_ingress_num}},
\code{\link{mlr_pipeops_torch_ingress}},
\code{\link{mlr_pipeops_torch}},
\code{\link{model_descriptor_to_learner}()},
\code{\link{model_descriptor_to_module}()},
\code{\link{model_descriptor_union}()},
\code{\link{nn_graph}()}
}
\concept{Graph Network}
\concept{PipeOp}
\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3torch:PipeOpTorchIngress]{mlr3torch::PipeOpTorchIngress}} -> \code{PipeOpTorchIngressImage}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpTorchIngressImage-new}{\code{PipeOpTorchIngressImage$new()}}
\item \href{#method-PipeOpTorchIngressImage-clone}{\code{PipeOpTorchIngressImage$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchIngressImage-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchIngressImage-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchIngressImage$new(id = "torch_ingress_img", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting  object.}

\item{\code{param_vals}}{(\code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpTorchIngressImage-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpTorchIngressImage-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTorchIngressImage$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
