% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerClassifTorchImage.R
\name{mlr_learners_classif_torch_image}
\alias{mlr_learners_classif_torch_image}
\alias{LearnerClassifTorchImage}
\title{Image Classification Network}
\description{
Base Class for Image Classification Learners.
}
\section{Inheriting}{

To inherit from this class, one should overwrite the private \verb{$.network()} to return a \code{\link{nn_module}} that has
one argument in its forward method.
}

\section{Parameters}{

Parameters include those inherited from \code{\link{LearnerClassifTorch}}, the \code{param_set} construction argument, as
well as:
\itemize{
\item \code{channels} :: \code{integer(1)} \cr
The number of input channels.
\item \code{height} :: \code{integer(1)} \cr
The height of the input image.
\item \code{width} :: \code{integer(1)} \cr
The width of the input image.
}
}

\seealso{
Other Learner: 
\code{\link{mlr_learners_classif.alexnet}},
\code{\link{mlr_learners_classif.mlp}},
\code{\link{mlr_learners_classif.torch_featureless}},
\code{\link{mlr_learners_classif.torch_model}},
\code{\link{mlr_learners_classif.torch}},
\code{\link{mlr_learners_regr.mlp}},
\code{\link{mlr_learners_regr.torch_featureless}},
\code{\link{mlr_learners_regr.torch_model}},
\code{\link{mlr_learners_regr.torch}}
}
\concept{Learner}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerClassif]{mlr3::LearnerClassif}} -> \code{\link[mlr3torch:LearnerClassifTorch]{mlr3torch::LearnerClassifTorch}} -> \code{LearnerClassifTorchImage}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerClassifTorchImage-new}{\code{LearnerClassifTorchImage$new()}}
\item \href{#method-LearnerClassifTorchImage-clone}{\code{LearnerClassifTorchImage$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifTorchImage-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifTorchImage-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifTorchImage$new(
  id,
  param_set,
  label,
  optimizer = t_opt("adam"),
  loss = t_loss("cross_entropy"),
  callbacks = list(),
  packages = c("torchvision", "magick"),
  man,
  properties = c("twoclass", "multiclass")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_set}}{(\code{paradox::ParamSet})\cr
The parameter set.}

\item{\code{label}}{(\code{character(1)})\cr
Label for the new instance.}

\item{\code{optimizer}}{(\code{\link{TorchOptimizer}})\cr
The torch optimizer.}

\item{\code{loss}}{(\code{\link{TorchLoss}})\cr
The loss used to train the network.}

\item{\code{callbacks}}{(\code{list()} of \code{\link{TorchCallback}}s)\cr
The callbacks used during training.
Must have unique ids.
They are executed in the order in which they are provided}

\item{\code{packages}}{(\code{character()})\cr
The R packages this object depends on.}

\item{\code{man}}{(\code{character(1)})\cr
String in the format \verb{[pkg]::[topic]} pointing to a manual page for this object.
The referenced help package can be opened via method \verb{$help()}.}

\item{\code{properties}}{(\code{character()})\cr
The properties of the object.
See \code{\link[=mlr_reflections]{mlr_reflections$learner_properties}} for available values.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifTorchImage-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifTorchImage-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifTorchImage$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
