% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TorchOp.R
\name{TorchOp}
\alias{TorchOp}
\title{Abstract Base Class for Torch Operators}
\description{
All TorchOps inherit from this class. @export
}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{TorchOp}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TorchOp-new}{\code{TorchOp$new()}}
\item \href{#method-TorchOp-build}{\code{TorchOp$build()}}
\item \href{#method-TorchOp-print}{\code{TorchOp$print()}}
\item \href{#method-TorchOp-clone}{\code{TorchOp$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOp-new"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOp-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this \link[R6:R6Class]{R6 Class}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOp$new(
  id,
  param_set,
  param_vals,
  input = NULL,
  output = NULL,
  packages = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
The id for of the new object.}

\item{\code{param_set}}{(\code{ParamSet})\cr
Parameter set to be set for the \link[mlr3pipelines:PipeOp]{PipeOp}.}

\item{\code{param_vals}}{(named \code{list()})\cr
Named list with parameter values to be set after construction.}

\item{\code{input}}{(\code{data.table()})\cr
Input channels to be set for the \link[mlr3pipelines:PipeOp]{PipeOp}.
The input default name is "input", accpets "ModelArgs" during \verb{$train()} and a "Task"
during \verb{$predict()}.}

\item{\code{output}}{(\code{data.table()})\cr
Output channels to be set for the \link[mlr3pipelines:PipeOp]{PipeOp}.
The output default name is "output", accepts "ModelArgs" during \verb{$train()} and a "Task"
during \verb{$predict()}.}

\item{\code{packages}}{(\code{character()}) The packages on which the \link{TorchOp} depends.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOp-build"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOp-build}{}}}
\subsection{Method \code{build()}}{
Builds a Torch Operator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOp$build(inputs, task, y)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(named \code{list()})\cr
Named list of \code{torch_tensor}s that form a batch that is the input
for the current layer. The names have to correspond to the names of the
\link[=TorchOp]{TorchOp's} input channels.}

\item{\code{task}}{(\code{mlr3::Task})\cr
The task for which to build the network.}

\item{\code{y}}{(\code{torch_tensor})\cr
A batch of the target variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{torch::nn_module()} where the arguments of the \verb{$forward()} function correspond
to the names of the input channels and the output is a single \code{torch_tensor}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOp-print"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOp-print}{}}}
\subsection{Method \code{print()}}{
Printer for this object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOp$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(any)\cr
Currently unused.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TorchOp-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TorchOp-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TorchOp$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
