% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallbackSetCheckpoint.R
\name{mlr_callback_set.checkpoint}
\alias{mlr_callback_set.checkpoint}
\alias{CallbackSetCheckpoint}
\title{Checkpoint Callback}
\description{
Saves the model during training.
}
\seealso{
Other Callback: 
\code{\link{TorchCallback}},
\code{\link{as_torch_callback}()},
\code{\link{as_torch_callbacks}()},
\code{\link{callback_set}()},
\code{\link{mlr3torch_callbacks}},
\code{\link{mlr_callback_set}},
\code{\link{mlr_callback_set.progress}},
\code{\link{mlr_context_torch}},
\code{\link{t_clbk}()},
\code{\link{torch_callback}()}
}
\concept{Callback}
\section{Super class}{
\code{\link[mlr3torch:CallbackSet]{mlr3torch::CallbackSet}} -> \code{CallbackSetCheckpoint}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CallbackSetCheckpoint-new}{\code{CallbackSetCheckpoint$new()}}
\item \href{#method-CallbackSetCheckpoint-on_epoch_end}{\code{CallbackSetCheckpoint$on_epoch_end()}}
\item \href{#method-CallbackSetCheckpoint-on_end}{\code{CallbackSetCheckpoint$on_end()}}
\item \href{#method-CallbackSetCheckpoint-clone}{\code{CallbackSetCheckpoint$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallbackSetCheckpoint-new"></a>}}
\if{latex}{\out{\hypertarget{method-CallbackSetCheckpoint-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallbackSetCheckpoint$new(path, freq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{(\code{character(1)})\cr
The path to a folder where the models are saved. This path must not exist before.}

\item{\code{freq}}{(\code{integer(1)})\cr
The frequency how often the model is saved (epoch frequency).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallbackSetCheckpoint-on_epoch_end"></a>}}
\if{latex}{\out{\hypertarget{method-CallbackSetCheckpoint-on_epoch_end}{}}}
\subsection{Method \code{on_epoch_end()}}{
Saves the network state dict.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallbackSetCheckpoint$on_epoch_end()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallbackSetCheckpoint-on_end"></a>}}
\if{latex}{\out{\hypertarget{method-CallbackSetCheckpoint-on_end}{}}}
\subsection{Method \code{on_end()}}{
Saves the final network.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallbackSetCheckpoint$on_end()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallbackSetCheckpoint-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CallbackSetCheckpoint-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallbackSetCheckpoint$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
