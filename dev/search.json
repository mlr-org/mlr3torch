[{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed. version GNU Lesser General Public License incorporates terms conditions version 3 GNU General Public License, supplemented additional permissions listed .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_0-additional-definitions","dir":"","previous_headings":"","what":"0. Additional Definitions","title":"GNU Lesser General Public License","text":"used herein, “License” refers version 3 GNU Lesser General Public License, “GNU GPL” refers version 3 GNU General Public License. “Library” refers covered work governed License, Application Combined Work defined . “Application” work makes use interface provided Library, otherwise based Library. Defining subclass class defined Library deemed mode using interface provided Library. “Combined Work” work produced combining linking Application Library. particular version Library Combined Work made also called “Linked Version”. “Minimal Corresponding Source” Combined Work means Corresponding Source Combined Work, excluding source code portions Combined Work , considered isolation, based Application, Linked Version. “Corresponding Application Code” Combined Work means object code /source code Application, including data utility programs needed reproducing Combined Work Application, excluding System Libraries Combined Work.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_1-exception-to-section-3-of-the-gnu-gpl","dir":"","previous_headings":"","what":"1. Exception to Section 3 of the GNU GPL","title":"GNU Lesser General Public License","text":"may convey covered work sections 3 4 License without bound section 3 GNU GPL.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_2-conveying-modified-versions","dir":"","previous_headings":"","what":"2. Conveying Modified Versions","title":"GNU Lesser General Public License","text":"modify copy Library, , modifications, facility refers function data supplied Application uses facility (argument passed facility invoked), may convey copy modified version: ) License, provided make good faith effort ensure , event Application supply function data, facility still operates, performs whatever part purpose remains meaningful, b) GNU GPL, none additional permissions License applicable copy.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_3-object-code-incorporating-material-from-library-header-files","dir":"","previous_headings":"","what":"3. Object Code Incorporating Material from Library Header Files","title":"GNU Lesser General Public License","text":"object code form Application may incorporate material header file part Library. may convey object code terms choice, provided , incorporated material limited numerical parameters, data structure layouts accessors, small macros, inline functions templates (ten fewer lines length), following: ) Give prominent notice copy object code Library used Library use covered License. b) Accompany object code copy GNU GPL license document.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_4-combined-works","dir":"","previous_headings":"","what":"4. Combined Works","title":"GNU Lesser General Public License","text":"may convey Combined Work terms choice , taken together, effectively restrict modification portions Library contained Combined Work reverse engineering debugging modifications, also following: ) Give prominent notice copy Combined Work Library used Library use covered License. b) Accompany Combined Work copy GNU GPL license document. c) Combined Work displays copyright notices execution, include copyright notice Library among notices, well reference directing user copies GNU GPL license document. d) one following: 0) Convey Minimal Corresponding Source terms License, Corresponding Application Code form suitable , terms permit, user recombine relink Application modified version Linked Version produce modified Combined Work, manner specified section 6 GNU GPL conveying Corresponding Source. 1) Use suitable shared library mechanism linking Library. suitable mechanism one () uses run time copy Library already present user’s computer system, (b) operate properly modified version Library interface-compatible Linked Version. e) Provide Installation Information, otherwise required provide information section 6 GNU GPL, extent information necessary install execute modified version Combined Work produced recombining relinking Application modified version Linked Version. (use option 4d0, Installation Information must accompany Minimal Corresponding Source Corresponding Application Code. use option 4d1, must provide Installation Information manner specified section 6 GNU GPL conveying Corresponding Source.)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_5-combined-libraries","dir":"","previous_headings":"","what":"5. Combined Libraries","title":"GNU Lesser General Public License","text":"may place library facilities work based Library side side single library together library facilities Applications covered License, convey combined library terms choice, following: ) Accompany combined library copy work based Library, uncombined library facilities, conveyed terms License. b) Give prominent notice combined library part work based Library, explaining find accompanying uncombined form work.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/LICENSE.html","id":"id_6-revised-versions-of-the-gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"6. Revised Versions of the GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Free Software Foundation may publish revised /new versions GNU Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library received specifies certain numbered version GNU Lesser General Public License “later version” applies , option following terms conditions either published version later version published Free Software Foundation. Library received specify version number GNU Lesser General Public License, may choose version GNU Lesser General Public License ever published Free Software Foundation. Library received specifies proxy can decide whether future versions GNU Lesser General Public License shall apply, proxy’s public statement acceptance version permanent authorization choose version Library.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/articles/callbacks.html","id":"building-blocks","dir":"Articles","previous_headings":"","what":"Building Blocks","title":"Custom Callbacks","text":"heart callback mechanism three R6 classes: CallbackSet contains methods executed different stages training loop TorchCallback wraps CallbackSet annotates meta information, including ParamSet ContextTorch defines information training process CallbackSet access using predefined callbacks, one usually interacts TorchCallback class, constructed using t_clbk(<id>): wrapped CallbackSet accessible via field $generator, can create new instance calling $new() Within training loop torch model, different stages exist callback can execute code. , list stages available, also described documentation CallbackSet. history callback, see runs code beginning, validation starts, end epoch.","code":"tc_hist = t_clbk(\"history\") tc_hist ## <TorchCallback:history> History ## * Generator: CallbackSetHistory ## * Parameters: list() ## * Packages: mlr3torch,torch cbs_hist = tc_hist$generator$new() mlr_reflections$torch$callback_stages ##  [1] \"on_begin\"             \"on_epoch_begin\"       \"on_batch_begin\"       ##  [4] \"on_after_backward\"    \"on_batch_end\"         \"on_before_valid\"      ##  [7] \"on_batch_valid_begin\" \"on_batch_valid_end\"   \"on_valid_end\"         ## [10] \"on_epoch_end\"         \"on_end\"               \"on_exit\" cbs_hist ## <CallbackSetHistory> ## * Stages: on_begin, on_before_valid, on_epoch_end"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/callbacks.html","id":"writing-a-custom-logger","dir":"Articles","previous_headings":"","what":"Writing a Custom Logger","title":"Custom Callbacks","text":"order define custom callback, can use helper torch_callback() helper function. example, create custom logger keeps track exponential moving average train loss prints end every epoch. callback takes one argument alpha smoothing parameter store moving average self$moving_loss. value alpha can later configured Learner. , implement main logic callback using two stages: on_batch_end(), called optimizer updates network parameters using mini-batch. , access last loss via ContextTorch’s (accessible via self$ctx) $last_loss field update value self$moving_loss. on_before_valid(), run validation loop. point simply print exponential moving average training loss. Finally, order make final value moving average accessible Learner training finishes, implement state_dict() method return value load_state_dict(state_dict) method, takes previously retrieved state dict sets callback. Note access final $moving_loss via learner, otherwise implement methods. created TorchCallback object associated CallbackSet R6-class us:","code":"custom_logger = torch_callback(\"custom_logger\",   initialize = function(alpha = 0.1) {     self$alpha = alpha     self$moving_loss = NULL   },   on_batch_end = function() {     if (is.null(self$moving_training_loss)) {       self$moving_loss = self$ctx$last_loss     } else {       self$moving_loss = self$alpha * self$last_loss + (1 - self$alpha) * self$moving_loss     }   },   on_before_valid = function() {     cat(sprintf(\"Epoch %s: %.2f\\n\", self$ctx$epoch, self$moving_loss))   },   state_dict = function() {     self$moving_loss   },   load_state_dict = function(state_dict) {     self$moving_loss = state_dict   } ) custom_logger ## <TorchCallback:custom_logger> Custom_logger ## * Generator: CallbackSetCustom_logger ## * Parameters: list() ## * Packages: mlr3torch,torch custom_logger$generator ## <CallbackSetCustom_logger> object generator ##   Inherits from: <inherit> ##   Public: ##     initialize: function (alpha = 0.1)  ##     state_dict: function ()  ##     load_state_dict: function (state_dict)  ##     on_before_valid: function ()  ##     on_batch_end: function ()  ##   Parent env: <environment: 0x560291776688> ##   Locked objects: FALSE ##   Locked class: FALSE ##   Portable: TRUE"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/callbacks.html","id":"using-the-custom-logger","dir":"Articles","previous_headings":"","what":"Using the Custom Logger","title":"Custom Callbacks","text":"order showcase effects, create train simple multi layer perceptron pass callback. set smoothing parameter alpha 0.05. information returnede state_dict() now accessible via Learner’s $model-slot:","code":"task = tsk(\"iris\") mlp = lrn(\"classif.mlp\",   callbacks = custom_logger, cb.custom_logger.alpha = 0.05,   epochs = 5, batch_size = 64, neurons = 20)  mlp$train(task) ## Epoch 1: 1.18 ## Epoch 2: 1.06 ## Epoch 3: 1.12 ## Epoch 4: 1.15 ## Epoch 5: 1.16 mlp$model$callbacks$custom_logger ## [1] 1.15931"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"quickstart","dir":"Articles","previous_headings":"","what":"Quickstart","title":"Get Started","text":"vignette show get started mlr3torch training simple neural network tabular regression problem. assume familiar mlr3 framework, see e.g. mlr3 book. first example, train simple multi-layer perceptron (MLP) well-known “mtcars” task, goal predict miles per galleon (‘mpg’) cars. architecture comes predfined learner mlr3torch, can also easily create new network architectures, see Neural Networks Graphs vignette detailed introduoduion. first set seed reproducibility, load library construct task. Learners mlr3torch work similary mlr3 learners. , construct simple multi layer perceptron regression. usual calling lrn() configuring parameters: use two hidden layers 50 neurons, training, set batch size 32, number training epochs 30 device \"cpu\". complete description available parameters see ?mlr3torch::LearnerTorchMLP. can use learner training prediction just like regression learner. , split observations training test set, train learner training set create predictions test set. Finally, compute mean squared error predictions.","code":"set.seed(314) library(mlr3torch) task = tsk(\"mtcars\") task$head() #>      mpg    am  carb   cyl  disp  drat  gear    hp  qsec    vs    wt #>    <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #> 1:  21.0     1     4     6   160  3.90     4   110 16.46     0 2.620 #> 2:  21.0     1     4     6   160  3.90     4   110 17.02     0 2.875 #> 3:  22.8     1     1     4   108  3.85     4    93 18.61     1 2.320 #> 4:  21.4     0     1     6   258  3.08     3   110 19.44     1 3.215 #> 5:  18.7     0     2     8   360  3.15     3   175 17.02     0 3.440 #> 6:  18.1     0     1     6   225  2.76     3   105 20.22     1 3.460 mlp = lrn(\"regr.mlp\",   # architecture parameters   neurons = c(50, 50),   # training arguments   batch_size = 32, epochs = 30, device = \"cpu\" ) mlp #> <LearnerTorchMLP[regr]:regr.mlp>: My Little Powny #> * Model: - #> * Parameters: epochs=30, device=cpu, num_threads=1, #>   num_interop_threads=1, seed=random, jit_trace=FALSE, eval_freq=1, #>   measures_train=<list>, measures_valid=<list>, patience=0, #>   min_delta=0, batch_size=32, shuffle=TRUE, tensor_dataset=FALSE, #>   neurons=50,50, p=0.5, activation=<nn_relu>, activation_args=<list> #> * Validate: NULL #> * Packages: mlr3, mlr3torch, torch #> * Predict Types:  [response] #> * Feature Types: integer, numeric, lazy_tensor #> * Properties: internal_tuning, marshal, validation #> * Optimizer: adam #> * Loss: mse #> * Callbacks: - # Split the obersevations into training and test set splits = partition(task) # Train the learner on the train set mlp$train(task, row_ids = splits$train) # Predict the test set prediction = mlp$predict(task, row_ids = splits$test) # Compute the mse prediction$score(msr(\"regr.mse\")) #> regr.mse  #> 294.1396"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"configuring-a-learner","dir":"Articles","previous_headings":"","what":"Configuring a Learner","title":"Get Started","text":"Although torch learners quite like mlr3 learners, differences. One LearnerTorch classes construction arguments, .e. torch learners modular learners. learners free implement construction arguments, common torch learners, namely loss, optimizer callbacks. object can parameters included LearnerTorch’s parameter set. previous example, specify explicitly used default values, Adam optimizer, MSE loss callbacks. now show configure three aspects learner mlr3torch::TorchOptimizer, mlr3torch::TorchLoss, mlr3torch::TorchCallback classes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"loss","dir":"Articles","previous_headings":"Configuring a Learner","what":"Loss","title":"Get Started","text":"loss function, also known objective function cost function, measures discrepancy predicted output true output. quantifies well model performing training. R package torch, underpins mlr3torch framework, already provides number predefined loss functions Mean Squared Error (nn_mse_loss), Mean Absolute Error (nn_l1_loss), cross entropy loss (nn_cross_entropy_loss). mlr3torch, represent loss functions using mlr3torch::TorchLoss class. provides thin wrapper around torch loss functions annotates meta information, importantly paradox::ParamSet allows configure loss function. object can constructed using t_loss(<key>). , construct L1 loss function, also known Mean Absolute Error (MAE). printed output informs us wrapped loss function (nn_l1_loss), configured parameters, packages depends task types can used. ParamSet contains one parameter, namely reduction, specifies loss reduced batch. can pass TorchLoss argument loss initialization learner. parameters loss added learner’s ParamSet, prefixed \"loss.\". predefined loss functions stored mlr3torch_losses dictionary, can retrieved using t_loss(<key>).","code":"l1 = t_loss(\"l1\") l1 #> <TorchLoss:l1> Absolute Error #> * Generator: nn_l1_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # the paradox::ParamSet of the loss l1$param_set #> <ParamSet(1)> #>           id    class lower upper nlevels default  value #>       <char>   <char> <num> <num>   <num>  <list> <list> #> 1: reduction ParamFct    NA    NA       2    mean [NULL] mlp_l1 = lrn(\"regr.mlp\", loss = l1) mlp_l1$param_set$values$loss.reduction #> NULL mlr3torch_losses #> <DictionaryMlr3torchLosses> with 3 stored values #> Keys: cross_entropy, l1, mse"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"optimizer","dir":"Articles","previous_headings":"Configuring a Learner","what":"Optimizer","title":"Get Started","text":"optimizer determines model’s weights updated based calculated loss. adjusts parameters model minimize loss function, optimizing model’s performance. Optimizers work analogous loss functions, .e. mlr3torch provides thin wrapper – TorchOptimizer class – around optimizers AdamW (optim_ignite_adamw) SGD (optim_ignite_sgd). TorchLoss objects can constructed using t_opt(<key>). optimizers, associated ParamSet interesting see : Parameters TorchOptimizer (also TorchLoss TorchCallback) can set usual mlr3 way, .e. either construction, afterwards using $set_values() method parameter set. see optimizer’s parameters added learner’s ParamSet (prefixed \"opt.\") values set values specified. exposing optimizer’s parameters, can conveniently tuned using mlr3tuning. available optimizers stored mlr3torch_optimizers dictionary.","code":"sgd = t_opt(\"sgd\") sgd #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_ignite_sgd #> * Parameters: list() #> * Packages: torch,mlr3torch  sgd$param_set #> <ParamSet(5)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1:           lr ParamDbl     0   Inf     Inf <NoDefault[0]> [NULL] #> 2:     momentum ParamDbl     0     1     Inf              0 [NULL] #> 3:    dampening ParamDbl     0     1     Inf              0 [NULL] #> 4: weight_decay ParamDbl     0     1     Inf              0 [NULL] #> 5:     nesterov ParamLgl    NA    NA       2          FALSE [NULL] sgd$param_set$set_values(   lr = 0.5, # increase learning rate   nesterov = FALSE # no nesterov momentum ) mlp_sgd = lrn(\"regr.mlp\", optimizer = sgd) as.data.table(mlp_sgd$param_set)[   startsWith(id, \"opt.\")][[1L]] #> [1] \"opt.lr\"           \"opt.momentum\"     \"opt.dampening\"    \"opt.weight_decay\" #> [5] \"opt.nesterov\" mlp_sgd$param_set$values[c(\"opt.lr\", \"opt.nesterov\")] #> $opt.lr #> [1] 0.5 #>  #> $opt.nesterov #> [1] FALSE mlr3torch_optimizers #> <DictionaryMlr3torchOptimizers> with 5 stored values #> Keys: adagrad, adam, adamw, rmsprop, sgd"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"callbacks","dir":"Articles","previous_headings":"Configuring a Learner","what":"Callbacks","title":"Get Started","text":"third important configuration option callbacks allow customize training process. allows saving model checkpoints, logging metrics, implementing custom functionality specific training scenarios. tutorial implement custom callback, see Custom Callbacks vignette. , show use predefined callbacks. , retrieve \"history\" callback using t_clbk(), parameters merely saves training validation history learner can accessed afterwards. wanted learn callback , can access help page wrapped object using $help() method. Note also possible loss optimizer. predefined callbacks stored mlr3torch_callbacks dictionary.","code":"history = t_clbk(\"history\") history #> <TorchCallback:history> History #> * Generator: CallbackSetHistory #> * Parameters: list() #> * Packages: mlr3torch,torch history$help() mlr3torch_callbacks #> <DictionaryMlr3torchCallbacks> with 11 stored values #> Keys: checkpoint, history, lr_cosine_annealing, lr_lambda, #>   lr_multiplicative, lr_one_cycle, lr_reduce_on_plateau, lr_step, #>   progress, tb, unfreeze"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/get_started.html","id":"putting-it-together","dir":"Articles","previous_headings":"Configuring a Learner","what":"Putting it Together","title":"Get Started","text":"now define customized MLP learner using loss, optimizer callback just covered. keep track performance, use 30% training data validation evaluate using MAE Measure. Note mearures_valid measures_train parameters LearnerTorch take common mlr3::Measures, whereas loss function must TorchLoss. now train learner “mtcars” task use train-test split . make predictions unseen test data compare scores. directly optimized L1 (aka MAE) loss tweaked learning rate, configured mlp_custom learner lower MAE default mlp learner. configured learner use history callback, can find validation history $model slot: plot shows epochs 6 30.  important information stored Learner’s model $network, underlying nn_module. full description model, see ?LearnerTorch.","code":"mlp_custom = lrn(\"regr.mlp\",   # construction arguments   optimizer = sgd, loss = l1, callbacks = history,   # scores to keep track of   measures_valid = msr(\"regr.mae\"),   # other parameters are left as-is:   # architecture   neurons = c(50, 50),   # training arguments   batch_size = 32, epochs = 30, device = \"cpu\",   # validation proportion   validate = 0.3 )  mlp_custom #> <LearnerTorchMLP[regr]:regr.mlp>: My Little Powny #> * Model: - #> * Parameters: epochs=30, device=cpu, num_threads=1, #>   num_interop_threads=1, seed=random, jit_trace=FALSE, eval_freq=1, #>   measures_train=<list>, measures_valid=<MeasureRegrSimple>, #>   patience=0, min_delta=0, batch_size=32, shuffle=TRUE, #>   tensor_dataset=FALSE, neurons=50,50, p=0.5, activation=<nn_relu>, #>   activation_args=<list>, opt.lr=0.5, opt.nesterov=FALSE #> * Validate: 0.3 #> * Packages: mlr3, mlr3torch, torch #> * Predict Types:  [response] #> * Feature Types: integer, numeric, lazy_tensor #> * Properties: internal_tuning, marshal, validation #> * Optimizer: sgd #> * Loss: l1 #> * Callbacks: history mlp_custom$train(task, row_ids = splits$train) prediction_custom = mlp_custom$predict(task, row_ids = splits$test) prediction_custom$score(msr(\"regr.mae\")) #> regr.mae  #> 8.543908 prediction$score(msr(\"regr.mae\")) #> regr.mae  #> 15.54688 head(mlp_custom$model$callbacks$history) #>    epoch valid.regr.mae #>    <num>          <num> #> 1:     1   2.310486e+05 #> 2:     2   2.009898e+10 #> 3:     3   6.967264e+03 #> 4:     4   3.220922e+02 #> 5:     5   7.638778e+01 #> 6:     6   7.588778e+01"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"a-torch-primer","dir":"Articles","previous_headings":"","what":"A torch Primer","title":"Internals","text":"start sampling input tensor: 2 batches 3 features: nn_module constructed nn_module_generator. nn_linear one simpler generators: Applying module gives 2-batch 4 units: neural network one (4-unit) hidden layer two outputs needs following ingredients can pipe tensor layers follows. now continue showing neural network can represented mlr3torch.","code":"input = torch_randn(2, 3) input #> torch_tensor #>  0.2528 -0.3532 -0.2106 #>  0.4273 -0.6144  0.1054 #> [ CPUFloatType{2,3} ] module_1 = nn_linear(in_features = 3, out_features = 4, bias = TRUE) output = module_1(input) output #> torch_tensor #>  0.4542 -0.2453  0.4121  0.1119 #>  0.2307 -0.3919  0.6421 -0.0936 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] activation = nn_sigmoid() module_2 = nn_linear(4, 3, bias = TRUE) softmax = nn_softmax(2) output = module_1(input) output = activation(output) output = module_2(output) output = softmax(output) output #> torch_tensor #>  0.2538  0.3499  0.3963 #>  0.2639  0.3569  0.3792 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"neural-networks-as-graphs","dir":"Articles","previous_headings":"","what":"Neural Networks as Graphs","title":"Internals","text":"mlr3torch, nn_modules wrapped PipeOpModule. advantage network structure can represented mlr3pipelines::Graph object made explicit (can plotted, can extended manipulated), compared e.g. writing function pipes input series modules. PipeOpModule can used wrap module directly, usually constructed PipeOpTorch (see later). typically single input single output, although multiple inputs possible (module called multiple arguments), multiple outputs possible module-function returns list. input output channels must explicitly declared construction. now continue recreate network using PipeOpModules. can wrap linear module_1 layers like : Note po(\"module_1\") equivalent po(\"module\", id = \"module_1\"). mechanism convenient avoid ID clashes graphs contain PipeOp multiple times. can use generated PipeOp familiar way: Note use $train(), since torch modules anything maps state (filled empty list). single hidden layer neural network can constructed Graph, can training . can now use graph’s $train() method pipe tensor whole Graph. object allows easily perform forward pass, inherit nn_module, useful various reasons. Instead class inherits nn_module Graph (work R6, since multiple inheritance available), class inherits nn_module contains Graph member slot composition. class nn_graph. constructed Graph, well information shape(s) torch_tensor(s) expects inputs. Shape info communicated integer-valued numeric vector; dimensions arbitrary, e.g. batch-size, given NA. network expects input shape c(NA, 3), since first layer created nn_linear(in_features = 3, ...). Graph multiple outputs, also possible select subset outputs use, change output order, giving output_map argument. module gives us convenience torch nn_module objects, e.g.: can used transform tensors just torch::nn_module:","code":"library(mlr3torch) po_module_1 = po(\"module_1\", module = module_1) output = po_module_1$train(list(input))[[1]] output #> torch_tensor #>  0.4542 -0.2453  0.4121  0.1119 #>  0.2307 -0.3919  0.6421 -0.0936 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] po_activation = po(\"module\", id = \"activation\", activation) po_module_2 = po(\"module_2\", module = module_2) po_softmax = po(\"module\", id = \"softmax\", module = softmax)  module_graph = po_module_1 %>>%   po_activation %>>%   po_module_2 %>>%   po_softmax  module_graph$plot(html = TRUE) output = module_graph$train(input)[[1]] output #> torch_tensor #>  0.2538  0.3499  0.3963 #>  0.2639  0.3569  0.3792 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ] # the name of the single input is: module_graph$input #>              name        train predict    op.id channel.name #>            <char>       <char>  <char>   <char>       <char> #> 1: module_1.input torch_tensor    NULL module_1        input  graph_module = nn_graph(   module_graph,   shapes_in = list(module_1.input = c(NA, 3)) ) graph_module$children #> $module_list #> An `nn_module` containing 31 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #16 parameters #> • 1: <nn_sigmoid> #0 parameters #> • 2: <nn_linear> #15 parameters #> • 3: <nn_softmax> #0 parameters graph_module(input) #> torch_tensor #>  0.2538  0.3499  0.3963 #>  0.2639  0.3569  0.3792 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"modeldescriptor","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"ModelDescriptor","title":"Internals","text":"PipeOpModule represents nn_module fixed specific tensor shape hyperparameters. constructing neural network using operators, one take care output shape operations match input shapes following operations. complete Graph matching PipeOpModules can constructed using operators mostly inherit PipeOpTorch, making use ModelDescriptor class. ModelDescriptor class contains Graph (mostly) PipeOpModules information. PipeOpTorch transforms ModelDescriptor adds PipeOpModules Graph. ModelDescriptors always build Graph specific Task. easiest way initialize proper ModelDescriptor use appropriate PipeOpTorchIngress given datatype. use PipeOpTorchIngressNumeric, used numeric data. ModelDescriptor S3 object contains Graph, information generate data ($ingress $task), tags build model unrelated architecture ($optimizer, $loss $callbacks) well information necessary extend graph along given output ($pointer $pointer_shape). $pointer identifies output $graph PipeOpTorch extend. Piping ModelDescriptor PipeOpTorchLinear, example, adds PipeOpModule wrapping torch::nn_linear. $pointer now updated identify output PipeOpModule, $pointer_shape shows shape changed 4 units (3 input ). model_descriptor_to_module() function converts nn_graph, functional torch::nn_module.","code":"task = tsk(\"iris\")$select(colnames(iris)[1:3])  po_torch_in = po(\"torch_ingress_num\") md = po_torch_in$train(list(task))[[1]]  md #> <ModelDescriptor: 1 ops> #> * Ingress:  torch_ingress_num.input: [(NA,3)] #> * Task:  iris [classif] #> * Callbacks:  N/A #> * Optimizer:  N/A #> * Loss:  N/A #> * pointer:  torch_ingress_num.output [(NA,3)] unclass(md) #> $graph #> Graph with 1 PipeOps: #>                 ID         State sccssors prdcssors #>             <char>        <char>   <char>    <char> #>  torch_ingress_num <<UNTRAINED>>                    #>  #> $ingress #> $ingress$torch_ingress_num.input #> Ingress: Task[Petal.Length,Sepal.Length,Sepal.Width] --> Tensor(NA, 3) #>  #>  #> $task #> <TaskClassif:iris> (150 x 4): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (3): #>   - dbl (3): Petal.Length, Sepal.Length, Sepal.Width #>  #> $optimizer #> NULL #>  #> $loss #> NULL #>  #> $callbacks #> named list() #>  #> $pointer #> [1] \"torch_ingress_num\" \"output\"            #>  #> $pointer_shape #> [1] NA  3 po_torch_linear = po(\"nn_linear\", out_features = 4) md = po_torch_linear$train(list(md))[[1]]  md$graph #> Graph with 2 PipeOps: #>                 ID         State  sccssors         prdcssors #>             <char>        <char>    <char>            <char> #>  torch_ingress_num <<UNTRAINED>> nn_linear                   #>          nn_linear <<UNTRAINED>>           torch_ingress_num md$pointer #> [1] \"nn_linear\" \"output\" md$pointer_shape #> [1] NA  4 small_module = model_descriptor_to_module(md, list(md$pointer))  small_module(input) #> torch_tensor #>  0.2274  0.2261 -0.4887 -0.1051 #>  0.1440  0.2850 -0.3803 -0.2081 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"using-modeldescriptor-to-get-data","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Using ModelDescriptor to get Data","title":"Internals","text":"ModelDescriptor represent Graph nn_module created, also way Task processed get input batches. torch::dataset can created calling task_dataset(); task feature_ingress_tokens arguments can retrieved ModelDescriptor. target_batchgetter needs created extra (necessary), since depends ultimate machine learning model, looked far. Use $.getbatch() method get batch can given nn_module. Note $x $y slot, latter used, account possible target batches. $x slot also list, since able handle NNs multiple inputs (see ).","code":"td = task_dataset(   task = md$task,   feature_ingress_tokens = md$ingress )  td #> <task_dataset> #>   Inherits from: <dataset> #>   Public: #>     .getbatch: function (index)  #>     .getitem: function (index)  #>     .length: function ()  #>     all_features: Petal.Length Sepal.Length Sepal.Width Species #>     cache_lazy_tensors: FALSE #>     clone: function (deep = FALSE)  #>     feature_ingress_tokens: list #>     initialize: function (task, feature_ingress_tokens, target_batchgetter = NULL)  #>     load_state_dict: function (x, ..., .refer_to_state_dict = FALSE)  #>     state_dict: function ()  #>     target_batchgetter: NULL #>     task: TaskClassif, TaskSupervised, Task, R6 batch = td$.getbatch(1:3) batch #> $x #> $x$torch_ingress_num.input #> torch_tensor #>  1.4000  5.1000  3.5000 #>  1.4000  4.9000  3.0000 #>  1.3000  4.7000  3.2000 #> [ CPUFloatType{3,3} ] #>  #>  #> $.index #> torch_tensor #>  1 #>  2 #>  3 #> [ CPULongType{3} ]  small_module(batch$x[[1]]) #> torch_tensor #> -1.6916  1.1106  3.0460  3.0379 #> -1.4601  0.9800  2.7398  2.9830 #> -1.5414  1.0404  2.7707  2.8034 #> [ CPUFloatType{3,4} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"building-sequential-nns","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Building sequential NNs","title":"Internals","text":"sequential NN can easily implemented follows: Note second nn_linear need informed output dimension first nn_linear, since ModelDescriptor passed along Graph edges knows info ($pointer_shape slot).","code":"graph_generator = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\") %>>%     po(\"nn_sigmoid\") %>>%   po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%   po(\"nn_softmax\", dim = 2) md_sequential = graph_generator$train(task)[[1]]  graph_module = model_descriptor_to_module(md_sequential, list(md_sequential$pointer))  graph_module(input) #> torch_tensor #>  0.1791  0.4450  0.3759 #>  0.1817  0.4483  0.3700 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"building-more-interesting-nns","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Building more interesting NNs","title":"Internals","text":"One main features mlr3pipelines ability easily represent computational Graphs. ModelDescriptor / PipeOpTorch setup built make full use functionality. possible multiple inputs NN using multiple PipeOpTorchIngress inputs, possible parallel alternative path branching, possible multiple outputs. Consider following (bit nonsensical) network operates differently \"Petal\" \"Sepal\" features tsk(\"iris\") manually split task , shown wholly integrated mlr3pipelines pipeline can automatically. can use create neural network iris tasks created . set $keep_results debug flag can inspection happening: make multiple observations : can observe ModelDescriptor grows passed along edges graph_iris. Note $graph slot ModelDescriptor often updated -reference, time inspect intermediate results, may contain complete graph. However, see $ingress, $pointer $pointer_shape ModelDescriptors take sepal.-path differ ones take petal.-path: po(\"nn_merge_cat\") unites two ModelDescriptors contains common ingress. pointer_shape now reflects output “cat”-operation: 2nd dimension added : Multiple ModelDescriptors created, since graph_iris multiple outpus. makes possible create neural network multiple outputs. need unite outputs graph_iris using model_descriptor_union() can pass model_descriptor_to_module(). need collect output_pointers separately. parameter list_output must set TRUE since module multiple outputs. PipeOpBranch disappears resulting Graph PipeOpModule iris_module. PipeOpTorchs graph_iris add anything ModelDescriptors. branch interpeted graph_iris runs, nn_relu path followed. iris_module therefore contains Graph “relu” activation: ModelDescriptor’s $task slot contains Task features used create input data NN inputs. can given task_dataset(), along $ingress, create torch dataset creates batches. , output graph_iris can used: resulting module multiple inputs multiple outputs. call first two rows iris, set debug $keep_results flag can inspect happening nn_module’s $graph: first linear layer takes “Sepal” input (\"linear1\") creates 2x4 tensor (batch size 2, 4 units), \"linear3\" layer 2x5 output: observe po(\"nn_merge_cat\") concatenates , expected:","code":"iris_petal = tsk(\"iris\")$select(c(\"Petal.Length\", \"Petal.Width\")) iris_sepal = tsk(\"iris\")$select(c(\"Sepal.Length\", \"Sepal.Width\")) graph_sepal = po(\"torch_ingress_num\", id = \"sepal.in\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\")  graph_petal = po(\"torch_ingress_num\", id = \"petal.in\") %>>%   po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%   po(\"nn_tanh\") %>>%   po(\"nn_linear\", out_features = 5, id = \"linear3\")  graph_common = ppl(\"branch\", graphs = list(     sigmoid = po(\"nn_sigmoid\"),     relu = po(\"nn_relu\")   )) %>>%   gunion(list(     po(\"nn_linear\", out_features = 1, id = \"lin_out\"),     po(\"nn_linear\", out_features = 3, id = \"cat_out\") %>>%       po(\"nn_softmax\", dim = 2)   ))   graph_iris = gunion(list(graph_sepal, graph_petal)) %>>%   po(\"nn_merge_cat\") %>>%   graph_common  graph_iris$plot(html = TRUE) graph_iris$param_set$values$branch.selection = \"relu\"  graph_iris$keep_results = TRUE  iris_mds = graph_iris$train(   input = list(sepal.in.input = iris_sepal, petal.in.input = iris_petal),   single_input = FALSE )  iris_mds #> $lin_out.output #> <ModelDescriptor: 11 ops> #> * Ingress:  sepal.in.input: [(NA,2)], petal.in.input: [(NA,2)] #> * Task:  iris [classif] #> * Callbacks:  N/A #> * Optimizer:  N/A #> * Loss:  N/A #> * pointer:  lin_out.output [(NA,1)] #>  #> $nn_softmax.output #> <ModelDescriptor: 11 ops> #> * Ingress:  sepal.in.input: [(NA,2)], petal.in.input: [(NA,2)] #> * Task:  iris [classif] #> * Callbacks:  N/A #> * Optimizer:  N/A #> * Loss:  N/A #> * pointer:  nn_softmax.output [(NA,3)] # sepal.in path graph_iris$pipeops$linear1$.result[[1]]$ingress #> $sepal.in.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) graph_iris$pipeops$linear1$.result[[1]]$pointer #> [1] \"linear1\" \"output\" graph_iris$pipeops$linear1$.result[[1]]$pointer_shape #> [1] NA  4  # petal.in path graph_iris$pipeops$linear3$.result[[1]]$ingress #> $petal.in.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) graph_iris$pipeops$linear3$.result[[1]]$pointer #> [1] \"linear3\" \"output\" graph_iris$pipeops$linear3$.result[[1]]$pointer_shape #> [1] NA  5 graph_iris$pipeops$nn_merge_cat$.result[[1]]$ingress #> $sepal.in.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #> $petal.in.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) graph_iris$pipeops$nn_merge_cat$.result[[1]]$pointer_shape #> [1] NA  9 iris_mds_union = model_descriptor_union(iris_mds[[1]], iris_mds[[2]]) output_pointers = list(iris_mds[[1]]$pointer, iris_mds[[2]]$pointer) output_pointers #> [[1]] #> [1] \"lin_out\" \"output\"  #>  #> [[2]] #> [1] \"nn_softmax\" \"output\" iris_module = model_descriptor_to_module(iris_mds_union, output_pointers, list_output = TRUE) iris_module$graph$plot(html = TRUE) iris_mds_union$task  # contains all features #> <TaskClassif:iris> (150 x 5): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width  iris_td = task_dataset(   task = iris_mds_union$task,   feature_ingress_tokens = iris_mds_union$ingress )  batch = iris_td$.getbatch(1:2) batch #> $x #> $x$sepal.in.input #> torch_tensor #>  5.1000  3.5000 #>  4.9000  3.0000 #> [ CPUFloatType{2,2} ] #>  #> $x$petal.in.input #> torch_tensor #>  1.4000  0.2000 #>  1.4000  0.2000 #> [ CPUFloatType{2,2} ] #>  #>  #> $.index #> torch_tensor #>  1 #>  2 #> [ CPULongType{2} ] iris_module$graph$keep_results = TRUE  iris_module(   sepal.in.input = batch$x$sepal.in.input,   petal.in.input = batch$x$petal.in.input ) #> $lin_out.output #> torch_tensor #> -0.4005 #> -0.3776 #> [ CPUFloatType{2,1} ][ grad_fn = <AddmmBackward0> ] #>  #> $nn_softmax.output #> torch_tensor #>  0.0855  0.3679  0.5466 #>  0.0941  0.3845  0.5214 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ] iris_module$graph$pipeops$linear1$.result #> $output #> torch_tensor #>  2.7784  1.0401 -2.5610  1.4984 #>  2.5208  1.0563 -2.5473  1.5691 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] iris_module$graph$pipeops$linear3$.result #> $output #> torch_tensor #> -0.1651  0.7799  0.3149 -0.0282  0.6354 #> -0.1651  0.7799  0.3149 -0.0282  0.6354 #> [ CPUFloatType{2,5} ][ grad_fn = <AddmmBackward0> ] iris_module$graph$pipeops$nn_merge_cat$.result #> $output #> torch_tensor #>  2.7784  1.0401 -2.5610  1.4984 -0.1651  0.7799  0.3149 -0.0282  0.6354 #>  2.5208  1.0563 -2.5473  1.5691 -0.1651  0.7799  0.3149 -0.0282  0.6354 #> [ CPUFloatType{2,9} ][ grad_fn = <CatBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"building-torch-learners","dir":"Articles","previous_headings":"","what":"Building Torch Learners","title":"Internals","text":"now seen NN Graphs PipeOpModule created turned nn_modules. Using PipeOpTorch even creates ModelDescriptor objects contain additional info batch tensors extracted Tasks. complete Learner, still necessary define loss-function used optimization, optimizer, optionally callbacks. already covered class representations – TorchLoss, TorchOptimizer, TorchCallbacks, Get Started vignette. use adam optimizer, cross-entropy loss function, history callback.","code":"adam = t_opt(\"adam\", lr = 0.02) adam #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: lr=0.02 #> * Packages: torch,mlr3torch  xe = t_loss(\"cross_entropy\") xe #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_cross_entropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif  history = t_clbk(\"history\") history #> <TorchCallback:history> History #> * Generator: CallbackSetHistory #> * Parameters: list() #> * Packages: mlr3torch,torch"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"learnertorchmodel","dir":"Articles","previous_headings":"Building Torch Learners","what":"LearnerTorchModel","title":"Internals","text":"LearnerTorchModel represents supervised model (regression classification) using torch NNs. needs nn_module, well list TorchIngressToken define batches created Task. TorchIngressToken hard-code column-names Task used data-input, Learner created like therefore works specific Task created. (Generally full mlr3pipelines-UI used problem, see .) following uses sequential NN : training model, set hyperparameters. following calls $predict_newdata function plot response surface along Sepal.Width = mean(Sepal.Width) plane, along ground-truth values:","code":"lr_sequential = lrn(\"classif.torch_model\",   task_type = \"classif\",   network = model_descriptor_to_module(md_sequential, list(md_sequential$pointer)),   ingress_tokens = md_sequential$ingress,   optimizer = adam,   callbacks = history,   loss = xe )  lr_sequential #> <LearnerTorchModel[classif]:classif.model>: Torch Model #> * Model: - #> * Parameters: device=auto, num_threads=1, num_interop_threads=1, #>   seed=random, jit_trace=FALSE, eval_freq=1, measures_train=<list>, #>   measures_valid=<list>, patience=0, min_delta=0, shuffle=TRUE, #>   tensor_dataset=FALSE, opt.lr=0.02 #> * Validate: NULL #> * Packages: mlr3, mlr3torch, torch #> * Predict Types:  [response], prob #> * Feature Types: logical, integer, numeric, character, factor, ordered, #>   POSIXct, lazy_tensor #> * Properties: featureless, hotstart_backward, hotstart_forward, #>   importance, internal_tuning, marshal, missings, multiclass, #>   oob_error, selected_features, twoclass, validation, weights #> * Optimizer: adam #> * Loss: cross_entropy #> * Callbacks: history lr_sequential$param_set$set_values(   batch_size = 50,   epochs = 100,   measures_train = msrs(c(\"classif.logloss\", \"classif.ce\")) ) # This is required to evaluate the logloss during training lr_sequential$predict_type = \"prob\"  lr_sequential$train(md_sequential$task) library(data.table) library(ggplot2)  newdata = cbind(data.table(Sepal.Width = mean(iris$Sepal.Width)), CJ(   Sepal.Length = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 30),   Petal.Length = seq(min(iris$Petal.Length), max(iris$Petal.Length), length.out = 30) ))  predictions = lr_sequential$predict_newdata(newdata)  plot_predictions = function(predictions) {   ggplot(cbind(newdata, Species = predictions$response),       aes(x = Sepal.Length, y = Petal.Length, fill = Species)) +     geom_tile(alpha = .3) +     geom_tile(alpha = .3) +     geom_point(data = iris,       aes(x = Sepal.Length, y = Petal.Length, fill = Species),       color = \"black\", pch = 21, size = 3) +     theme_bw() } plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"torch-learner-pipelines","dir":"Articles","previous_headings":"","what":"Torch Learner Pipelines","title":"Internals","text":"model shown constructed using ModelDescriptor generated Graph PipeOpTorch operators. ModelDescriptor furthermore contains Task pertains. makes possible use create NN model gets trained right away, using PipeOpTorchModelClassif. missing prerequisite now add desired TorchOptimizer TorchLoss information ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"adding-optimizer-loss-and-callback-meta-info-to-modeldescriptor","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Adding Optimizer, Loss and Callback Meta-Info to ModelDescriptor","title":"Internals","text":"Remember ModelDescriptor $optimizer, $loss $callbacks slots necessary build complete Learner NN. can set corresponding PipeOpTorch operators. po(\"torch_optimizer\") used set $optimizer slot ModelDescriptor; takes desired TorchOptimizer object construction exports ParamSet. works analogously loss-function. also callbacks:","code":"po_adam = po(\"torch_optimizer\", optimizer = adam)  # hyperparameters are made available and can be changed: po_adam$param_set$values #> $lr #> [1] 0.02  md_sequential = po_adam$train(list(md_sequential))[[1]]  md_sequential$optimizer #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: lr=0.02 #> * Packages: torch,mlr3torch po_xe = po(\"torch_loss\", loss = xe) md_sequential = po_xe$train(list(md_sequential))[[1]]  md_sequential$loss #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_cross_entropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif po_history = po(\"torch_callbacks\", callbacks = t_clbk(\"history\")) md_sequential = po_history$train(list(md_sequential))[[1]]  md_sequential$callbacks #> $history #> <TorchCallback:history> History #> * Generator: CallbackSetHistory #> * Parameters: list() #> * Packages: mlr3torch,torch"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"combined-instantiation-and-training-of-learnertorchmodel","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Combined Instantiation and Training of LearnerTorchModel","title":"Internals","text":"ModelDescriptor can now given po(\"torch_model_classif\"). po(\"torch_model_classif\") behaves similarly PipeOpLearner: returns NULL training, prediction $predict(). po(\"torch_model_classif\") behaves similarly PipeOpLearner: returns NULL training, prediction $predict().","code":"po_model = po(\"torch_model_classif\", batch_size = 50, epochs = 50)  po_model$train(list(md_sequential)) #> $output #> NULL newtask = TaskClassif$new(\"newdata\", cbind(newdata, Species = factor(NA, levels = levels(iris$Species))), target = \"Species\")  predictions = po_model$predict(list(newtask))[[1]]  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"the-whole-pipeline","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"The whole Pipeline","title":"Internals","text":"Remember md_sequential created using Graph initial Task piped . combine Graph PipeOpTorchModelClassif, get Graph behaves like Graph ends PipeOpLearner, can therefore wrapped GraphLearner. following uses one hidden layer : Compare resulting Graph Graph trained model: Predictions, (can use predict_newdata ):","code":"graph_sequential_full = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\") %>>%     po(\"nn_sigmoid\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%     po(\"nn_softmax\", dim = 2, id = \"softmax\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear3\") %>>%     po(\"nn_softmax\", dim = 2, id = \"softmax2\") %>>%     po(\"torch_optimizer\", optimizer = adam) %>>%     po(\"torch_loss\", loss = xe) %>>%     po(\"torch_callbacks\", callbacks = history) %>>%     po(\"torch_model_classif\", batch_size = 50, epochs = 100) lr_sequential_full = as_learner(graph_sequential_full)  lr_sequential_full$train(task) graph_sequential_full$plot(html = TRUE) model = lr_sequential_full$graph_model$state$torch_model_classif$model model$network$graph$plot(html = TRUE) predictions = lr_sequential_full$predict_newdata(newdata)  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/internals_pipeop_torch.html","id":"mixed-pipelines","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Mixed Pipelines","title":"Internals","text":"just limited PipeOpTorch kinds Graphs, also limited single PipeOpTorchIngress. following pipeline, example, removes Petal.Length columns Task fits model:  using Petal.Length Sepal.Length separately first?  examples hopefully demonstrated possibilities come representation neural network layers PipeOps. Even though vignette quite technical, hope given -depth understanding underlying mechanisms.","code":"gr = po(\"select\", selector = selector_name(\"Petal.Length\")) %>>%   po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 5, id = \"linear1\") %>>%   po(\"nn_relu\") %>>%   po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%   po(\"nn_softmax\", dim = 2) %>>%   po(\"torch_optimizer\", optimizer = adam) %>>%   po(\"torch_loss\", loss = xe) %>>%   po(\"torch_model_classif\", batch_size = 50, epochs = 50)  gr$plot(html = TRUE) lr = as_learner(gr) lr$train(task) predictions = lr$predict_newdata(newdata)  plot_predictions(predictions) gr = gunion(list(       po(\"select\", selector = selector_name(\"Petal.Length\"), id = \"sel1\") %>>%         po(\"torch_ingress_num\", id = \"ingress.petal\") %>>%         po(\"nn_linear\", out_features = 3, id = \"linear1\"),       po(\"select\", selector = selector_name(\"Sepal.Length\"), id = \"sel2\") %>>%         po(\"torch_ingress_num\", id = \"ingress.sepal\") %>>%         po(\"nn_linear\", out_features = 3, id = \"linear2\")     )) %>>%     po(\"nn_merge_cat\")  %>>%     po(\"nn_relu\", id = \"act1\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear3\") %>>%     po(\"nn_softmax\", dim = 2, id = \"act3\") %>>%     po(\"torch_optimizer\", optimizer = adam, lr = 0.1) %>>%     po(\"torch_loss\", loss = xe) %>>%     po(\"torch_model_classif\", batch_size = 50, epochs = 50)  gr$plot(html = TRUE) lr = as_learner(gr) lr$train(task) predictions = lr$predict_newdata(newdata)  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/lazy_tensor.html","id":"creating-a-lazy-tensor","dir":"Articles","previous_headings":"","what":"Creating a Lazy Tensor","title":"Lazy Tensor","text":"Every lazy_tensor built top torch::dataset, assume familiar . information create torch::datasets, recommend reading torch package documentation. additional restriction impose dataset must .getitem .getbatch method returns list named tensors. example, create lazy_tensor length 1000, whose elements drawn uniform distribution \\([0, 1]\\). data stored -memory example, necessary $.getitem() method can e.g. load images disk. order create lazy_tensor mydata, annotate returned shapes dataset passing named list dataset_shapes. first dimension must NA, batch dimension. can also set shape NULL indicate unknown, .e. varies elements. Note case, implemented .getbatch method, even omitted specifying dataset_shapes auto-inferred. can convert vector torch_tensor just like : added preprocessing, calling $.getbatch() method mydata selecting element x. continue creating example task lt, relationship x y variable polynomial. Note target variable, classification regression, lazy_tensor, must factor numeric respectively. , plot data:  next section, create custom PipeOp fit polynomial regression model.","code":"mydata = dataset(   initialize = function() {     self$x = runif(1000, -1, 1)   },   .getbatch = function(i) list(x = torch_tensor(self$x[i])$unsqueeze(2)),   .length = function() 1000 )() lt = as_lazy_tensor(mydata, dataset_shapes = list(x = c(NA, 1))) lt[1:5] #> <ltnsr[5]> #> [1] <tnsr[1]> <tnsr[1]> <tnsr[1]> <tnsr[1]> <tnsr[1]> materialize(lt[1:5], rbind = TRUE) #> torch_tensor #> -0.9852 #> -0.0672 #> -0.0044 #> -0.4205 #>  0.4658 #> [ CPUFloatType{5,1} ] torch_equal(   materialize(lt[1], rbind = TRUE),   mydata$.getbatch(1)$x ) #> [1] TRUE library(data.table) x = mydata$x y = 0.2 + 0.1 * x - 0.1 * x^2 - 0.3 * x^3 + 0.5 * x^4 + 0.5 * x^7 + 0.6 * x^11 + rnorm(length(mydata)) * 0.1 dt = data.table(y = y, x = lt) task_poly = as_task_regr(dt, target = \"y\", id = \"poly\") task_poly #> <TaskRegr:poly> (1000 x 2) #> * Target: y #> * Properties: - #> * Features (1): #>   - lt (1): x library(ggplot2) ggplot(data = data.frame(x = x, y = y)) +   geom_point(aes(x = x, y = y), alpha = 0.5)"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/lazy_tensor.html","id":"custom-preprocessing","dir":"Articles","previous_headings":"","what":"Custom Preprocessing","title":"Lazy Tensor","text":"order create custom preprocessing operator lazy tensor, create new PipeOp class. make convenient possible, mlr3torch offters pipeop_preproc_torch() function recommend using purpose. important arguments : id - Used default identifier PipeOp fn - preprocessing function. default, first argument assumed torch_tensor remaining arguments part PipeOp’s parameter set. shapes_out - function returns shapes output tensors given input shapes. can also set NULL unknown shape \"infer\" auto-inference, see ?pipeop_preproc_torch information. , create PipeOp, transforms vector x matrix \\((x^{d_1} ..., x^{d_n})\\), \\(d\\) degrees parameter PipeOp. can now create new instance PipeOp calling $new(), set parameter degrees degrees used simulating data . , set parameter stages, always available, \"\", means preprocessing applied training prediction. data augmentation can set \"train\". create polynomial regression learner, combine polynomial preprocessor lrn(\"regr.mlp\") hidden layer (.e. linear model) train learner task. , visualize predictions see model captured non-linear relationship reasonably:  next section, briefly cover implementation details lazy_tensor, necessary work data-type, feel free skip part.","code":"PipeOpPreprocTorchPoly = pipeop_preproc_torch(\"poly\",   fn = function(x, degrees) {     torch_cat(lapply(degrees, function(d) torch_pow(x, d)), dim = 2L)   },   shapes_out = \"infer\" ) po_poly = PipeOpPreprocTorchPoly$new()  po_poly$param_set$set_values(   degrees = c(0, 1, 2, 3, 4, 7, 11),   stages = \"both\" ) lrn_poly = as_learner(   po_poly %>>% lrn(\"regr.mlp\", batch_size = 256, epochs = 100,   neurons = integer(0)) )  lrn_poly$train(task_poly) pred = lrn_poly$predict(task_poly) dt = melt(data.table(   truth = pred$truth,   response = pred$response,   x = x),   id.vars = \"x\", measure.vars = c(\"truth\", \"response\") ) dt$variable = factor(dt$variable, levels = c(\"truth\", \"response\"))  ggplot(data = dt) +   geom_point(aes(x = x, y = value, color = variable))"},{"path":"https://mlr3torch.mlr-org.com/dev/articles/lazy_tensor.html","id":"digging-into-internals","dir":"Articles","previous_headings":"","what":"Digging Into Internals","title":"Lazy Tensor","text":"Internally, lazy_tensor vector uses DataDescriptor class represent (possibly) preprocessed data. similar ModelDescriptor class used build neural nerworks using PipeOpTorch objects. DataDescriptor stores torch::dataset, mlr3pipelines::Graph metadata. Per default, preprocessing graph contains single PipOpNop nothing. printed output data descriptor informs us : number PipeOps contained preprocessing graph output shapes dataset input map, .e. data passed preprocessing graph, important multiple inputs pointer, points specific channel output PipeOp. output channel tensor represented DataDescriptor. Note id input po(\"nop\") randomly generated, needed prevent id clashes one input preprocessing graph. shape, shape tensor position pointer lazy tensor can constructed integer vector DataDescriptor. integer vector specifies element DataDescriptor lazy_tensor contains. , first two elements lazy_tensor vector represent element DataDescriptor, third element represents different element. Note indices refer DataDescriptor. Internally, lazy tensor represented list lists, element containing id DataDescriptor Currently, can single DataDescriptor lazy_tensor vector. happens materialize(lt[1]) following: Preprocessing lazy_tensor vector adds new PipeOps preprocessing graph updates metainformation like pointer output shape. show , create simple example task, using lt vector feature. see $graph new pipeop id \"poly.x\" output pointer points poly.x. Also see shape tensor now c(NA, 7) c(NA, 1) , can verify calling materialize() :","code":"desc = DataDescriptor$new(   dataset = mydata,   dataset_shapes = list(x = c(NA, 1)) ) desc #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,1)] #> * input_map: (x) -> Graph #> * pointer: nop.f74754.x.output #> * shape: [(NA,1)] lt = lazy_tensor(desc, ids = c(1, 1, 2)) materialize(lt, rbind = TRUE) #> torch_tensor #> -0.9852 #> -0.9852 #> -0.0672 #> [ CPUFloatType{3,1} ] unclass(lt[[1]]) #> [[1]] #> [1] 1 #>  #> [[2]] #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,1)] #> * input_map: (x) -> Graph #> * pointer: nop.f74754.x.output #> * shape: [(NA,1)] # get index and data descriptor desc = lt[[1]][[2]] id = lt[[1]][[1]]  # retrieve the batch <id> from the datast dataset_output = desc$dataset$.getbatch(id)  # batch is reorganized according to the input map graph_input = dataset_output[desc$input_map] names(graph_input) = names(desc$graph$input$name)  # the reorganized batch is fed into the preprocessing graph graph_output = desc$graph$train(graph_input, single_input = FALSE)  # the output pointed to by the pointer is returned tensor = graph_output[[paste0(desc$pointer, collapse = \".\")]] tensor #> torch_tensor #> -0.9852 #> [ CPUFloatType{1,1} ] taskin = as_task_regr(data.table(x = lt, y = 1:3), target = \"y\")  taskout = po_poly$train(list(taskin))[[1L]]  lt_out = taskout$data(cols = \"x\")$x  descout = lt_out[[1]][[2]]  descout #> <DataDescriptor: 2 ops> #> * dataset_shapes: [x: (NA,1)] #> * input_map: (x) -> Graph #> * pointer: poly.x.output #> * shape: [(NA,7)]  descout$graph #> Graph with 2 PipeOps: #>            ID         State sccssors    prdcssors #>        <char>        <char>   <char>       <char> #>  nop.f74754.x        <list>   poly.x              #>        poly.x <<UNTRAINED>>          nop.f74754.x materialize(lt_out[1:2], rbind = TRUE) #> torch_tensor #>  1.0000 -0.9852  0.9706 -0.9563  0.9421 -0.9009 -0.8487 #>  1.0000 -0.9852  0.9706 -0.9563  0.9421 -0.9009 -0.8487 #> [ CPUFloatType{2,7} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Fischer. Maintainer, author. Bernd Bischl. Contributor. Lukas Burk. Contributor. Martin Binder. Author. Florian Pfisterer. Contributor. Carson Zhang. Contributor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fischer S, Binder M (2025). mlr3torch: Deep Learning 'mlr3'. R package version 0.2.0-9000, https://github.com/mlr-org/mlr3torch/, https://mlr3torch.mlr-org.com/.","code":"@Manual{,   title = {mlr3torch: Deep Learning with 'mlr3'},   author = {Sebastian Fischer and Martin Binder},   year = {2025},   note = {R package version 0.2.0-9000, https://github.com/mlr-org/mlr3torch/},   url = {https://mlr3torch.mlr-org.com/}, }"},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"mlr3torch-","dir":"","previous_headings":"","what":"Deep Learning with mlr3","title":"Deep Learning with mlr3","text":"Package website: release | dev Deep Learning torch mlr3.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deep Learning with mlr3","text":"Afterwards, also need run command : information installing torch can found .","code":"# Install from CRAN install.packages(\"mlr3torch\") # Install the development version from GitHub: pak::pak(\"mlr-org/mlr3torch\") torch::install_torch()"},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"what-is-mlr3torch","dir":"","previous_headings":"","what":"What is mlr3torch?","title":"Deep Learning with mlr3","text":"mlr3torch deep learning framework mlr3 ecosystem built top torch. allows easily build, train evaluate deep learning models lines codes, without needing worry low-level details. --shelf learners readily available, custom architectures can defined connecting PipeOpTorch operators mlr3pipelines::Graph. Using predefined learners simple multi layer perceptron (MLP) works just like mlr3 Learner. , train learner sonar example task: Next, construct architecture using PipeOpTorch objects. first pipeop – PipeOpTorchIngress – defines entrypoint network. subsequent pipeops define neural network layers. turn learner, configure loss, optimizer, callbacks well training arguments. work generic tensors, lazy_tensor type can used. wraps torch::dataset, allows preprocess data (lazily) using PipeOp objects. , flatten MNIST task, can train multi-layer perceptron . Note transform data -memory, applied data actually loaded. actually access tensors, can call materialize(). show slice resulting tensor readability: , define complex architecture one single input lazy_tensor. , first define single residual block: Next, create neural network takes input lazy_tensor (po(\"torch_ingress_ltnsr\")). first applies linear layer repeats layer using special PipeOpTorchBlock, followed network’s head. , configure loss, optimizer training parameters. Note po(\"nn_linear_0\") equivalent po(\"nn_linear\", id = \"nn_linear_0\") need avoid ID clashes linear layer po(\"nn_block\"). Next, prepend preprocessing step flattens images can directly apply learner unflattened MNIST task. order keep track performance training, use 20% data evaluate using classification accuracy. left train learner:","code":"library(mlr3torch) learner_mlp = lrn(\"classif.mlp\",   # defining network parameters   activation     = nn_relu,   neurons        = c(20, 20),   # training parameters   batch_size     = 16,   epochs         = 50,   device         = \"cpu\",   # Proportion of data to use for validation   validate = 0.3,   # Defining the optimizer, loss, and callbacks   optimizer      = t_opt(\"adam\", lr = 0.1),   loss           = t_loss(\"cross_entropy\"),   callbacks      = t_clbk(\"history\"), # this saves the history in the learner   # Measures to track   measures_valid = msrs(c(\"classif.logloss\", \"classif.ce\")),   measures_train = msrs(c(\"classif.acc\")),   # predict type (required by logloss)   predict_type = \"prob\" ) learner_mlp$train(tsk(\"sonar\")) architecture = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 20) %>>%   po(\"nn_relu\") %>>%   po(\"nn_head\") graph_mlp = architecture %>>%   po(\"torch_loss\", loss = t_loss(\"cross_entropy\")) %>>%   po(\"torch_optimizer\", optimizer = t_opt(\"adam\", lr = 0.1)) %>>%   po(\"torch_callbacks\", callbacks = t_clbk(\"history\")) %>>%   po(\"torch_model_classif\",     batch_size = 16, epochs = 50, device = \"cpu\")  graph_lrn = as_learner(graph_mlp) # load the predefined mnist task mnist = tsk(\"mnist\") mnist$head(3L) #>     label           image #>    <fctr>   <lazy_tensor> #> 1:      5 <tnsr[1x28x28]> #> 2:      0 <tnsr[1x28x28]> #> 3:      4 <tnsr[1x28x28]>  # Flatten the images flattener = po(\"trafo_reshape\", shape = c(-1, 28 * 28)) mnist_flat = flattener$train(list(mnist))[[1L]]  mnist_flat$head(3L) #>     label         image #>    <fctr> <lazy_tensor> #> 1:      5   <tnsr[784]> #> 2:      0   <tnsr[784]> #> 3:      4   <tnsr[784]> materialize(   mnist_flat$data(1:2, cols = \"image\")[[1L]],   rbind = TRUE )[1:2, 1:4] #> torch_tensor #>  0  0  0  0 #>  0  0  0  0 #> [ CPUFloatType{2,4} ] layer = list(   po(\"nop\"),   po(\"nn_linear\", out_features = 50L) %>>%     po(\"nn_dropout\") %>>% po(\"nn_relu\") ) %>>% po(\"nn_merge_sum\") deep_network = po(\"torch_ingress_ltnsr\") %>>%   po(\"nn_linear\", out_features = 50L) %>>%   po(\"nn_block\", layer, n_blocks = 5L) %>>%   po(\"nn_head\") %>>%   po(\"torch_loss\", loss = t_loss(\"cross_entropy\")) %>>%   po(\"torch_optimizer\", optimizer = t_opt(\"adam\")) %>>%   po(\"torch_model_classif\",     epochs = 100L, batch_size = 32   ) deep_learner = as_learner(   flattener %>>% deep_network ) deep_learner$id = \"deep_network\" set_validate(deep_learner, 0.2) deep_learner$param_set$set_values(   torch_model_classif.measures_valid = msr(\"classif.acc\") ) deep_learner$train(mnist)"},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"feature-overview","dir":"","previous_headings":"","what":"Feature Overview","title":"Deep Learning with mlr3","text":"--shelf architectures readily available mlr3::Learners. Currently, supervised regression classification supported. Custom learners can defined using Graph language mlr3pipelines. package supports tabular data, well generic tensors via lazy_tensor type. Multi-modal data can handled conveniently, lazy_tensor objects can stored alongside tabular data. possible customize training process via (predefined custom) callbacks. package fully integrated mlr3 ecosystem. Neural network architectures, well hyperparameters can easily tuned via mlr3tuning friends.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Deep Learning with mlr3","text":"Start reading one vignettes package website! course (mlr3)torch. can check presentation UseR 2024.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing:","title":"Deep Learning with mlr3","text":"run tests one needs set environment variable TEST_TORCH = 1, e.g. adding .Renviron.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Deep Learning with mlr3","text":"Without great R package torch none possible. names callback stages taken luz, another high-level deep learning framework R torch. Building neural networks using PipeOpTorch operators inspired keras.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/index.html","id":"bugs-questions-feedback","dir":"","previous_headings":"","what":"Bugs, Questions, Feedback","title":"Deep Learning with mlr3","text":"mlr3torch free open source software project encourages participation feedback. issues, questions, suggestions feedback, please hesitate open “issue” GitHub page! case problems / bugs, often helpful provide “minimum working example” showcases behaviour (don’t worry bug obvious). Please understand resources project limited: response may sometimes delayed days, feature suggestions may rejected deemed tangential vision behind project.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Descriptor — DataDescriptor","title":"Data Descriptor — DataDescriptor","text":"data descriptor rather internal data structure used lazy_tensor data type. essence annotated torch::dataset preprocessing graph (consisting mosty PipeOpModule operators). additional meta data (e.g. pointer, shapes) allows preprocess lazy_tensors mlr3pipelines::Graph just like (non-lazy) data types. preprocessing applied materialize() called lazy_tensor. create data descriptor, can also use as_data_descriptor() function.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Descriptor — DataDescriptor","text":"natural define S3 class, opted R6 class avoid usual trouble serializing S3 objects. row contained DataDescriptor S3 class, copy object serializing.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Data Descriptor — DataDescriptor","text":"dataset (torch::dataset) dataset. graph (Graph) preprocessing graph. dataset_shapes (named list() (integer() NULL)) shapes output. input_map (character()) input map dataset preprocessing graph. pointer (character(2)) output pointer. pointer_shape (integer() | NULL) shape output indicated pointer. dataset_hash (character(1)) Hash wrapped dataset. hash (character(1)) Hash data descriptor. graph_input (character()) input channels preprocessing graph (cached save time). pointer_shape_predict (integer() NULL) Internal use .","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Data Descriptor — DataDescriptor","text":"DataDescriptor$new() DataDescriptor$print() DataDescriptor$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Data Descriptor — DataDescriptor","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Descriptor — DataDescriptor","text":"","code":"DataDescriptor$new(   dataset,   dataset_shapes = NULL,   graph = NULL,   input_map = NULL,   pointer = NULL,   pointer_shape = NULL,   pointer_shape_predict = NULL,   clone_graph = TRUE )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Descriptor — DataDescriptor","text":"dataset (torch::dataset) torch dataset. return named list() torch_tensor objects. dataset_shapes (named list() (integer() NULL)) shapes output. Names elements list returned dataset. shape NULL (unknown, e.g. images different sizes) first dimension must NA indicate batch dimension. graph (Graph) preprocessing graph. left NULL, preprocessing applied data input_map, pointer, pointer_shape, pointer_shape_predict inferred case dataset returns one element. input_map (character()) Character vector must length input graph. Specifies data dataset fed preprocessing graph. pointer (character(2) | NULL) Points output channel within graph: Element 1 PipeOp's id element 2 PipeOp's output channel. pointer_shape (integer() | NULL) Shape output indicated pointer. pointer_shape_predict (integer() NULL) Internal use . Used Graph anticipate possible mismatches train predict shapes. clone_graph (logical(1)) Whether clone preprocessing graph.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Data Descriptor — DataDescriptor","text":"Prints object","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Descriptor — DataDescriptor","text":"","code":"DataDescriptor$print(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Descriptor — DataDescriptor","text":"... () Unused","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Data Descriptor — DataDescriptor","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Descriptor — DataDescriptor","text":"","code":"DataDescriptor$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Descriptor — DataDescriptor","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/DataDescriptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Descriptor — DataDescriptor","text":"","code":"# Create a dataset ds = dataset(   initialize = function() self$x = torch_randn(10, 3, 3),   .getitem = function(i) list(x = self$x[i, ]),   .length = function() nrow(self$x) )() dd = DataDescriptor$new(ds, list(x = c(NA, 3, 3))) dd #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,3,3)] #> * input_map: (x) -> Graph #> * pointer: nop.1cf78f.x.output #> * shape: [(NA,3,3)] # is the same as using the converter: as_data_descriptor(ds, list(x = c(NA, 3, 3))) #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,3,3)] #> * input_map: (x) -> Graph #> * pointer: nop.1cf78f.x.output #> * shape: [(NA,3,3)]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/ModelDescriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent a Model with Meta-Info — ModelDescriptor","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"Represents model; possibly complete model, possibly one process built . model takes input tensors shapes shapes_in pipes graph. Input shapes get mapped input channels graph. Output shapes named output channels graph; also possible represent -ops tensors, case names input output identical. ModelDescriptor objects typically represent partial models built , case pointer slot indicates specific point graph produces tensor shape pointer_shape, graph extended. allowed graph structure modified -reference different parts code. However, modifications may never add edges elements Graph destination. particular, element graph$input may removed reference, e.g. adding edge Graph input channel PipeOp previously without parent destination. cases better create specific ModelDescriptor training Graph consisting (mostly) operators PipeOpTorchIngress, PipeOpTorch, PipeOpTorchLoss, PipeOpTorchOptimizer, PipeOpTorchCallbacks. ModelDescriptor can converted nn_graph via model_descriptor_to_module.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/ModelDescriptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"","code":"ModelDescriptor(   graph,   ingress,   task,   optimizer = NULL,   loss = NULL,   callbacks = NULL,   pointer = NULL,   pointer_shape = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/ModelDescriptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"graph (Graph)Graph PipeOpModule PipeOpNOP operators. ingress (uniquely named list TorchIngressToken) List inputs go graph. Names must subset graph$input$name. task (Task) (Training)-Task model built. May necessary aspects loss use etc. optimizer (TorchOptimizer | NULL) Additional info: optimizer use. loss (TorchLoss | NULL) Additional info: loss use. callbacks (list CallbackSet NULL) Additional info: callbacks use. pointer (character(2) | NULL) Indicating element model . Points output channel within graph: Element 1 PipeOp's id element 2 PipeOp's output channel. pointer_shape (integer | NULL) Shape output indicated pointer.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/ModelDescriptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"(ModelDescriptor)","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/PipeOpPreprocTorchTrafoNop.html","id":null,"dir":"Reference","previous_headings":"","what":"No Transformation — mlr_pipeops_trafo_nop","title":"No Transformation — mlr_pipeops_trafo_nop","text":"nothing.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/PipeOpPreprocTorchTrafoNop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"No Transformation — mlr_pipeops_trafo_nop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/PipeOpPreprocTorchTrafoReshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshaping Transformation — mlr_pipeops_trafo_reshape","title":"Reshaping Transformation — mlr_pipeops_trafo_reshape","text":"Reshapes tensor according parameter shape, calling torch_reshape(). preprocessing function applied batch-wise.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/PipeOpPreprocTorchTrafoReshape.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reshaping Transformation — mlr_pipeops_trafo_reshape","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/PipeOpPreprocTorchTrafoReshape.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Reshaping Transformation — mlr_pipeops_trafo_reshape","text":"shape :: integer() desired output shape. first dimension batch dimension usually -1.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/Select.html","id":null,"dir":"Reference","previous_headings":"","what":"Selector Functions for Character Vectors — Select","title":"Selector Functions for Character Vectors — Select","text":"Select function subsets character vector. used callback CallbackSetUnfreeze select parameters freeze unfreeze training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/Select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selector Functions for Character Vectors — Select","text":"","code":"select_all()  select_none()  select_grep(pattern, ignore.case = FALSE, perl = FALSE, fixed = FALSE)  select_name(param_names, assert_present = TRUE)  select_invert(select)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/Select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selector Functions for Character Vectors — Select","text":"pattern See grep() ignore.case See grep() perl See grep() fixed See grep() param_names names parameters want select assert_present Whether check param_names subset full vector names select Select","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/Select.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Selector Functions for Character Vectors — Select","text":"select_all(): select_all selects elements select_none(): select_none selects elements select_grep(): select_grep selects elements names matching regular expression select_name(): select_name selects elements names matching given names select_invert(): select_invert selects elements selected given selector","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/Select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selector Functions for Character Vectors — Select","text":"","code":"select_all()(c(\"a\", \"b\")) #> [1] \"a\" \"b\" select_none()(c(\"a\", \"b\")) #> character(0) select_grep(\"b$\")(c(\"ab\", \"ac\")) #> [1] \"ab\" select_name(\"a\")(c(\"a\", \"b\")) #> [1] \"a\" select_invert(select_all())(c(\"a\", \"b\")) #> character(0)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Callback — TorchCallback","title":"Torch Callback — TorchCallback","text":"wraps CallbackSet annotates metadata, importantly ParamSet. callback created given parameter values calling $generate() method. class usually used configure callback torch learner, e.g. constructing learner ModelDescriptor. list available callbacks, see mlr3torch_callbacks. conveniently retrieve TorchCallback, use t_clbk().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Callback — TorchCallback","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Callback — TorchCallback","text":"mlr3torch::TorchDescriptor -> TorchCallback","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Callback — TorchCallback","text":"mlr3torch::TorchDescriptor$generate() mlr3torch::TorchDescriptor$help() mlr3torch::TorchDescriptor$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Callback — TorchCallback","text":"TorchCallback$new() TorchCallback$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Callback — TorchCallback","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Callback — TorchCallback","text":"","code":"TorchCallback$new(   callback_generator,   param_set = NULL,   id = NULL,   label = NULL,   packages = NULL,   man = NULL,   additional_args = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Callback — TorchCallback","text":"callback_generator (R6ClassGenerator) class generator callback wrapped. param_set (ParamSet NULL) parameter set. NULL (default) inferred callback_generator. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). additional_args () Additional arguments necessary. learning rate schedulers, torch::LRScheduler.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Callback — TorchCallback","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Callback — TorchCallback","text":"","code":"TorchCallback$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Callback — TorchCallback","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchCallback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Callback — TorchCallback","text":"","code":"# Create a new torch callback from an existing callback set torch_callback = TorchCallback$new(CallbackSetCheckpoint) # The parameters are inferred torch_callback$param_set #> <ParamSet(3)> #>           id    class lower upper nlevels        default  value #>       <char>   <char> <num> <num>   <num>         <list> <list> #> 1:      path ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:      freq ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 3: freq_type ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]  # Retrieve a torch callback from the dictionary torch_callback = t_clbk(\"checkpoint\",   path = tempfile(), freq = 1 ) torch_callback #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackSetCheckpoint #> * Parameters: path=/tmp/RtmpCZgcaa/file20ef2e4d4b3a, freq=1 #> * Packages: mlr3torch,torch torch_callback$label #> [1] \"Checkpoint\" torch_callback$id #> [1] \"checkpoint\"  # open the help page of the wrapped callback set # torch_callback$help()  # Create the callback set callback = torch_callback$generate() callback #> <CallbackSetCheckpoint> #> * Stages: on_batch_end, on_epoch_end, on_exit # is the same as CallbackSetCheckpoint$new(   path = tempfile(), freq = 1 ) #> <CallbackSetCheckpoint> #> * Stages: on_batch_end, on_epoch_end, on_exit  # Use in a learner learner = lrn(\"regr.mlp\", callbacks = t_clbk(\"checkpoint\")) # the parameters of the callback are added to the learner's parameter set learner$param_set #> <ParamSetCollection(39)> #>                          id    class lower upper nlevels        default #>                      <char>   <char> <num> <num>   <num>         <list> #>  1:                  epochs ParamInt 0e+00   Inf     Inf <NoDefault[0]> #>  2:                  device ParamFct    NA    NA      12 <NoDefault[0]> #>  3:             num_threads ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  4:     num_interop_threads ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  5:                    seed ParamInt  -Inf   Inf     Inf <NoDefault[0]> #>  6:               jit_trace ParamLgl    NA    NA       2 <NoDefault[0]> #>  7:               eval_freq ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  8:          measures_train ParamUty    NA    NA     Inf <NoDefault[0]> #>  9:          measures_valid ParamUty    NA    NA     Inf <NoDefault[0]> #> 10:                patience ParamInt 0e+00   Inf     Inf <NoDefault[0]> #> 11:               min_delta ParamDbl 0e+00   Inf     Inf <NoDefault[0]> #> 12:              batch_size ParamInt 1e+00   Inf     Inf <NoDefault[0]> #> 13:                 shuffle ParamLgl    NA    NA       2          FALSE #> 14:                 sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 15:           batch_sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 16:             num_workers ParamInt 0e+00   Inf     Inf              0 #> 17:              collate_fn ParamUty    NA    NA     Inf         [NULL] #> 18:              pin_memory ParamLgl    NA    NA       2          FALSE #> 19:               drop_last ParamLgl    NA    NA       2          FALSE #> 20:                 timeout ParamDbl  -Inf   Inf     Inf             -1 #> 21:          worker_init_fn ParamUty    NA    NA     Inf <NoDefault[0]> #> 22:          worker_globals ParamUty    NA    NA     Inf <NoDefault[0]> #> 23:         worker_packages ParamUty    NA    NA     Inf <NoDefault[0]> #> 24:          tensor_dataset ParamFct    NA    NA       1 <NoDefault[0]> #> 25:                 neurons ParamUty    NA    NA     Inf <NoDefault[0]> #> 26:                       p ParamDbl 0e+00 1e+00     Inf <NoDefault[0]> #> 27:                n_layers ParamInt 1e+00   Inf     Inf <NoDefault[0]> #> 28:              activation ParamUty    NA    NA     Inf <NoDefault[0]> #> 29:         activation_args ParamUty    NA    NA     Inf <NoDefault[0]> #> 30:                   shape ParamUty    NA    NA     Inf <NoDefault[0]> #> 31:                  opt.lr ParamDbl 0e+00   Inf     Inf          0.001 #> 32:               opt.betas ParamUty    NA    NA     Inf    0.900,0.999 #> 33:                 opt.eps ParamDbl 1e-16 1e-04     Inf          1e-08 #> 34:        opt.weight_decay ParamDbl 0e+00 1e+00     Inf              0 #> 35:             opt.amsgrad ParamLgl    NA    NA       2          FALSE #> 36:          loss.reduction ParamFct    NA    NA       2           mean #> 37:      cb.checkpoint.path ParamUty    NA    NA     Inf <NoDefault[0]> #> 38:      cb.checkpoint.freq ParamInt 1e+00   Inf     Inf <NoDefault[0]> #> 39: cb.checkpoint.freq_type ParamFct    NA    NA       2          epoch #>                          id    class lower upper nlevels        default #>            value #>           <list> #>  1:       [NULL] #>  2:         auto #>  3:            1 #>  4:            1 #>  5:       random #>  6:        FALSE #>  7:            1 #>  8:    <list[0]> #>  9:    <list[0]> #> 10:            0 #> 11:            0 #> 12:       [NULL] #> 13:         TRUE #> 14:       [NULL] #> 15:       [NULL] #> 16:       [NULL] #> 17:       [NULL] #> 18:       [NULL] #> 19:       [NULL] #> 20:       [NULL] #> 21:       [NULL] #> 22:       [NULL] #> 23:       [NULL] #> 24:        FALSE #> 25:              #> 26:          0.5 #> 27:       [NULL] #> 28: <nn_relu[1]> #> 29:    <list[0]> #> 30:       [NULL] #> 31:       [NULL] #> 32:       [NULL] #> 33:       [NULL] #> 34:       [NULL] #> 35:       [NULL] #> 36:       [NULL] #> 37:       [NULL] #> 38:       [NULL] #> 39:       [NULL] #>            value"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Descriptors — TorchDescriptor","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Abstract Base Class TorchLoss, TorchOptimizer, TorchCallback inherit. class wraps generator (R6Class Generator torch version generator) annotates metadata ParamSet, label, ID, packages, manual page. parameters construction arguments wrapped generator parameter $values passed generator calling public method $generate().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Defined constructor argument param_set. parameters tagged \"train\", done automatically initialize.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"label (character(1)) Label object. Can used tables, plot text output instead ID. param_set (ParamSet) Set hyperparameters. packages (character(1)) Set required packages. packages loaded, attached. id (character(1)) Identifier object. Used tables, plot text output. generator wrapped generator described. man (character(1)) String format [pkg]::[topic] pointing manual page object.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"phash (character(1)) Hash (unique identifier) partial object, excluding components varied systematically (e.g. parameter values).","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"TorchDescriptor$new() TorchDescriptor$print() TorchDescriptor$generate() TorchDescriptor$help() TorchDescriptor$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"","code":"TorchDescriptor$new(   generator,   id = NULL,   param_set = NULL,   packages = NULL,   label = NULL,   man = NULL,   additional_args = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"generator wrapped generator described. id (character(1)) id new object. param_set (ParamSet) parameter set. packages (character()) R packages object depends . label (character(1)) Label new instance. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). additional_args (list()) Additional arguments necessary. learning rate schedulers, torch::LRScheduler.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Prints object","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"","code":"TorchDescriptor$print(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"... ","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Calls generator given parameter values.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"","code":"TorchDescriptor$generate()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"Displays help file wrapped object.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"","code":"TorchDescriptor$help()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"","code":"TorchDescriptor$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchDescriptor.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Descriptors — TorchDescriptor","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchIngressToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Ingress Token — TorchIngressToken","title":"Torch Ingress Token — TorchIngressToken","text":"function creates S3 class class \"TorchIngressToken\", internal data structure. contains (meta-)information batch generated Task fed entry point neural network. stored ingress field ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchIngressToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Ingress Token — TorchIngressToken","text":"","code":"TorchIngressToken(features, batchgetter, shape)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchIngressToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Ingress Token — TorchIngressToken","text":"features (character) Features batchgetter operate. batchgetter (function) Function two arguments: data device. function given output Task$data(rows = batch_indices, cols = features) produce tensor shape shape_out. shape (integer) Shape batchgetter produce. Batch-dimension included NA.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchIngressToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Torch Ingress Token — TorchIngressToken","text":"TorchIngressToken object.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchIngressToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Ingress Token — TorchIngressToken","text":"","code":"# Define a task for which we want to define an ingress token task = tsk(\"iris\")  # We create an ingress token for two feature Sepal.Length and Petal.Length: # We have to specify the features, the batchgetter and the shape features = c(\"Sepal.Length\", \"Petal.Length\") # As a batchgetter we use batchgetter_num  batch_dt = task$data(rows = 1:10, cols =features) batch_dt #>     Sepal.Length Petal.Length #>            <num>        <num> #>  1:          5.1          1.4 #>  2:          4.9          1.4 #>  3:          4.7          1.3 #>  4:          4.6          1.5 #>  5:          5.0          1.4 #>  6:          5.4          1.7 #>  7:          4.6          1.4 #>  8:          5.0          1.5 #>  9:          4.4          1.4 #> 10:          4.9          1.5 batch_tensor = batchgetter_num(batch_dt, \"cpu\") batch_tensor #> torch_tensor #>  5.1000  1.4000 #>  4.9000  1.4000 #>  4.7000  1.3000 #>  4.6000  1.5000 #>  5.0000  1.4000 #>  5.4000  1.7000 #>  4.6000  1.4000 #>  5.0000  1.5000 #>  4.4000  1.4000 #>  4.9000  1.5000 #> [ CPUFloatType{10,2} ]  # The shape is unknown in the first dimension (batch dimension)  ingress_token = TorchIngressToken(   features = features,   batchgetter = batchgetter_num,   shape = c(NA, 2) ) ingress_token #> Ingress: Task[Sepal.Length,Petal.Length] --> Tensor(NA, 2)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Loss — TorchLoss","title":"Torch Loss — TorchLoss","text":"wraps torch::nn_loss annotates metadata, importantly ParamSet. loss function created given parameter values calling $generate() method. class usually used configure loss function torch learner, e.g. construcing learner ModelDescriptor. list available losses, see mlr3torch_losses. Items dictionary can retrieved using t_loss().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Loss — TorchLoss","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Loss — TorchLoss","text":"mlr3torch::TorchDescriptor -> TorchLoss","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Torch Loss — TorchLoss","text":"task_types (character()) task types loss supports.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Loss — TorchLoss","text":"mlr3torch::TorchDescriptor$generate() mlr3torch::TorchDescriptor$help()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Loss — TorchLoss","text":"TorchLoss$new() TorchLoss$print() TorchLoss$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Loss — TorchLoss","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$new(   torch_loss,   task_types = NULL,   param_set = NULL,   id = NULL,   label = NULL,   packages = NULL,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"torch_loss (nn_loss) loss module. task_types (character()) task types supported loss. param_set (ParamSet NULL) parameter set. NULL (default) inferred torch_loss. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Torch Loss — TorchLoss","text":"Prints object","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$print(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"... ","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Loss — TorchLoss","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchLoss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Loss — TorchLoss","text":"","code":"# Create a new torch loss torch_loss = TorchLoss$new(torch_loss = nn_mse_loss, task_types = \"regr\") torch_loss #> <TorchLoss:nn_mse_loss> nn_mse_loss #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # the parameters are inferred torch_loss$param_set #> <ParamSet(1)> #>           id    class lower upper nlevels        default  value #>       <char>   <char> <num> <num>   <num>         <list> <list> #> 1: reduction ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]  # Retrieve a loss from the dictionary: torch_loss = t_loss(\"mse\", reduction = \"mean\") # is the same as torch_loss #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: reduction=mean #> * Packages: torch,mlr3torch #> * Task Types: regr torch_loss$param_set #> <ParamSet(1)> #>           id    class lower upper nlevels default  value #>       <char>   <char> <num> <num>   <num>  <list> <list> #> 1: reduction ParamFct    NA    NA       2    mean   mean torch_loss$label #> [1] \"Mean Squared Error\" torch_loss$task_types #> [1] \"regr\" torch_loss$id #> [1] \"mse\"  # Create the loss function loss_fn = torch_loss$generate() loss_fn #> An `nn_module` containing 0 parameters. # Is the same as nn_mse_loss(reduction = \"mean\") #> An `nn_module` containing 0 parameters.  # open the help page of the wrapped loss function # torch_loss$help()  # Use in a learner learner = lrn(\"regr.mlp\", loss = t_loss(\"mse\")) # The parameters of the loss are added to the learner's parameter set learner$param_set #> <ParamSetCollection(36)> #>                      id    class lower upper nlevels        default #>                  <char>   <char> <num> <num>   <num>         <list> #>  1:              epochs ParamInt 0e+00   Inf     Inf <NoDefault[0]> #>  2:              device ParamFct    NA    NA      12 <NoDefault[0]> #>  3:         num_threads ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  4: num_interop_threads ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  5:                seed ParamInt  -Inf   Inf     Inf <NoDefault[0]> #>  6:           jit_trace ParamLgl    NA    NA       2 <NoDefault[0]> #>  7:           eval_freq ParamInt 1e+00   Inf     Inf <NoDefault[0]> #>  8:      measures_train ParamUty    NA    NA     Inf <NoDefault[0]> #>  9:      measures_valid ParamUty    NA    NA     Inf <NoDefault[0]> #> 10:            patience ParamInt 0e+00   Inf     Inf <NoDefault[0]> #> 11:           min_delta ParamDbl 0e+00   Inf     Inf <NoDefault[0]> #> 12:          batch_size ParamInt 1e+00   Inf     Inf <NoDefault[0]> #> 13:             shuffle ParamLgl    NA    NA       2          FALSE #> 14:             sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 15:       batch_sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 16:         num_workers ParamInt 0e+00   Inf     Inf              0 #> 17:          collate_fn ParamUty    NA    NA     Inf         [NULL] #> 18:          pin_memory ParamLgl    NA    NA       2          FALSE #> 19:           drop_last ParamLgl    NA    NA       2          FALSE #> 20:             timeout ParamDbl  -Inf   Inf     Inf             -1 #> 21:      worker_init_fn ParamUty    NA    NA     Inf <NoDefault[0]> #> 22:      worker_globals ParamUty    NA    NA     Inf <NoDefault[0]> #> 23:     worker_packages ParamUty    NA    NA     Inf <NoDefault[0]> #> 24:      tensor_dataset ParamFct    NA    NA       1 <NoDefault[0]> #> 25:             neurons ParamUty    NA    NA     Inf <NoDefault[0]> #> 26:                   p ParamDbl 0e+00 1e+00     Inf <NoDefault[0]> #> 27:            n_layers ParamInt 1e+00   Inf     Inf <NoDefault[0]> #> 28:          activation ParamUty    NA    NA     Inf <NoDefault[0]> #> 29:     activation_args ParamUty    NA    NA     Inf <NoDefault[0]> #> 30:               shape ParamUty    NA    NA     Inf <NoDefault[0]> #> 31:              opt.lr ParamDbl 0e+00   Inf     Inf          0.001 #> 32:           opt.betas ParamUty    NA    NA     Inf    0.900,0.999 #> 33:             opt.eps ParamDbl 1e-16 1e-04     Inf          1e-08 #> 34:    opt.weight_decay ParamDbl 0e+00 1e+00     Inf              0 #> 35:         opt.amsgrad ParamLgl    NA    NA       2          FALSE #> 36:      loss.reduction ParamFct    NA    NA       2           mean #>                      id    class lower upper nlevels        default #>            value #>           <list> #>  1:       [NULL] #>  2:         auto #>  3:            1 #>  4:            1 #>  5:       random #>  6:        FALSE #>  7:            1 #>  8:    <list[0]> #>  9:    <list[0]> #> 10:            0 #> 11:            0 #> 12:       [NULL] #> 13:         TRUE #> 14:       [NULL] #> 15:       [NULL] #> 16:       [NULL] #> 17:       [NULL] #> 18:       [NULL] #> 19:       [NULL] #> 20:       [NULL] #> 21:       [NULL] #> 22:       [NULL] #> 23:       [NULL] #> 24:        FALSE #> 25:              #> 26:          0.5 #> 27:       [NULL] #> 28: <nn_relu[1]> #> 29:    <list[0]> #> 30:       [NULL] #> 31:       [NULL] #> 32:       [NULL] #> 33:       [NULL] #> 34:       [NULL] #> 35:       [NULL] #> 36:       [NULL] #>            value"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Optimizer — TorchOptimizer","title":"Torch Optimizer — TorchOptimizer","text":"wraps torch::torch_optimizer_generatora annotates metadata, importantly ParamSet. optimizer created given parameter values calling $generate() method. class usually used configure optimizer torch learner, e.g. construcing learner ModelDescriptor. list available optimizers, see mlr3torch_optimizers. Items dictionary can retrieved using t_opt().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Optimizer — TorchOptimizer","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Optimizer — TorchOptimizer","text":"mlr3torch::TorchDescriptor -> TorchOptimizer","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Optimizer — TorchOptimizer","text":"mlr3torch::TorchDescriptor$help() mlr3torch::TorchDescriptor$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Optimizer — TorchOptimizer","text":"TorchOptimizer$new() TorchOptimizer$generate() TorchOptimizer$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Optimizer — TorchOptimizer","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$new(   torch_optimizer,   param_set = NULL,   id = NULL,   label = NULL,   packages = NULL,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"torch_optimizer (torch_optimizer_generator) torch optimizer. param_set (ParamSet NULL) parameter set. NULL (default) inferred torch_optimizer. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Torch Optimizer — TorchOptimizer","text":"Instantiates optimizer.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$generate(params)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"params (named list() torch_tensors) parameters network.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Torch Optimizer — TorchOptimizer","text":"torch_optimizer","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Optimizer — TorchOptimizer","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/TorchOptimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Optimizer — TorchOptimizer","text":"","code":"# Create a new torch loss torch_opt = TorchOptimizer$new(optim_ignite_adam, label = \"adam\") torch_opt #> <TorchOptimizer:optim_ignite_adam> adam #> * Generator: optim_ignite_adam #> * Parameters: list() #> * Packages: torch,mlr3torch # If the param set is not specified, parameters are inferred but are of class ParamUty torch_opt$param_set #> <ParamSet(5)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1:           lr ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:        betas ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 3:          eps ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 4: weight_decay ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 5:      amsgrad ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]  # open the help page of the wrapped optimizer # torch_opt$help()  # Retrieve an optimizer from the dictionary torch_opt = t_opt(\"sgd\", lr = 0.1) torch_opt #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_ignite_sgd #> * Parameters: lr=0.1 #> * Packages: torch,mlr3torch torch_opt$param_set #> <ParamSet(5)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1:           lr ParamDbl     0   Inf     Inf <NoDefault[0]>    0.1 #> 2:     momentum ParamDbl     0     1     Inf              0 [NULL] #> 3:    dampening ParamDbl     0     1     Inf              0 [NULL] #> 4: weight_decay ParamDbl     0     1     Inf              0 [NULL] #> 5:     nesterov ParamLgl    NA    NA       2          FALSE [NULL] torch_opt$label #> [1] \"Stochastic Gradient Descent\" torch_opt$id #> [1] \"sgd\"  # Create the optimizer for a network net = nn_linear(10, 1) opt = torch_opt$generate(net$parameters)  # is the same as optim_sgd(net$parameters, lr = 0.1) #> <optim_sgd> #>   Inherits from: <torch_optimizer> #>   Public: #>     add_param_group: function (param_group)  #>     clone: function (deep = FALSE)  #>     defaults: list #>     initialize: function (params, lr = optim_required(), momentum = 0, dampening = 0,  #>     load_state_dict: function (state_dict, ..., .refer_to_state_dict = FALSE)  #>     param_groups: list #>     state: State, R6 #>     state_dict: function ()  #>     step: function (closure = NULL)  #>     zero_grad: function (set_to_none = FALSE)  #>   Private: #>     deep_clone: function (name, value)  #>     step_helper: function (closure, loop_fun)   # Use in a learner learner = lrn(\"regr.mlp\", optimizer = t_opt(\"sgd\")) # The parameters of the optimizer are added to the learner's parameter set learner$param_set #> <ParamSetCollection(36)> #>                      id    class lower upper nlevels        default #>                  <char>   <char> <num> <num>   <num>         <list> #>  1:              epochs ParamInt     0   Inf     Inf <NoDefault[0]> #>  2:              device ParamFct    NA    NA      12 <NoDefault[0]> #>  3:         num_threads ParamInt     1   Inf     Inf <NoDefault[0]> #>  4: num_interop_threads ParamInt     1   Inf     Inf <NoDefault[0]> #>  5:                seed ParamInt  -Inf   Inf     Inf <NoDefault[0]> #>  6:           jit_trace ParamLgl    NA    NA       2 <NoDefault[0]> #>  7:           eval_freq ParamInt     1   Inf     Inf <NoDefault[0]> #>  8:      measures_train ParamUty    NA    NA     Inf <NoDefault[0]> #>  9:      measures_valid ParamUty    NA    NA     Inf <NoDefault[0]> #> 10:            patience ParamInt     0   Inf     Inf <NoDefault[0]> #> 11:           min_delta ParamDbl     0   Inf     Inf <NoDefault[0]> #> 12:          batch_size ParamInt     1   Inf     Inf <NoDefault[0]> #> 13:             shuffle ParamLgl    NA    NA       2          FALSE #> 14:             sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 15:       batch_sampler ParamUty    NA    NA     Inf <NoDefault[0]> #> 16:         num_workers ParamInt     0   Inf     Inf              0 #> 17:          collate_fn ParamUty    NA    NA     Inf         [NULL] #> 18:          pin_memory ParamLgl    NA    NA       2          FALSE #> 19:           drop_last ParamLgl    NA    NA       2          FALSE #> 20:             timeout ParamDbl  -Inf   Inf     Inf             -1 #> 21:      worker_init_fn ParamUty    NA    NA     Inf <NoDefault[0]> #> 22:      worker_globals ParamUty    NA    NA     Inf <NoDefault[0]> #> 23:     worker_packages ParamUty    NA    NA     Inf <NoDefault[0]> #> 24:      tensor_dataset ParamFct    NA    NA       1 <NoDefault[0]> #> 25:             neurons ParamUty    NA    NA     Inf <NoDefault[0]> #> 26:                   p ParamDbl     0     1     Inf <NoDefault[0]> #> 27:            n_layers ParamInt     1   Inf     Inf <NoDefault[0]> #> 28:          activation ParamUty    NA    NA     Inf <NoDefault[0]> #> 29:     activation_args ParamUty    NA    NA     Inf <NoDefault[0]> #> 30:               shape ParamUty    NA    NA     Inf <NoDefault[0]> #> 31:              opt.lr ParamDbl     0   Inf     Inf <NoDefault[0]> #> 32:        opt.momentum ParamDbl     0     1     Inf              0 #> 33:       opt.dampening ParamDbl     0     1     Inf              0 #> 34:    opt.weight_decay ParamDbl     0     1     Inf              0 #> 35:        opt.nesterov ParamLgl    NA    NA       2          FALSE #> 36:      loss.reduction ParamFct    NA    NA       2           mean #>                      id    class lower upper nlevels        default #>            value #>           <list> #>  1:       [NULL] #>  2:         auto #>  3:            1 #>  4:            1 #>  5:       random #>  6:        FALSE #>  7:            1 #>  8:    <list[0]> #>  9:    <list[0]> #> 10:            0 #> 11:            0 #> 12:       [NULL] #> 13:         TRUE #> 14:       [NULL] #> 15:       [NULL] #> 16:       [NULL] #> 17:       [NULL] #> 18:       [NULL] #> 19:       [NULL] #> 20:       [NULL] #> 21:       [NULL] #> 22:       [NULL] #> 23:       [NULL] #> 24:        FALSE #> 25:              #> 26:          0.5 #> 27:       [NULL] #> 28: <nn_relu[1]> #> 29:    <list[0]> #> 30:       [NULL] #> 31:       [NULL] #> 32:       [NULL] #> 33:       [NULL] #> 34:       [NULL] #> 35:       [NULL] #> 36:       [NULL] #>            value"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_data_descriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Data Descriptor — as_data_descriptor","title":"Convert to Data Descriptor — as_data_descriptor","text":"Converts input DataDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_data_descriptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Data Descriptor — as_data_descriptor","text":"","code":"as_data_descriptor(x, dataset_shapes, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_data_descriptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Data Descriptor — as_data_descriptor","text":"x () Object convert. dataset_shapes (named list() (integer() NULL)) shapes output. Names elements list returned dataset. shape NULL (unknown, e.g. images different sizes) first dimension must NA indicate batch dimension. ... () arguments passed DataDescriptor constructor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_data_descriptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Data Descriptor — as_data_descriptor","text":"","code":"ds = dataset(\"example\",   initialize = function() self$iris = iris[, -5],   .getitem = function(i) list(x = torch_tensor(as.numeric(self$iris[i, ]))),   .length = function() nrow(self$iris) )() as_data_descriptor(ds, list(x = c(NA, 4L))) #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,4)] #> * input_map: (x) -> Graph #> * pointer: nop.7f82c6.x.output #> * shape: [(NA,4)]  # if the dataset has a .getbatch method, the shapes are inferred ds2 = dataset(\"example\",   initialize = function() self$iris = iris[, -5],   .getbatch = function(i) list(x = torch_tensor(as.matrix(self$iris[i, ]))),   .length = function() nrow(self$iris) )() as_data_descriptor(ds2) #> <DataDescriptor: 1 ops> #> * dataset_shapes: [x: (NA,4)] #> * input_map: (x) -> Graph #> * pointer: nop.170f25.x.output #> * shape: [(NA,4)]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lazy_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Lazy Tensor — as_lazy_tensor","title":"Convert to Lazy Tensor — as_lazy_tensor","text":"Convert object lazy_tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lazy_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Lazy Tensor — as_lazy_tensor","text":"","code":"as_lazy_tensor(x, ...)  # S3 method for class 'dataset' as_lazy_tensor(x, dataset_shapes = NULL, ids = NULL, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lazy_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Lazy Tensor — as_lazy_tensor","text":"x () Object convert lazy_tensor ... () Additional arguments passed method. dataset_shapes (named list() (integer() NULL)) shapes output. Names elements list returned dataset. shape NULL (unknown, e.g. images different sizes) first dimension must NA indicate batch dimension. ids (integer()) ids include lazy tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lazy_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Lazy Tensor — as_lazy_tensor","text":"","code":"iris_ds = dataset(\"iris\",   initialize = function() {     self$iris = iris[, -5]   },   .getbatch = function(i) {     list(x = torch_tensor(as.matrix(self$iris[i, ])))   },   .length = function() nrow(self$iris) )() # no need to specify the dataset shapes as they can be inferred from the .getbatch method # only first 5 observations as_lazy_tensor(iris_ds, ids = 1:5) #> <ltnsr[5]> #> [1] <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]> # all observations head(as_lazy_tensor(iris_ds)) #> <ltnsr[6]> #> [1] <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]>  iris_ds2 = dataset(\"iris\",   initialize = function() self$iris = iris[, -5],   .getitem = function(i) list(x = torch_tensor(as.numeric(self$iris[i, ]))),   .length = function() nrow(self$iris) )() # if .getitem is implemented we cannot infer the shapes as they might vary, # so we have to annotate them explicitly as_lazy_tensor(iris_ds2, dataset_shapes = list(x = c(NA, 4L)))[1:5] #> <ltnsr[5]> #> [1] <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]> <tnsr[4]>  # Convert a matrix lt = as_lazy_tensor(matrix(rnorm(100), nrow = 20)) materialize(lt[1:5], rbind = TRUE) #> torch_tensor #> -1.4000  0.4682  0.0700  1.0743  1.9243 #>  0.2553  0.3630 -0.6391 -0.6651  1.2984 #> -2.4373 -1.3045 -0.0500  1.1140  0.7488 #> -0.0056  0.7378 -0.2515 -0.2459  0.5562 #>  0.6216  1.8885  0.4448 -1.1776 -0.5483 #> [ CPUFloatType{5,5} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lr_scheduler.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to CallbackSetLRScheduler — as_lr_scheduler","title":"Convert to CallbackSetLRScheduler — as_lr_scheduler","text":"Convert torch scheduler generator CallbackSetLRScheduler.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lr_scheduler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to CallbackSetLRScheduler — as_lr_scheduler","text":"","code":"as_lr_scheduler(x, step_on_epoch)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_lr_scheduler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to CallbackSetLRScheduler — as_lr_scheduler","text":"x (function) torch scheduler generator defined using torch::lr_scheduler(). step_on_epoch (logical(1)) Whether scheduler steps every epoch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a TorchCallback — as_torch_callback","title":"Convert to a TorchCallback — as_torch_callback","text":"Converts object TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a TorchCallback — as_torch_callback","text":"","code":"as_torch_callback(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a TorchCallback — as_torch_callback","text":"x () Object converted. clone (logical(1)) Whether make deep clone. ... () Additional arguments","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a TorchCallback — as_torch_callback","text":"TorchCallback.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a list of Torch Callbacks — as_torch_callbacks","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"Converts object list TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callbacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"","code":"as_torch_callbacks(x, clone, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callbacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"x () Object convert. clone (logical(1)) Whether create deep clone. ... () Additional arguments.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_callbacks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"list() TorchCallbacks","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to TorchLoss — as_torch_loss","title":"Convert to TorchLoss — as_torch_loss","text":"Converts object TorchLoss.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to TorchLoss — as_torch_loss","text":"","code":"as_torch_loss(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to TorchLoss — as_torch_loss","text":"x () Object convert TorchLoss. clone (logical(1)) Whether make deep clone. ... () Additional arguments. Currently used pass additional constructor arguments TorchLoss objects type nn_loss.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to TorchLoss — as_torch_loss","text":"TorchLoss.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to TorchOptimizer — as_torch_optimizer","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"Converts object TorchOptimizer.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"","code":"as_torch_optimizer(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"x () Object convert TorchOptimizer. clone (logical(1)) Whether make deep clone. Default FALSE. ... () Additional arguments. Currently used pass additional constructor arguments TorchOptimizer objects type torch_optimizer_generator.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/as_torch_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"TorchOptimizer","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/assert_lazy_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Lazy Tensor — assert_lazy_tensor","title":"Assert Lazy Tensor — assert_lazy_tensor","text":"Asserts whether something lazy tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/assert_lazy_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Lazy Tensor — assert_lazy_tensor","text":"","code":"assert_lazy_tensor(x)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/assert_lazy_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Lazy Tensor — assert_lazy_tensor","text":"x () Object check.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/auto_device.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Device — auto_device","title":"Auto Device — auto_device","text":"First tries cuda, cpu.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/auto_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Device — auto_device","text":"","code":"auto_device(device = NULL)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/auto_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Device — auto_device","text":"device (character(1)) device. NULL, returned .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_categ.html","id":null,"dir":"Reference","previous_headings":"","what":"Batchgetter for Categorical data — batchgetter_categ","title":"Batchgetter for Categorical data — batchgetter_categ","text":"Converts data frame categorical data long tensor converting data integers. input checks performed.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_categ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batchgetter for Categorical data — batchgetter_categ","text":"","code":"batchgetter_categ(data, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_categ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batchgetter for Categorical data — batchgetter_categ","text":"data (data.table)data.table converted tensor. ... () Unused.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Batchgetter for Numeric Data — batchgetter_num","title":"Batchgetter for Numeric Data — batchgetter_num","text":"Converts data frame numeric data float tensor calling .matrix(). input checks performed","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batchgetter for Numeric Data — batchgetter_num","text":"","code":"batchgetter_num(data, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/batchgetter_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batchgetter for Numeric Data — batchgetter_num","text":"data (data.table())data.table converted tensor. ... () Unused.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/callback_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Set of Callbacks for Torch — callback_set","title":"Create a Set of Callbacks for Torch — callback_set","text":"Creates R6ClassGenerator inheriting CallbackSet. Additionally performs checks stages accidentally misspelled. create TorchCallback use torch_callback(). order resulting class cloneable, private method $deep_clone() must provided.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/callback_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Set of Callbacks for Torch — callback_set","text":"","code":"callback_set(   classname,   on_begin = NULL,   on_end = NULL,   on_exit = NULL,   on_epoch_begin = NULL,   on_before_valid = NULL,   on_epoch_end = NULL,   on_batch_begin = NULL,   on_batch_end = NULL,   on_after_backward = NULL,   on_batch_valid_begin = NULL,   on_batch_valid_end = NULL,   on_valid_end = NULL,   state_dict = NULL,   load_state_dict = NULL,   initialize = NULL,   public = NULL,   private = NULL,   active = NULL,   parent_env = parent.frame(),   inherit = CallbackSet,   lock_objects = FALSE )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/callback_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Set of Callbacks for Torch — callback_set","text":"classname (character(1)) class name. on_begin, on_end, on_epoch_begin, on_before_valid, on_epoch_end, on_batch_begin, on_batch_end, on_after_backward, on_batch_valid_begin, on_batch_valid_end, on_valid_end, on_exit (function) Function execute given stage, see section Stages. state_dict (function()) function retrieves state dict callback. available learner training. load_state_dict (function(state_dict)) Function loads callback state. initialize (function()) initialization method callback. public, private, active (list()) Additional public, private, active fields add callback. parent_env (environment()) parent environment R6Class. inherit (R6ClassGenerator) class inherit. class must either CallbackSet (default) inherit . lock_objects (logical(1)) Whether lock objects resulting R6Class. FALSE (default), values can freely assigned self without declaring class definition.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/callback_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Set of Callbacks for Torch — callback_set","text":"CallbackSet","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/equals-.lazy_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare lazy tensors — ==.lazy_tensor","title":"Compare lazy tensors — ==.lazy_tensor","text":"Compares lazy tensors using indices data descriptor's hash. means two lazy_tensors: equal: mateterialize tensors. unequal: might materialize tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/equals-.lazy_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare lazy tensors — ==.lazy_tensor","text":"","code":"# S3 method for class 'lazy_tensor' x == y"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/equals-.lazy_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare lazy tensors — ==.lazy_tensor","text":"x, y (lazy_tensor) Values compare.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/is_lazy_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for lazy tensor — is_lazy_tensor","title":"Check for lazy tensor — is_lazy_tensor","text":"Checks whether object lazy tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/is_lazy_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for lazy tensor — is_lazy_tensor","text":"","code":"is_lazy_tensor(x)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/is_lazy_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for lazy tensor — is_lazy_tensor","text":"x () Object check.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/lazy_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lazy tensor — lazy_tensor","title":"Create a lazy tensor — lazy_tensor","text":"Create lazy tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/lazy_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lazy tensor — lazy_tensor","text":"","code":"lazy_tensor(data_descriptor = NULL, ids = NULL)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/lazy_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lazy tensor — lazy_tensor","text":"data_descriptor (DataDescriptor NULL) data descriptor NULL lazy tensor length 0. ids (integer()) elements data_descriptor included lazy tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/lazy_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a lazy tensor — lazy_tensor","text":"","code":"ds = dataset(\"example\",   initialize = function() self$iris = iris[, -5],   .getitem = function(i) list(x = torch_tensor(as.numeric(self$iris[i, ]))),   .length = function() nrow(self$iris) )() dd = as_data_descriptor(ds, list(x = c(NA, 4L))) lt = as_lazy_tensor(dd)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Materialize Lazy Tensor Columns — materialize","title":"Materialize Lazy Tensor Columns — materialize","text":"materialize lazy_tensor() data.frame() / list() containing – among things – lazy_tensor() columns. .e. data described underlying DataDescriptors loaded indices lazy_tensor(), preprocessed put unto specified device. elements lazy tensor must shape, list tensors returned default. elements shape, tensors can also rbinded single tensor (parameter rbind).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Materialize Lazy Tensor Columns — materialize","text":"","code":"materialize(x, device = \"cpu\", rbind = FALSE, ...)  # S3 method for class 'list' materialize(x, device = \"cpu\", rbind = FALSE, cache = \"auto\", ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Materialize Lazy Tensor Columns — materialize","text":"x () object materialize. Either lazy_tensor list() / data.frame() containing lazy_tensor columns. device (character(1)) torch device. rbind (logical(1)) Whether rbind lazy tensor columns (TRUE) return list tensors (FALSE). second case, batch dimension. ... () Additional arguments. cache (character(1) environment() NULL) Optional cache (intermediate) materialization results. Per default, caching enabled dataset data descriptor (different output pointer) used one lazy tensor column.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Materialize Lazy Tensor Columns — materialize","text":"(list() lazy_tensors lazy_tensor)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Materialize Lazy Tensor Columns — materialize","text":"Materializing lazy tensor consists : Loading data internal dataset DataDescriptor. Processing batches preprocessing Graphs. Returning result PipeOp pointed DataDescriptor (pointer). multiple lazy_tensor columns can benefit caching : ) Output(s) dataset might input multiple graphs. b) Different lazy tensors might outputs graph. reason possible provide cache environment. hash key ) hash indices dataset. hash key b) hash indices, dataset preprocessing graph.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Materialize Lazy Tensor Columns — materialize","text":"","code":"lt1 = as_lazy_tensor(torch_randn(10, 3)) materialize(lt1, rbind = TRUE) #> torch_tensor #>  1.0671e+00  7.5651e-01  1.9241e+00 #> -1.2200e+00 -1.2343e-01  8.3400e-01 #>  1.1294e-01 -1.2217e+00  4.8949e-01 #> -2.9355e-01  2.5931e+00 -3.8925e-01 #> -9.3131e-01  8.9302e-01 -7.6513e-01 #>  5.2385e-01 -1.4898e+00 -2.3702e-01 #>  2.2191e-01 -1.9253e-01  7.3084e-05 #> -1.0812e-02 -9.9583e-01 -7.5198e-01 #>  1.8363e+00 -1.1356e+00  7.3768e-01 #> -2.1744e-01 -1.5434e-01  1.0868e+00 #> [ CPUFloatType{10,3} ] materialize(lt1, rbind = FALSE) #> [[1]] #> torch_tensor #>  1.0671 #>  0.7565 #>  1.9241 #> [ CPUFloatType{3} ] #>  #> [[2]] #> torch_tensor #> -1.2200 #> -0.1234 #>  0.8340 #> [ CPUFloatType{3} ] #>  #> [[3]] #> torch_tensor #>  0.1129 #> -1.2217 #>  0.4895 #> [ CPUFloatType{3} ] #>  #> [[4]] #> torch_tensor #> -0.2936 #>  2.5931 #> -0.3893 #> [ CPUFloatType{3} ] #>  #> [[5]] #> torch_tensor #> -0.9313 #>  0.8930 #> -0.7651 #> [ CPUFloatType{3} ] #>  #> [[6]] #> torch_tensor #>  0.5239 #> -1.4898 #> -0.2370 #> [ CPUFloatType{3} ] #>  #> [[7]] #> torch_tensor #>  0.2219 #> -0.1925 #>  0.0001 #> [ CPUFloatType{3} ] #>  #> [[8]] #> torch_tensor #> 0.01 * #> -1.0812 #> -99.5832 #> -75.1981 #> [ CPUFloatType{3} ] #>  #> [[9]] #> torch_tensor #>  1.8363 #> -1.1356 #>  0.7377 #> [ CPUFloatType{3} ] #>  #> [[10]] #> torch_tensor #> -0.2174 #> -0.1543 #>  1.0868 #> [ CPUFloatType{3} ] #>  lt2 = as_lazy_tensor(torch_randn(10, 4)) d = data.table::data.table(lt1 = lt1, lt2 = lt2) materialize(d, rbind = TRUE) #> $lt1 #> torch_tensor #>  1.0671e+00  7.5651e-01  1.9241e+00 #> -1.2200e+00 -1.2343e-01  8.3400e-01 #>  1.1294e-01 -1.2217e+00  4.8949e-01 #> -2.9355e-01  2.5931e+00 -3.8925e-01 #> -9.3131e-01  8.9302e-01 -7.6513e-01 #>  5.2385e-01 -1.4898e+00 -2.3702e-01 #>  2.2191e-01 -1.9253e-01  7.3084e-05 #> -1.0812e-02 -9.9583e-01 -7.5198e-01 #>  1.8363e+00 -1.1356e+00  7.3768e-01 #> -2.1744e-01 -1.5434e-01  1.0868e+00 #> [ CPUFloatType{10,3} ] #>  #> $lt2 #> torch_tensor #>  1.6287  1.3658  0.5398 -0.1572 #>  0.2219 -0.1518 -0.5991  1.4036 #>  1.0065  0.4194 -0.1043 -1.1464 #> -1.1741 -0.1886  1.4039  1.3031 #>  1.0056 -0.7701 -1.5744  0.8223 #>  0.7315 -0.4518 -1.0262 -0.7027 #>  1.2091 -0.8113 -0.3490  0.7018 #> -0.7377  0.4125  0.1465 -0.3253 #> -2.2844 -0.1151 -1.8222  0.1563 #>  1.3287 -0.6418  0.0915 -0.6035 #> [ CPUFloatType{10,4} ] #>  materialize(d, rbind = FALSE) #> $lt1 #> $lt1[[1]] #> torch_tensor #>  1.0671 #>  0.7565 #>  1.9241 #> [ CPUFloatType{3} ] #>  #> $lt1[[2]] #> torch_tensor #> -1.2200 #> -0.1234 #>  0.8340 #> [ CPUFloatType{3} ] #>  #> $lt1[[3]] #> torch_tensor #>  0.1129 #> -1.2217 #>  0.4895 #> [ CPUFloatType{3} ] #>  #> $lt1[[4]] #> torch_tensor #> -0.2936 #>  2.5931 #> -0.3893 #> [ CPUFloatType{3} ] #>  #> $lt1[[5]] #> torch_tensor #> -0.9313 #>  0.8930 #> -0.7651 #> [ CPUFloatType{3} ] #>  #> $lt1[[6]] #> torch_tensor #>  0.5239 #> -1.4898 #> -0.2370 #> [ CPUFloatType{3} ] #>  #> $lt1[[7]] #> torch_tensor #>  0.2219 #> -0.1925 #>  0.0001 #> [ CPUFloatType{3} ] #>  #> $lt1[[8]] #> torch_tensor #> 0.01 * #> -1.0812 #> -99.5832 #> -75.1981 #> [ CPUFloatType{3} ] #>  #> $lt1[[9]] #> torch_tensor #>  1.8363 #> -1.1356 #>  0.7377 #> [ CPUFloatType{3} ] #>  #> $lt1[[10]] #> torch_tensor #> -0.2174 #> -0.1543 #>  1.0868 #> [ CPUFloatType{3} ] #>  #>  #> $lt2 #> $lt2[[1]] #> torch_tensor #>  1.6287 #>  1.3658 #>  0.5398 #> -0.1572 #> [ CPUFloatType{4} ] #>  #> $lt2[[2]] #> torch_tensor #>  0.2219 #> -0.1518 #> -0.5991 #>  1.4036 #> [ CPUFloatType{4} ] #>  #> $lt2[[3]] #> torch_tensor #>  1.0065 #>  0.4194 #> -0.1043 #> -1.1464 #> [ CPUFloatType{4} ] #>  #> $lt2[[4]] #> torch_tensor #> -1.1741 #> -0.1886 #>  1.4039 #>  1.3031 #> [ CPUFloatType{4} ] #>  #> $lt2[[5]] #> torch_tensor #>  1.0056 #> -0.7701 #> -1.5744 #>  0.8223 #> [ CPUFloatType{4} ] #>  #> $lt2[[6]] #> torch_tensor #>  0.7315 #> -0.4518 #> -1.0262 #> -0.7027 #> [ CPUFloatType{4} ] #>  #> $lt2[[7]] #> torch_tensor #>  1.2091 #> -0.8113 #> -0.3490 #>  0.7018 #> [ CPUFloatType{4} ] #>  #> $lt2[[8]] #> torch_tensor #> -0.7377 #>  0.4125 #>  0.1465 #> -0.3253 #> [ CPUFloatType{4} ] #>  #> $lt2[[9]] #> torch_tensor #> -2.2844 #> -0.1151 #> -1.8222 #>  0.1563 #> [ CPUFloatType{4} ] #>  #> $lt2[[10]] #> torch_tensor #>  1.3287 #> -0.6418 #>  0.0915 #> -0.6035 #> [ CPUFloatType{4} ] #>  #>"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Materialize a Lazy Tensor — materialize_internal","title":"Materialize a Lazy Tensor — materialize_internal","text":"Convert lazy_tensor torch_tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Materialize a Lazy Tensor — materialize_internal","text":"","code":"materialize_internal(x, device = \"cpu\", cache = NULL, rbind)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Materialize a Lazy Tensor — materialize_internal","text":"x (lazy_tensor()) lazy tensor materialize. device (character(1L)) device put materialized tensor (running preprocessing graph). cache (NULL environment()) Whether cache (intermediate) results materialization. can make data loading faster multiple lazy_tensors reference dataset graph. rbind (logical(1)) Whtether rbind resulting tensors (TRUE) return list tensors (FALSE).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Materialize a Lazy Tensor — materialize_internal","text":"lazy_tensor()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/materialize_internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Materialize a Lazy Tensor — materialize_internal","text":"Materializing lazy tensor consists : Loading data internal dataset DataDescriptor. Processing batches preprocessing Graphs. Returning result PipeOp pointed DataDescriptor (pointer). materializing multiple lazy_tensor columns, caching can useful : ) Output(s) dataset might input multiple graphs. (task_dataset shoudl rarely case try merge ). b) Different lazy tensors might outputs graph. reason possible provide cache environment. hash key ) hash indices dataset. hash key b) hash indices dataset preprocessing graph.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3torch: Deep Learning with 'mlr3' — mlr3torch-package","title":"mlr3torch: Deep Learning with 'mlr3' — mlr3torch-package","text":"Deep Learning library extends mlr3 framework building upon 'torch' package. allows conveniently build, train, evaluate deep learning models without worry low level details. Custom architectures can created using graph language defined 'mlr3pipelines'.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch-package.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"mlr3torch: Deep Learning with 'mlr3' — mlr3torch-package","text":"mlr3torch.cache: Whether cache downloaded data (TRUE) (FALSE, default). can also set specific folder file system used cache directory.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3torch: Deep Learning with 'mlr3' — mlr3torch-package","text":"Maintainer: Sebastian Fischer sebf.fischer@gmail.com (ORCID) Authors: Martin Binder mlr.developer@mb706.com contributors: Bernd Bischl bernd_bischl@gmx.net (ORCID) [contributor] Lukas Burk github@quantenbrot.de (ORCID) [contributor] Florian Pfisterer pfistererf@googlemail.com (ORCID) [contributor] Carson Zhang carsonzhang4@gmail.com [contributor]","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Torch Callbacks — mlr3torch_callbacks","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"mlr3misc::Dictionary torch callbacks. Use t_clbk() conveniently retrieve callbacks. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_callbacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"","code":"mlr3torch_callbacks"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_callbacks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"object class DictionaryMlr3torchCallbacks (inherits Dictionary, R6) length 13.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_callbacks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"","code":"mlr3torch_callbacks$get(\"checkpoint\") #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackSetCheckpoint #> * Parameters: list() #> * Packages: mlr3torch,torch # is the same as t_clbk(\"checkpoint\") #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackSetCheckpoint #> * Parameters: list() #> * Packages: mlr3torch,torch # convert to a data.table as.data.table(mlr3torch_callbacks) #> Key: <key> #>                      key                                   label #>                   <char>                                  <char> #>  1:           checkpoint                              Checkpoint #>  2:              history                                 History #>  3:  lr_cosine_annealing           Cosine Annealing LR Scheduler #>  4:            lr_lambda Multiplication by Function LR Scheduler #>  5:    lr_multiplicative   Multiplication by Factor LR Scheduler #>  6:         lr_one_cycle                      1cyle LR Scheduler #>  7: lr_reduce_on_plateau          Reduce on Plateau LR Scheduler #>  8:              lr_step                 Step Decay LR Scheduler #>  9:             progress                                Progress #> 10:                   tb                             TensorBoard #> 11:             unfreeze                                Unfreeze #>                     packages #>                       <list> #>  1:          mlr3torch,torch #>  2:          mlr3torch,torch #>  3:          mlr3torch,torch #>  4:          mlr3torch,torch #>  5:          mlr3torch,torch #>  6:          mlr3torch,torch #>  7:          mlr3torch,torch #>  8:          mlr3torch,torch #>  9: progress,mlr3torch,torch #> 10: tfevents,mlr3torch,torch #> 11:          mlr3torch,torch"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Functions — mlr3torch_losses","title":"Loss Functions — mlr3torch_losses","text":"Dictionary torch loss descriptors. See t_loss() conveniently retrieving loss function. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Functions — mlr3torch_losses","text":"","code":"mlr3torch_losses"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_losses.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Loss Functions — mlr3torch_losses","text":"object class DictionaryMlr3torchLosses (inherits Dictionary, R6) length 13.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_losses.html","id":"available-loss-functions","dir":"Reference","previous_headings":"","what":"Available Loss Functions","title":"Loss Functions — mlr3torch_losses","text":"cross_entropy, l1, mse","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_losses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Functions — mlr3torch_losses","text":"","code":"mlr3torch_losses$get(\"mse\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # is equivalent to t_loss(\"mse\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # convert to a data.table as.data.table(mlr3torch_losses) #> Key: <key> #>              key              label task_types        packages #>           <char>             <char>     <list>          <list> #> 1: cross_entropy      Cross Entropy    classif torch,mlr3torch #> 2:            l1     Absolute Error       regr torch,mlr3torch #> 3:           mse Mean Squared Error       regr torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_optimizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizers — mlr3torch_optimizers","title":"Optimizers — mlr3torch_optimizers","text":"Dictionary torch optimizers. Use t_opt conveniently retrieving optimizers. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_optimizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizers — mlr3torch_optimizers","text":"","code":"mlr3torch_optimizers"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_optimizers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Optimizers — mlr3torch_optimizers","text":"object class DictionaryMlr3torchOptimizers (inherits Dictionary, R6) length 13.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_optimizers.html","id":"available-optimizers","dir":"Reference","previous_headings":"","what":"Available Optimizers","title":"Optimizers — mlr3torch_optimizers","text":"adagrad, adam, adamw, rmsprop, sgd","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr3torch_optimizers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizers — mlr3torch_optimizers","text":"","code":"mlr3torch_optimizers$get(\"adam\") #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: list() #> * Packages: torch,mlr3torch # is equivalent to t_opt(\"adam\") #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: list() #> * Packages: torch,mlr3torch # convert to a data.table as.data.table(mlr3torch_optimizers) #> Key: <key> #>        key                                 label        packages #>     <char>                                <char>          <list> #> 1: adagrad           Adaptive Gradient algorithm torch,mlr3torch #> 2:    adam            Adaptive Moment Estimation torch,mlr3torch #> 3:   adamw Decoupled Weight Decay Regularization torch,mlr3torch #> 4: rmsprop          Root Mean Square Propagation torch,mlr3torch #> 5:     sgd           Stochastic Gradient Descent torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazy Data Backend — mlr_backends_lazy","title":"Lazy Data Backend — mlr_backends_lazy","text":"lazy data backend wraps constructor lazily creates another backend, e.g. downloading (caching) data internet. backend used, metadata backend known advance accessible downloading actual data. backend first constructed, verified provided metadata correct, otherwise informative error message thrown. construction lazily constructed backend, calls like $data(), $missings(), $distinct(), $hash() redirected . Information available backend constructed : nrow - number rows (set length rownames). ncol - number columns (provided via id column col_info). colnames - column names. rownames - row names. col_info - column information, can obtained via mlr3::col_info(). Beware accessing backend's hash also contructs backend. Note cases data contains lazy_tensor columns, necessary naming class nothing lazy_tensor data type. Important constructor generates factor() variables important ordering levels data corresponds ordering levels col_info argument.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Lazy Data Backend — mlr_backends_lazy","text":"mlr3::DataBackend -> DataBackendLazy","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Lazy Data Backend — mlr_backends_lazy","text":"backend (DataBackend) wrapped backend lazily constructed first accessed. nrow (integer(1)) Number rows (observations). ncol (integer(1)) Number columns (variables), including primary key column. rownames (integer()) Returns vector distinct row identifiers, .e. contents primary key column. colnames (character()) Returns vector column names, including primary key column. is_constructed (logical(1)) Whether backend already constructed.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Lazy Data Backend — mlr_backends_lazy","text":"mlr3::DataBackend$format()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Lazy Data Backend — mlr_backends_lazy","text":"DataBackendLazy$new() DataBackendLazy$data() DataBackendLazy$head() DataBackendLazy$distinct() DataBackendLazy$missings() DataBackendLazy$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$new(constructor, rownames, col_info, primary_key)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy Data Backend — mlr_backends_lazy","text":"constructor (function) function argument backend (lazy backend), whose return value must actual backend. function called first time field $backend accessed. rownames (integer()) row names. Must permutation rownames lazily constructed backend. col_info (data.table::data.table()) data.table columns id, type levels containing column id, type levels. Note levels must provided correct order. primary_key (character(1)) Name primary key column.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Returns slice data specified format. rows must addressed vector primary key values, columns must referred via column names. Queries rows matching row id queries columns matching column name silently ignored. Rows guaranteed returned order rows, columns may returned arbitrary order. Duplicated row ids result duplicated rows, duplicated column names lead exception. Accessing data triggers construction backend.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$data(rows, cols)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy Data Backend — mlr_backends_lazy","text":"rows (integer()) Row indices. cols (character()) Column names.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Retrieve first n rows. triggers construction backend.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$head(n = 6L)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy Data Backend — mlr_backends_lazy","text":"n (integer(1)) Number rows.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Lazy Data Backend — mlr_backends_lazy","text":"data.table::data.table() first n rows.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-distinct-","dir":"Reference","previous_headings":"","what":"Method distinct()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Returns named list vectors distinct values column specified. na_rm TRUE, missing values removed returned vectors distinct values. Non-existing rows columns silently ignored. triggers construction backend.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$distinct(rows, cols, na_rm = TRUE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy Data Backend — mlr_backends_lazy","text":"rows (integer()) Row indices. cols (character()) Column names. na_rm (logical(1)) Whether remove NAs .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Lazy Data Backend — mlr_backends_lazy","text":"Named list() distinct values.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-missings-","dir":"Reference","previous_headings":"","what":"Method missings()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Returns number missing values per column specified slice data. Non-existing rows columns silently ignored. triggers construction backend.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$missings(rows, cols)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy Data Backend — mlr_backends_lazy","text":"rows (integer()) Row indices. cols (character()) Column names.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Lazy Data Backend — mlr_backends_lazy","text":"Total missing values per column (named numeric()).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Lazy Data Backend — mlr_backends_lazy","text":"Printer.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"DataBackendLazy$print()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_backends_lazy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazy Data Backend — mlr_backends_lazy","text":"","code":"# We first define a backend constructor constructor = function(backend) {   cat(\"Data is constructed!\\n\")   DataBackendDataTable$new(     data.table(x = rnorm(10), y = rnorm(10), row_id = 1:10),     primary_key = \"row_id\"   ) }  # to wrap this backend constructor in a lazy backend, we need to provide the correct metadata for it column_info = data.table(   id = c(\"x\", \"y\", \"row_id\"),   type = c(\"numeric\", \"numeric\", \"integer\"),   levels = list(NULL, NULL, NULL) ) backend_lazy = DataBackendLazy$new(   constructor = constructor,   rownames = 1:10,   col_info = column_info,   primary_key = \"row_id\" )  # Note that the constructor is not called for the calls below # as they can be read from the metadata backend_lazy$nrow #> [1] 10 backend_lazy$rownames #>  [1]  1  2  3  4  5  6  7  8  9 10 backend_lazy$ncol #> [1] 3 backend_lazy$colnames #> [1] \"x\"      \"y\"      \"row_id\" col_info(backend_lazy) #>        id    type levels #>    <char>  <char> <list> #> 1:      x numeric [NULL] #> 2:      y numeric [NULL] #> 3: row_id integer [NULL]  # Only now the backend is constructed backend_lazy$data(1, \"x\") #> Data is constructed! #>             x #>         <num> #> 1: -0.3872136 # Is the same as: backend_lazy$backend$data(1, \"x\") #>             x #>         <num> #> 1: -0.3872136"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkpoint Callback — mlr_callback_set.checkpoint","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Saves optimizer network states training. final network optimizer always stored.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Saving learner callback trained model impossible, model slot set last callback step executed.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"mlr3torch::CallbackSet -> CallbackSetCheckpoint","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"mlr3torch::CallbackSet$load_state_dict() mlr3torch::CallbackSet$print() mlr3torch::CallbackSet$state_dict()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"CallbackSetCheckpoint$new() CallbackSetCheckpoint$on_epoch_end() CallbackSetCheckpoint$on_batch_end() CallbackSetCheckpoint$on_exit() CallbackSetCheckpoint$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"CallbackSetCheckpoint$new(path, freq, freq_type = \"epoch\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"path (character(1)) path folder models saved. freq (integer(1)) frequency often model saved. Frequency either per step epoch, can configured freq_type parameter. freq_type (character(1)) Can either \"epoch\" (default) \"step\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Saves network optimizer state dict. nothing freq_type freq met.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"CallbackSetCheckpoint$on_epoch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"method-on-batch-end-","dir":"Reference","previous_headings":"","what":"Method on_batch_end()","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Saves selected objects defined save. nothing freq_type freq met.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"CallbackSetCheckpoint$on_batch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"method-on-exit-","dir":"Reference","previous_headings":"","what":"Method on_exit()","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"Saves learner.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"CallbackSetCheckpoint$on_exit()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"CallbackSetCheckpoint$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.checkpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkpoint Callback — mlr_callback_set.checkpoint","text":"","code":"cb = t_clbk(\"checkpoint\", freq = 1) task = tsk(\"iris\")  pth = tempfile() learner = lrn(\"classif.mlp\", epochs = 3, batch_size = 1, callbacks = cb) learner$param_set$set_values(cb.checkpoint.path = pth)  learner$train(task)  list.files(pth) #> [1] \"network1.pt\"   \"network2.pt\"   \"network3.pt\"   \"optimizer1.pt\" #> [5] \"optimizer2.pt\" \"optimizer3.pt\""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":null,"dir":"Reference","previous_headings":"","what":"History Callback — mlr_callback_set.history","title":"History Callback — mlr_callback_set.history","text":"Saves training validation history training. history saved data.table validation measures prefixed \"valid.\" training measures prefixed \"train.\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"History Callback — mlr_callback_set.history","text":"mlr3torch::CallbackSet -> CallbackSetHistory","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"History Callback — mlr_callback_set.history","text":"mlr3torch::CallbackSet$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"History Callback — mlr_callback_set.history","text":"CallbackSetHistory$on_begin() CallbackSetHistory$state_dict() CallbackSetHistory$load_state_dict() CallbackSetHistory$on_before_valid() CallbackSetHistory$on_epoch_end() CallbackSetHistory$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-on-begin-","dir":"Reference","previous_headings":"","what":"Method on_begin()","title":"History Callback — mlr_callback_set.history","text":"Initializes lists train validation metrics stored.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$on_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-state-dict-","dir":"Reference","previous_headings":"","what":"Method state_dict()","title":"History Callback — mlr_callback_set.history","text":"Converts lists data.tables.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$state_dict()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-load-state-dict-","dir":"Reference","previous_headings":"","what":"Method load_state_dict()","title":"History Callback — mlr_callback_set.history","text":"Sets field $train $valid contained state dict.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$load_state_dict(state_dict)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"History Callback — mlr_callback_set.history","text":"state_dict (callback_state_history) state dict retrieved via $state_dict().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-on-before-valid-","dir":"Reference","previous_headings":"","what":"Method on_before_valid()","title":"History Callback — mlr_callback_set.history","text":"Add latest training scores history.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$on_before_valid()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"History Callback — mlr_callback_set.history","text":"Add latest validation scores history.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$on_epoch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"History Callback — mlr_callback_set.history","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"History Callback — mlr_callback_set.history","text":"","code":"CallbackSetHistory$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"History Callback — mlr_callback_set.history","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"History Callback — mlr_callback_set.history","text":"","code":"cb = t_clbk(\"history\") task = tsk(\"iris\")  learner = lrn(\"classif.mlp\", epochs = 3, batch_size = 1,   callbacks = t_clbk(\"history\"), validate = 0.3) learner$param_set$set_values(   measures_train = msrs(c(\"classif.acc\", \"classif.ce\")),   measures_valid = msr(\"classif.ce\") ) learner$train(task)  print(learner$model$callbacks$history) #> Key: <epoch> #>    epoch train.classif.acc train.classif.ce valid.classif.ce #>    <num>             <num>            <num>            <num> #> 1:     1         0.3047619        0.6952381        0.6222222 #> 2:     2         0.3142857        0.6857143        0.7333333 #> 3:     3         0.3523810        0.6476190        0.5111111"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Callbacks — mlr_callback_set","title":"Base Class for Callbacks — mlr_callback_set","text":"Base class callbacks inherit (see section Inheriting). callback set collection functions executed different stages training loop. can used gain control training process neural network without write everything scratch. used torch learner, CallbackSet wrapped TorchCallback. latters parameter set represents arguments CallbackSet's $initialize() method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Base Class for Callbacks — mlr_callback_set","text":"available stage (see section Stages) public method $on_<stage>() can defined. evaluation context (ContextTorch) can accessed via self$ctx, contains current state training loop. context assigned beginning training loop removed afterwards. Different stages callback can communicate assigning values $self. State: able store information $model slot LearnerTorch, callbacks support state API. can overload $state_dict() public method define stored learner$model$callbacks$<id> training finishes. also requires implement $load_state_dict(state_dict) method defines load previously saved callback state different callback. Note $state_dict() include parameter values used initialize callback. creating custom callbacks, function torch_callback() recommended, creates CallbackSet wraps TorchCallback. create CallbackSet convenience function callback_set() can used. functions perform checks stages accidentally misspelled.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"stages","dir":"Reference","previous_headings":"","what":"Stages","title":"Base Class for Callbacks — mlr_callback_set","text":"begin :: Run training loop begins. epoch_begin :: Run beginning epoch. batch_begin :: Run forward call. after_backward :: Run backward call. batch_end :: Run optimizer step. batch_valid_begin :: Run forward call validation loop. batch_valid_end :: Run forward call validation loop. valid_end :: Run end validation. epoch_end :: Run end epoch. end :: Run last epoch. exit :: Run last, using .exit().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"terminate-training","dir":"Reference","previous_headings":"","what":"Terminate Training","title":"Base Class for Callbacks — mlr_callback_set","text":"training stopped, possible set field $terminate ContextTorch. end every epoch field checked TRUE, training stops. can example used implement custom early stopping.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base Class for Callbacks — mlr_callback_set","text":"ctx (ContextTorch NULL) evaluation context callback. field always NULL except $train() call torch learner.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base Class for Callbacks — mlr_callback_set","text":"stages (character()) active stages callback set.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Callbacks — mlr_callback_set","text":"CallbackSet$print() CallbackSet$state_dict() CallbackSet$load_state_dict() CallbackSet$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base Class for Callbacks — mlr_callback_set","text":"Prints object.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Callbacks — mlr_callback_set","text":"","code":"CallbackSet$print(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Callbacks — mlr_callback_set","text":"... () Currently unused.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"method-state-dict-","dir":"Reference","previous_headings":"","what":"Method state_dict()","title":"Base Class for Callbacks — mlr_callback_set","text":"Returns information kept LearnerTorch's state training. information loadable callback using $load_state_dict() able continue training. returns NULL default.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Callbacks — mlr_callback_set","text":"","code":"CallbackSet$state_dict()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"method-load-state-dict-","dir":"Reference","previous_headings":"","what":"Method load_state_dict()","title":"Base Class for Callbacks — mlr_callback_set","text":"Loads state dict callback continue training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Callbacks — mlr_callback_set","text":"","code":"CallbackSet$load_state_dict(state_dict)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Callbacks — mlr_callback_set","text":"state_dict () state dict retrieved via $state_dict().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Callbacks — mlr_callback_set","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Callbacks — mlr_callback_set","text":"","code":"CallbackSet$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Callbacks — mlr_callback_set","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":null,"dir":"Reference","previous_headings":"","what":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"Changes learning rate based schedule specified torch::lr_scheduler. writing, following available: torch::lr_cosine_annealing() torch::lr_lambda() torch::lr_multiplicative() torch::lr_one_cycle() torch::lr_reduce_on_plateau() torch::lr_step() Custom schedulers defined torch::lr_scheduler().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"mlr3torch::CallbackSet -> CallbackSetLRScheduler","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"scheduler_fn (lr_scheduler_generator) torch function creates learning rate scheduler scheduler (LRScheduler) learning rate scheduler wrapped callback","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"mlr3torch::CallbackSet$load_state_dict() mlr3torch::CallbackSet$print() mlr3torch::CallbackSet$state_dict()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"CallbackSetLRScheduler$new() CallbackSetLRScheduler$on_begin() CallbackSetLRScheduler$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"","code":"CallbackSetLRScheduler$new(.scheduler, step_on_epoch, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":".scheduler (lr_scheduler_generator) torch scheduler generator (e.g. torch::lr_step). step_on_epoch (logical(1)) Whether scheduler steps every epoch (otherwise every batch). ... () scheduler-specific arguments","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"method-on-begin-","dir":"Reference","previous_headings":"","what":"Method on_begin()","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"Creates scheduler using optimizer context","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"","code":"CallbackSetLRScheduler$on_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"","code":"CallbackSetLRScheduler$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.lr_scheduler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learning Rate Scheduling Callback — mlr_callback_set.lr_scheduler","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress Callback — mlr_callback_set.progress","title":"Progress Callback — mlr_callback_set.progress","text":"Prints progress bar metrics training validation.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Progress Callback — mlr_callback_set.progress","text":"mlr3torch::CallbackSet -> CallbackSetProgress","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Progress Callback — mlr_callback_set.progress","text":"mlr3torch::CallbackSet$load_state_dict() mlr3torch::CallbackSet$print() mlr3torch::CallbackSet$state_dict()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Progress Callback — mlr_callback_set.progress","text":"CallbackSetProgress$on_epoch_begin() CallbackSetProgress$on_batch_end() CallbackSetProgress$on_before_valid() CallbackSetProgress$on_batch_valid_end() CallbackSetProgress$on_epoch_end() CallbackSetProgress$on_end() CallbackSetProgress$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-epoch-begin-","dir":"Reference","previous_headings":"","what":"Method on_epoch_begin()","title":"Progress Callback — mlr_callback_set.progress","text":"Initializes progress bar training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_epoch_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-batch-end-","dir":"Reference","previous_headings":"","what":"Method on_batch_end()","title":"Progress Callback — mlr_callback_set.progress","text":"Increments training progress bar.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_batch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-before-valid-","dir":"Reference","previous_headings":"","what":"Method on_before_valid()","title":"Progress Callback — mlr_callback_set.progress","text":"Creates progress bar validation.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_before_valid()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-batch-valid-end-","dir":"Reference","previous_headings":"","what":"Method on_batch_valid_end()","title":"Progress Callback — mlr_callback_set.progress","text":"Increments validation progress bar.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_batch_valid_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"Progress Callback — mlr_callback_set.progress","text":"Prints summary training validation process.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_epoch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-on-end-","dir":"Reference","previous_headings":"","what":"Method on_end()","title":"Progress Callback — mlr_callback_set.progress","text":"Prints time end training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$on_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Progress Callback — mlr_callback_set.progress","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"CallbackSetProgress$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progress Callback — mlr_callback_set.progress","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress Callback — mlr_callback_set.progress","text":"","code":"task = tsk(\"iris\")  learner = lrn(\"classif.mlp\", epochs = 5, batch_size = 1,   callbacks = t_clbk(\"progress\"), validate = 0.3) learner$param_set$set_values(   measures_train = msrs(c(\"classif.acc\", \"classif.ce\")),   measures_valid = msr(\"classif.ce\") )  learner$train(task) #> Epoch 1 started (2025-02-07 09:19:01) #>  #> [Summary epoch 1] #> ------------------ #> Measures (Train): #>  * classif.acc = 0.31 #>  * classif.ce = 0.69 #> Measures (Valid): #>  * classif.ce = 0.62 #> Epoch 2 started (2025-02-07 09:19:02) #>  #> [Summary epoch 2] #> ------------------ #> Measures (Train): #>  * classif.acc = 0.31 #>  * classif.ce = 0.69 #> Measures (Valid): #>  * classif.ce = 0.56 #> Epoch 3 started (2025-02-07 09:19:02) #>  #> [Summary epoch 3] #> ------------------ #> Measures (Train): #>  * classif.acc = 0.55 #>  * classif.ce = 0.45 #> Measures (Valid): #>  * classif.ce = 0.44 #> Epoch 4 started (2025-02-07 09:19:03) #>  #> [Summary epoch 4] #> ------------------ #> Measures (Train): #>  * classif.acc = 0.57 #>  * classif.ce = 0.43 #> Measures (Valid): #>  * classif.ce = 0.49 #> Epoch 5 started (2025-02-07 09:19:03) #>  #> [Summary epoch 5] #> ------------------ #> Measures (Train): #>  * classif.acc = 0.51 #>  * classif.ce = 0.49 #> Measures (Valid): #>  * classif.ce = 0.60 #> Finished training for 5 epochs (2025-02-07 09:19:03)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":null,"dir":"Reference","previous_headings":"","what":"TensorBoard Logging Callback — mlr_callback_set.tb","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"Logs training loss, training measures, validation measures events. view , use TensorBoard tensorflow::tensorboard() (requires tensorflow) CLI.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"Logs events every epoch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"mlr3torch::CallbackSet -> CallbackSetTB","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"mlr3torch::CallbackSet$load_state_dict() mlr3torch::CallbackSet$print() mlr3torch::CallbackSet$state_dict()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"CallbackSetTB$new() CallbackSetTB$on_epoch_end() CallbackSetTB$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"","code":"CallbackSetTB$new(path, log_train_loss)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"path (character(1)) path folder events logged. Point TensorBoard folder view . log_train_loss (logical(1)) Whether log training loss.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"Logs training loss, training measures, validation measures TensorBoard events.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"","code":"CallbackSetTB$on_epoch_end()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"","code":"CallbackSetTB$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.tb.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TensorBoard Logging Callback — mlr_callback_set.tb","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"Unfreeze weights (parameters network) number steps epochs.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"mlr3torch::CallbackSet -> CallbackSetUnfreeze","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"mlr3torch::CallbackSet$load_state_dict() mlr3torch::CallbackSet$print() mlr3torch::CallbackSet$state_dict()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"CallbackSetUnfreeze$new() CallbackSetUnfreeze$on_begin() CallbackSetUnfreeze$on_epoch_begin() CallbackSetUnfreeze$on_batch_begin() CallbackSetUnfreeze$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"CallbackSetUnfreeze$new(starting_weights, unfreeze)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"starting_weights (Select) Select denoting weights trainable start. unfreeze (data.table) data.table column weights (list column Selects) column epoch batch. selector indicates parameters unfreeze, epoch batch column indicates .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"method-on-begin-","dir":"Reference","previous_headings":"","what":"Method on_begin()","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"Sets starting weights","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"CallbackSetUnfreeze$on_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"method-on-epoch-begin-","dir":"Reference","previous_headings":"","what":"Method on_epoch_begin()","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"Unfreezes weights training correct epoch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"CallbackSetUnfreeze$on_epoch_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"method-on-batch-begin-","dir":"Reference","previous_headings":"","what":"Method on_batch_begin()","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"Unfreezes weights training correct batch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"CallbackSetUnfreeze$on_batch_begin()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"CallbackSetUnfreeze$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_callback_set.unfreeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unfreezing Weights Callback — mlr_callback_set.unfreeze","text":"","code":"task = tsk(\"iris\") cb = t_clbk(\"unfreeze\") mlp = lrn(\"classif.mlp\", callbacks = cb,  cb.unfreeze.starting_weights = select_invert(    select_name(c(\"0.weight\", \"3.weight\", \"6.weight\", \"6.bias\"))  ),  cb.unfreeze.unfreeze = data.table(    epoch = c(2, 5),    weights = list(select_name(\"0.weight\"), select_name(c(\"3.weight\", \"6.weight\")))  ),  epochs = 6, batch_size = 150, neurons = c(1, 1, 1) )  mlp$train(task)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Context for Torch Learner — mlr_context_torch","title":"Context for Torch Learner — mlr_context_torch","text":"Context training torch learner. - mostly read-- information callbacks access argument ctx. information callbacks, see CallbackSet.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Context for Torch Learner — mlr_context_torch","text":"learner (Learner) torch learner. task_train (Task) training task. task_valid (Task NULL) validation task. loader_train (torch::dataloader) data loader training. loader_valid (torch::dataloader) data loader validation. measures_train (list() Measures) Measures used training. measures_valid (list() Measures) Measures used validation. network (torch::nn_module) torch network. optimizer (torch::optimizer) optimizer. loss_fn (torch::nn_module) loss function. total_epochs (integer(1)) total number epochs learner trained . last_scores_train (named list() NULL) scores last training batch. Names ids training measures. LearnerTorch sets eval_freq different 1, NULL epochs evaluate model. last_scores_valid (list()) scores last validation batch. Names ids validation measures. LearnerTorch sets eval_freq different 1, NULL epochs evaluate model. last_loss (numeric(1)) loss last trainings batch. epoch (integer(1)) current epoch. step (integer(1)) current iteration. prediction_encoder (function()) learner's prediction encoder. batch (named list() torch_tensors) current batch. terminate (logical(1)) field set TRUE end epoch, training stops. device (torch::torch_device) device.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Context for Torch Learner — mlr_context_torch","text":"ContextTorch$new() ContextTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Context for Torch Learner — mlr_context_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Context for Torch Learner — mlr_context_torch","text":"","code":"ContextTorch$new(   learner,   task_train,   task_valid = NULL,   loader_train,   loader_valid = NULL,   measures_train = NULL,   measures_valid = NULL,   network,   optimizer,   loss_fn,   total_epochs,   prediction_encoder,   eval_freq = 1L,   device )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Context for Torch Learner — mlr_context_torch","text":"learner (Learner) torch learner. task_train (Task) training task. task_valid (Task NULL) validation task. loader_train (torch::dataloader) data loader training. loader_valid (torch::dataloader NULL) data loader validation. measures_train (list() Measures NULL) Measures used training. Default NULL. measures_valid (list() Measures NULL) Measures used validation. network (torch::nn_module) torch network. optimizer (torch::optimizer) optimizer. loss_fn (torch::nn_module) loss function. total_epochs (integer(1)) total number epochs learner trained . prediction_encoder (function()) learner's prediction encoder. eval_freq (integer(1)) evaluation frequency. device (character(1)) device.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Context for Torch Learner — mlr_context_torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Context for Torch Learner — mlr_context_torch","text":"","code":"ContextTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_context_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Context for Torch Learner — mlr_context_torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"My Little Pony — mlr_learners.mlp","title":"My Little Pony — mlr_learners.mlp","text":"Fully connected feed forward network dropout activation function. features can either single lazy_tensor one numeric columns ().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"My Little Pony — mlr_learners.mlp","text":"Learner can instantiated using sugar function lrn():","code":"lrn(\"classif.mlp\", ...) lrn(\"regr.mlp\", ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"My Little Pony — mlr_learners.mlp","text":"Supported task types: 'classif', 'regr' Predict Types: classif: 'response', 'prob' regr: 'response' Feature Types: “integer”, “numeric”, “lazy_tensor” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"My Little Pony — mlr_learners.mlp","text":"Parameters LearnerTorch, well : activation :: [nn_module] activation function. initialized nn_relu. activation_args :: named list() named list initialization arguments activation function. intialized empty list. neurons :: integer() number neurons per hidden layer. default hidden layer. Setting c(10, 20) first hidden layer 10 neurons second 20. n_layers :: integer() number layers. parameter must set neurons length 1. p :: numeric(1) dropout probability. initialized 0.5. shape :: integer() NULL input shape length 2, e.g. c(NA, 5). needs present lazy tensor input unknown shape (NULL). Otherwise input shape inferred number numeric features.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"My Little Pony — mlr_learners.mlp","text":"Gorishniy Y, Rubachev , Khrulkov V, Babenko (2021). “Revisiting Deep Learning  Tabular Data.” arXiv, 2106.11959.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"My Little Pony — mlr_learners.mlp","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> LearnerTorchMLP","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"My Little Pony — mlr_learners.mlp","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"My Little Pony — mlr_learners.mlp","text":"LearnerTorchMLP$new() LearnerTorchMLP$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"My Little Pony — mlr_learners.mlp","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony — mlr_learners.mlp","text":"","code":"LearnerTorchMLP$new(   task_type,   optimizer = NULL,   loss = NULL,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony — mlr_learners.mlp","text":"task_type (character(1)) task type, either \"classif\" \"regr\". optimizer (TorchOptimizer) optimizer use training. Per default, adam used. loss (TorchLoss) loss used train network. Per default, mse used regression cross_entropy classification. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"My Little Pony — mlr_learners.mlp","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony — mlr_learners.mlp","text":"","code":"LearnerTorchMLP$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony — mlr_learners.mlp","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"My Little Pony — mlr_learners.mlp","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"classif.mlp\") learner$param_set$set_values(   epochs = 1, batch_size = 16, device = \"cpu\",   neurons = 10 )  # Define a Task task = tsk(\"iris\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, row_ids = ids$train)  # Make predictions for the test rows predictions = learner$predict(task, row_ids = ids$test)  # Score the predictions predictions$score() #> classif.ce  #>       0.64"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabular ResNet — mlr_learners.tab_resnet","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Tabular resnet.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Learner can instantiated using sugar function lrn():","code":"lrn(\"classif.tab_resnet\", ...) lrn(\"regr.tab_resnet\", ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Supported task types: 'classif', 'regr' Predict Types: classif: 'response', 'prob' regr: 'response' Feature Types: “integer”, “numeric” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Parameters LearnerTorch, well : n_blocks :: integer(1) number blocks. d_block :: integer(1) input output dimension block. d_hidden :: integer(1) latent dimension block. d_hidden_multiplier :: numeric(1) Alternative way specify latent dimension d_block * d_hidden_multiplier. dropout1 :: numeric(1) First dropout ratio. dropout2 :: numeric(1) Second dropout ratio.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Gorishniy Y, Rubachev , Khrulkov V, Babenko (2021). “Revisiting Deep Learning  Tabular Data.” arXiv, 2106.11959.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> LearnerTorchTabResNet","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"LearnerTorchTabResNet$new() LearnerTorchTabResNet$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"","code":"LearnerTorchTabResNet$new(   task_type,   optimizer = NULL,   loss = NULL,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"task_type (character(1)) task type, either \"classif\" \"regr\". optimizer (TorchOptimizer) optimizer use training. Per default, adam used. loss (TorchLoss) loss used train network. Per default, mse used regression cross_entropy classification. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"","code":"LearnerTorchTabResNet$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.tab_resnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabular ResNet — mlr_learners.tab_resnet","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"classif.tab_resnet\") learner$param_set$set_values(   epochs = 1, batch_size = 16, device = \"cpu\",   n_blocks = 2, d_block = 10, d_hidden = 20, dropout1 = 0.3, dropout2 = 0.3 )  # Define a Task task = tsk(\"iris\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, row_ids = ids$train)  # Make predictions for the test rows predictions = learner$predict(task, row_ids = ids$test)  # Score the predictions predictions$score() #> classif.ce  #>       0.66"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":null,"dir":"Reference","previous_headings":"","what":"Featureless Torch Learner — mlr_learners.torch_featureless","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"Featureless torch learner. Output constant weight learned training. classification, (asymptoptically) result majority class prediction using standard cross-entropy loss. regression, result median L1 loss mean L2 loss.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"Learner can instantiated using sugar function lrn():","code":"lrn(\"classif.torch_featureless\", ...) lrn(\"regr.torch_featureless\", ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"Supported task types: 'classif', 'regr' Predict Types: classif: 'response', 'prob' regr: 'response' Feature Types: “logical”, “integer”, “numeric”, “character”, “factor”, “ordered”, “POSIXct”, “lazy_tensor” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"LearnerTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> LearnerTorchFeatureless","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"LearnerTorchFeatureless$new() LearnerTorchFeatureless$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"","code":"LearnerTorchFeatureless$new(   task_type,   optimizer = NULL,   loss = NULL,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"task_type (character(1)) task type, either \"classif\" \"regr\". optimizer (TorchOptimizer) optimizer use training. Per default, adam used. loss (TorchLoss) loss used train network. Per default, mse used regression cross_entropy classification. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"","code":"LearnerTorchFeatureless$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torch_featureless.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Featureless Torch Learner — mlr_learners.torch_featureless","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"classif.torch_featureless\") learner$param_set$set_values(   epochs = 1, batch_size = 16, device = \"cpu\"    )  # Define a Task task = tsk(\"iris\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, row_ids = ids$train)  # Make predictions for the test rows predictions = learner$predict(task, row_ids = ids$test)  # Score the predictions predictions$score() #> classif.ce  #>        0.7"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":null,"dir":"Reference","previous_headings":"","what":"AlexNet Image Classifier — mlr_learners.torchvision","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"Classic image classification networks torchvision.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"Parameters LearnerTorchImage pretrained :: logical(1) Whether use pretrained model. final linear layer replaced new nn_linear number classes inferred Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"Supported task types: \"classif\" Predict Types: \"response\" \"prob\" Feature Types: \"lazy_tensor\" Required packages: \"mlr3torch\", \"torch\", \"torchvision\"","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> mlr3torch::LearnerTorchImage -> LearnerTorchVision","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"LearnerTorchVision$new() LearnerTorchVision$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"","code":"LearnerTorchVision$new(   name,   module_generator,   label,   optimizer = NULL,   loss = NULL,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"name (character(1)) name network. module_generator (function(pretrained, num_classes)) Function generates network. label (character(1)) label network. #' @references Krizhevsky, Alex, Sutskever, Ilya, Hinton, E. G (2017). “Imagenet classification deep convolutional neural networks.” Communications ACM, 60(6), 84–90. Sandler, Mark, Howard, Andrew, Zhu, Menglong, Zhmoginov, Andrey, Chen, Liang-Chieh (2018). “Mobilenetv2: Inverted residuals linear bottlenecks.” Proceedings IEEE conference computer vision pattern recognition, 4510–4520. , Kaiming, Zhang, Xiangyu, Ren, Shaoqing, Sun, Jian (2016). “Deep residual learning image recognition.” Proceedings IEEE conference computer vision pattern recognition, 770–778. Simonyan, Karen, Zisserman, Andrew (2014). “deep convolutional networks large-scale image recognition.” arXiv preprint arXiv:1409.1556. optimizer (TorchOptimizer) optimizer use training. Per default, adam used. loss (TorchLoss) loss used train network. Per default, mse used regression cross_entropy classification. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"","code":"LearnerTorchVision$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners.torchvision.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlexNet Image Classifier — mlr_learners.torchvision","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Learners — mlr_learners_torch","title":"Base Class for Torch Learners — mlr_learners_torch","text":"base class provides basic functionality training prediction neural network. torch learners inherit class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"Base Class for Torch Learners — mlr_learners_torch","text":"specify validation data, can set $validate field Learner, can set : NULL: validation ratio: proportion 1 - ratio task used training ratio used validation. \"test\" means \"test\" task resampling used possible calling $train() manually. \"predefined\": use predefined $internal_valid_task mlr3::Task. validation data can also used early stopping, see description Learner's parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"saving-a-learner","dir":"Reference","previous_headings":"","what":"Saving a Learner","title":"Base Class for Torch Learners — mlr_learners_torch","text":"order save LearnerTorch later usage, necessary call $marshal() method Learner writing disk, object otherwise saved correctly. loading marshaled LearnerTorch R , need call $unmarshal() transform useable state.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"early-stopping-and-internal-tuning","dir":"Reference","previous_headings":"","what":"Early Stopping and Internal Tuning","title":"Base Class for Torch Learners — mlr_learners_torch","text":"order prevent overfitting, LearnerTorch class allows use early stopping via patience min_delta parameters, see Learner's parameters. tuning LearnerTorch also possible combine explicit tuning via mlr3tuning LearnerTorch's internal tuning epochs via early stopping. , just need include epochs = to_tune(upper = <upper>, internal = TRUE) search space, <upper> maximally allowed number epochs, configure early stopping.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"model","dir":"Reference","previous_headings":"","what":"Model","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Model list class \"learner_torch_model\" following elements: network :: trained network. optimizer :: $state_dict() optimizer used train network. loss_fn :: $state_dict() loss used train network. callbacks :: callbacks used train network. seed :: seed / used training prediction. epochs :: many epochs model trained (early stopping). task_col_info :: data.table() containing information train-task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Torch Learners — mlr_learners_torch","text":"General: parameters optimizer, loss callbacks, prefixed \"opt.\", \"loss.\" \"cb.<callback id>.\" respectively, well : epochs :: integer(1) number epochs. device :: character(1) device. One \"auto\", \"cpu\", \"cuda\" values defined mlr_reflections$torch$devices. value initialized \"auto\", select \"cuda\" possible, try \"mps\" otherwise fall back \"cpu\". num_threads :: integer(1) number threads intraop pararallelization (device \"cpu\"). value initialized 1. num_interop_threads :: integer(1) number threads intraop interop pararallelization (device \"cpu\"). value initialized 1. Note can set session changing value within R session raise warning. seed :: integer(1) \"random\" NULL torch seed used training prediction. value initialized \"random\", means random seed sampled beginning training phase. seed (either set randomly sampled) available via $model$seed training used prediction. Note setting seed training phase mean default (.e. seed \"random\"), clones learner use different seed. set NULL, seeding done. tensor_dataset :: logical(1) | \"device\" Whether load batches beginning training stack . initialized FALSE. set \"device\", device tensors set value device, can avoid unnecessary moving tensors devices. dataset fits memory make loading batches faster. Note set datasets contain lazy_tensors random data augmentation, augmentation applied beginning training. Evaluation: measures_train :: Measure list() Measures Measures evaluated training. measures_valid :: Measure list() Measures Measures evaluated validation. eval_freq :: integer(1) often train / validation predictions evaluated using measures_train / measures_valid. initialized 1. Note final model always evaluated. Early Stopping: patience :: integer(1) activates early stopping using validation scores. performance model improve patience evaluation steps, training ended. Note final model stored learner, best model. initialized 0, means early stopping. first entry measures_valid used metric. also requires specify $validate field Learner, well measures_valid. set, epoch improvement observed, can accessed via $internal_tuned_values field learner. min_delta :: double(1) minimum improvement threshold early stopping. initialized 0. Dataloader: batch_size :: integer(1) batch size (required). shuffle :: logical(1) Whether shuffle instances dataset. initialized TRUE, differs default (FALSE). sampler :: torch::sampler Object defines dataloader draw samples. batch_sampler :: torch::sampler Object defines dataloader draws batches. num_workers :: integer(1) number workers data loading (batches loaded parallel). default 0, means data loaded main process. collate_fn :: function merge list samples form batch. pin_memory :: logical(1) Whether dataloader copies tensors CUDA pinned memory returning . drop_last :: logical(1) Whether drop last training batch epoch training. Default FALSE. timeout :: numeric(1) timeout value collecting batch workers. Negative values mean timeout default -1. worker_init_fn :: function(id) function receives worker id ([1, num_workers]) exectued seeding worker data loading. worker_globals :: list() | character() loading data parallel, allows export globals workers. character vector, objects global environment names copied workers. worker_packages :: character() packages load workers. Also see torch::dataloder information.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Base Class for Torch Learners — mlr_learners_torch","text":"seperate classes classification regression inherit . Instead, task_type must specified  construction argument. Currently, classification regression supported. inheriting class, one overload two private methods: .network(task, param_vals) (Task, list()) -> nn_module Construct torch::nn_module object given task parameter values, .e. neural network trained learner. classification, output network expected scores application final softmax layer. .dataset(task, param_vals) (Task, list()) -> torch::dataset Create dataset task. dataset must return named list : x list torch tensors input network. networks one input, names must correspond inputs network. y target tensor. .index indices batch (integer() torch_int()). Moreover, one needs pay attention respect row ids provided task. also possible overwrite private .dataloader() method. must respect dataloader parameters ParamSet. .dataloader(dataset, param_vals) (Task, list()) -> torch::dataloader Create dataloader task. Needs respect least batch_size shuffle (otherwise predictions can permuted). change predict types, possible overwrite method : .encode_prediction(predict_tensor, task) (torch_tensor, Task) -> list() Take raw predictions self$network (predict_tensor) encode format can converted valid mlr3 predictions using mlr3::as_prediction_data(). method must take self$predict_type account. possible add parameters specifying param_set construction argument, currently possible remove existing parameters, .e. listed section Parameters. None parameters provided param_set can id starts \"loss.\", \"opt.\", \"cb.\"`, preserved dynamically constructed parameters optimizer, loss function, callbacks. perform additional input checks task, private .verify_train_task(task, param_vals) .verify_predict_task(task, param_vals) can overwritten. learners construction arguments change hash learner, required implement private $.additional_phash_input().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Base Class for Torch Learners — mlr_learners_torch","text":"mlr3::Learner -> LearnerTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base Class for Torch Learners — mlr_learners_torch","text":"validate construct internal validation data. parameter can either NULL, ratio $(0, 1)$, \"test\", \"predefined\". loss (TorchLoss) torch loss. optimizer (TorchOptimizer) torch optimizer. callbacks (list() TorchCallbacks) List torch callbacks. ids set names. internal_valid_scores Retrieves internal validation scores named list(). Specify $validate field measures_valid parameter configure . Returns NULL learner trained yet. internal_tuned_values early stopping activate, returns named list early-stopped epochs, otherwise empty list returned. Returns NULL learner trained yet. marshaled (logical(1)) Whether learner marshaled. network (nn_module()) Shortcut learner$model$network. param_set (ParamSet) parameter set hash (character(1)) Hash (unique identifier) object. phash (character(1)) Hash (unique identifier) partial object, excluding components varied systematically tuning (parameter values).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Torch Learners — mlr_learners_torch","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Torch Learners — mlr_learners_torch","text":"LearnerTorch$new() LearnerTorch$format() LearnerTorch$print() LearnerTorch$marshal() LearnerTorch$unmarshal() LearnerTorch$dataset() LearnerTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$new(   id,   task_type,   param_set,   properties,   man,   label,   feature_types,   optimizer = NULL,   loss = NULL,   packages = character(),   predict_types = NULL,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"id (character(1)) id new object. task_type (character(1)) task type. param_set (ParamSet alist()) Either parameter set, alist() containing different values self, e.g. alist(private$.param_set1, private$.param_set2), ParamSet collection created. properties (character()) properties object. See mlr_reflections$learner_properties available values. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). label (character(1)) Label new instance. feature_types (character()) feature types. See mlr_reflections$task_feature_types available values, Additionally, \"lazy_tensor\" supported. optimizer (NULL TorchOptimizer) optimizer use training. Defaults adam. loss (NULL TorchLoss) loss use training. Defaults MSE regression cross entropy classification. packages (character()) R packages object depends . predict_types (character()) predict types. See mlr_reflections$learner_predict_types available values. regression, default \"response\". classification, defaults \"response\" \"prob\". deviate defaults, necessary overwrite private $.encode_prediction() method, see section Inheriting. callbacks (list() TorchCallbacks) callbacks use training. Defaults empty list(), .e. callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Helper print outputs.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$format(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"... (ignored).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Prints object.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$print(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"... () Currently unused.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-marshal-","dir":"Reference","previous_headings":"","what":"Method marshal()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Marshal learner.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$marshal(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"... () Additional parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Torch Learners — mlr_learners_torch","text":"self","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-unmarshal-","dir":"Reference","previous_headings":"","what":"Method unmarshal()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Unmarshal learner.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$unmarshal(...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"... () Additional parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Torch Learners — mlr_learners_torch","text":"self","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-dataset-","dir":"Reference","previous_headings":"","what":"Method dataset()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"Create dataset task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$dataset(task)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"task Task task","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Torch Learners — mlr_learners_torch","text":"dataset","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Torch Learners — mlr_learners_torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Learners — mlr_learners_torch","text":"","code":"LearnerTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Learners — mlr_learners_torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Learner — mlr_learners_torch_image","title":"Image Learner — mlr_learners_torch_image","text":"Base Class Image Learners. features assumed single lazy_tensor column RGB format.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Image Learner — mlr_learners_torch_image","text":"Parameters include inherited LearnerTorch param_set construction argument.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Image Learner — mlr_learners_torch_image","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> LearnerTorchImage","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Image Learner — mlr_learners_torch_image","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Image Learner — mlr_learners_torch_image","text":"LearnerTorchImage$new() LearnerTorchImage$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Image Learner — mlr_learners_torch_image","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Learner — mlr_learners_torch_image","text":"","code":"LearnerTorchImage$new(   id,   task_type,   param_set = ps(),   label,   optimizer = NULL,   loss = NULL,   callbacks = list(),   packages = \"torchvision\",   man,   properties = NULL,   predict_types = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Learner — mlr_learners_torch_image","text":"id (character(1)) id new object. task_type (character(1)) task type. param_set (ParamSet) parameter set. label (character(1)) Label new instance. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss use training. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). properties (character()) properties object. See mlr_reflections$learner_properties available values. predict_types (character()) predict types. See mlr_reflections$learner_predict_types available values.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Image Learner — mlr_learners_torch_image","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Learner — mlr_learners_torch_image","text":"","code":"LearnerTorchImage$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_image.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Learner — mlr_learners_torch_image","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Learner Torch Model — mlr_learners_torch_model","title":"Learner Torch Model — mlr_learners_torch_model","text":"Create torch learner instantiated nn_module(). classification, output network must scores (softmax).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Learner Torch Model — mlr_learners_torch_model","text":"See LearnerTorch","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Learner Torch Model — mlr_learners_torch_model","text":"mlr3::Learner -> mlr3torch::LearnerTorch -> LearnerTorchModel","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Learner Torch Model — mlr_learners_torch_model","text":"network_stored (nn_module NULL) network trained. calling $train(), NULL. ingress_tokens (named list() TorchIngressToken NULL) ingress tokens. Must non-NULL calling $train().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Learner Torch Model — mlr_learners_torch_model","text":"mlr3::Learner$base_learner() mlr3::Learner$encapsulate() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$reset() mlr3::Learner$train() mlr3torch::LearnerTorch$dataset() mlr3torch::LearnerTorch$format() mlr3torch::LearnerTorch$marshal() mlr3torch::LearnerTorch$print() mlr3torch::LearnerTorch$unmarshal()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Learner Torch Model — mlr_learners_torch_model","text":"LearnerTorchModel$new() LearnerTorchModel$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Learner Torch Model — mlr_learners_torch_model","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learner Torch Model — mlr_learners_torch_model","text":"","code":"LearnerTorchModel$new(   network = NULL,   ingress_tokens = NULL,   task_type,   properties = NULL,   optimizer = NULL,   loss = NULL,   callbacks = list(),   packages = character(0),   feature_types = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learner Torch Model — mlr_learners_torch_model","text":"network (nn_module) instantiated nn_module. cloned construction. classification, outputs must scores (softmax). ingress_tokens (list TorchIngressToken()) list ingress tokens defines dataloader defined. task_type (character(1)) task type. properties (NULL character()) properties learner. Defaults available properties given task type. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss use training. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided packages (character()) R packages object depends . feature_types (NULL character()) feature types. Defaults available feature types.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Learner Torch Model — mlr_learners_torch_model","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Learner Torch Model — mlr_learners_torch_model","text":"","code":"LearnerTorchModel$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learner Torch Model — mlr_learners_torch_model","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_learners_torch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learner Torch Model — mlr_learners_torch_model","text":"","code":"# We show the learner using a classification task  # The iris task has 4 features and 3 classes network = nn_linear(4, 3) task = tsk(\"iris\")  # This defines the dataloader. # It loads all 4 features, which are also numeric. # The shape is (NA, 4) because the batch dimension is generally NA ingress_tokens = list(   input = TorchIngressToken(task$feature_names, batchgetter_num, c(NA, 4)) )  # Creating the learner and setting required parameters learner = lrn(\"classif.torch_model\",   network = network,   ingress_tokens = ingress_tokens,   batch_size = 16,   epochs = 1,   device = \"cpu\" )  # A simple train-predict ids = partition(task) learner$train(task, ids$train) learner$predict(task, ids$test) #> <PredictionClassif> for 50 observations: #>  row_ids     truth   response #>        2    setosa versicolor #>        3    setosa versicolor #>        9    setosa versicolor #>      ---       ---        --- #>      134 virginica versicolor #>      138 virginica versicolor #>      140 virginica versicolor"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Torch Module Wrappers — mlr_pipeops_module","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"PipeOpModule wraps nn_module function called train phase mlr3pipelines::PipeOp. , allows assemble PipeOpModules computational mlr3pipelines::Graph represents either neural network preprocessing graph lazy_tensor. cases easier create network creating graph generates graph. cases easier create network creating structurally related graph consisting nodes class PipeOpTorchIngress PipeOpTorch. graph generate graph consisting PipeOpModules part ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"number names input output channels can set construction. input output \"torch_tensor\" training, NULL prediction prediction phase currently serves meaningful purpose.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"training, wrapped nn_module / function called provided inputs order channels defined. Arguments matched name.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"mlr3pipelines::PipeOp -> PipeOpModule","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"module (nn_module) torch module called training phase.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"PipeOpModule$new() PipeOpModule$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"PipeOpModule$new(   id = \"module\",   module = nn_identity(),   inname = \"input\",   outname = \"output\",   param_vals = list(),   packages = character(0) )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"id (character(1)) id new object. module (nn_module function()) torch module function wrapped. inname (character()) names input channels. outname (character()) names output channels. parameter length 1, parameter module must return tensor. Otherwise must return list() tensors corresponding length. param_vals (named list()) Parameter values set construction. packages (character()) R packages object depends .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"PipeOpModule$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"## creating an PipeOpModule manually  # one input and output channel po_module = po(\"module\",   id = \"linear\",   module = torch::nn_linear(10, 20),   inname = \"input\",   outname = \"output\" ) x = torch::torch_randn(16, 10) # This calls the forward function of the wrapped module. y = po_module$train(list(input = x)) str(y) #> List of 1 #>  $ output:Float [1:16, 1:20]  # multiple input and output channels nn_custom = torch::nn_module(\"nn_custom\",   initialize = function(in_features, out_features) {     self$lin1 = torch::nn_linear(in_features, out_features)     self$lin2 = torch::nn_linear(in_features, out_features)   },   forward = function(x, z) {     list(out1 = self$lin1(x), out2 = torch::nnf_relu(self$lin2(z)))   } )  module = nn_custom(3, 2) po_module = po(\"module\",   id = \"custom\",   module = module,   inname = c(\"x\", \"z\"),   outname = c(\"out1\", \"out2\") ) x = torch::torch_randn(1, 3) z = torch::torch_randn(1, 3) out = po_module$train(list(x = x, z = z)) str(out) #> List of 2 #>  $ out1:Float [1:1, 1:2] #>  $ out2:Float [1:1, 1:2]  # How such a PipeOpModule is usually generated graph = po(\"torch_ingress_num\") %>>% po(\"nn_linear\", out_features = 10L) result = graph$train(tsk(\"iris\")) # The PipeOpTorchLinear generates a PipeOpModule and adds it to a new (module) graph result[[1]]$graph #> Graph with 2 PipeOps: #>                 ID         State  sccssors         prdcssors #>             <char>        <char>    <char>            <char> #>  torch_ingress_num <<UNTRAINED>> nn_linear                   #>          nn_linear <<UNTRAINED>>           torch_ingress_num linear_module = result[[1L]]$graph$pipeops$nn_linear linear_module #> PipeOp: <nn_linear> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [torch_tensor,NULL] #> Output channels <name [train type, predict type]>: #>   output [torch_tensor,NULL] formalArgs(linear_module$module) #> [1] \"input\" linear_module$input$name #> [1] \"input\"  # Constructing a PipeOpModule using a simple function po_add1 = po(\"module\",   id = \"add_one\",   module = function(x) x + 1 ) input = list(torch_tensor(1)) po_add1$train(input)$output #> torch_tensor #>  2 #> [ CPUFloatType{1} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"Applies 1D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"Calls nn_adaptive_avg_pool1d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"output_size :: integer(1) target output size. single number.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAdaptiveAvgPool -> PipeOpTorchAdaptiveAvgPool1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"PipeOpTorchAdaptiveAvgPool1D$new() PipeOpTorchAdaptiveAvgPool1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"","code":"PipeOpTorchAdaptiveAvgPool1D$new(   id = \"nn_adaptive_avg_pool1d\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"","code":"PipeOpTorchAdaptiveAvgPool1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_adaptive_avg_pool1d\") pipeop #> PipeOp: <nn_adaptive_avg_pool1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: output_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"Applies 2D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"Calls nn_adaptive_avg_pool2d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"output_size :: integer() target output size. Can single number vector.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAdaptiveAvgPool -> PipeOpTorchAdaptiveAvgPool2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"PipeOpTorchAdaptiveAvgPool2D$new() PipeOpTorchAdaptiveAvgPool2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"","code":"PipeOpTorchAdaptiveAvgPool2D$new(   id = \"nn_adaptive_avg_pool2d\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"","code":"PipeOpTorchAdaptiveAvgPool2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_adaptive_avg_pool2d\") pipeop #> PipeOp: <nn_adaptive_avg_pool2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: output_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"Applies 3D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"Calls nn_adaptive_avg_pool3d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"output_size :: integer() target output size. Can single number vector.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAdaptiveAvgPool -> PipeOpTorchAdaptiveAvgPool3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"PipeOpTorchAdaptiveAvgPool3D$new() PipeOpTorchAdaptiveAvgPool3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"","code":"PipeOpTorchAdaptiveAvgPool3D$new(   id = \"nn_adaptive_avg_pool3d\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"","code":"PipeOpTorchAdaptiveAvgPool3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_adaptive_avg_pool3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Adaptive Average Pooling — mlr_pipeops_nn_adaptive_avg_pool3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_adaptive_avg_pool3d\") pipeop #> PipeOp: <nn_adaptive_avg_pool3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: output_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Applies 1D average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Calls nn_avg_pool1d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"PipeOpTorchAvgPool1D$new() PipeOpTorchAvgPool1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"PipeOpTorchAvgPool1D$new(id = \"nn_avg_pool1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"PipeOpTorchAvgPool1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool1d\") pipeop #> PipeOp: <nn_avg_pool1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(5)> #>                   id    class lower upper nlevels        default  value #>               <char>   <char> <num> <num>   <num>         <list> <list> #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:            stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 3:           padding ParamUty    NA    NA     Inf              0 [NULL] #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE [NULL] #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Applies 2D average-pooling operation \\(kH * kW\\) regions step size \\(sH * sW\\) steps. number output features equal number input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Calls nn_avg_pool2d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"PipeOpTorchAvgPool2D$new() PipeOpTorchAvgPool2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"PipeOpTorchAvgPool2D$new(id = \"nn_avg_pool2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"PipeOpTorchAvgPool2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool2d\") pipeop #> PipeOp: <nn_avg_pool2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(6)> #>                   id    class lower upper nlevels        default  value #>               <char>   <char> <num> <num>   <num>         <list> <list> #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:            stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 3:           padding ParamUty    NA    NA     Inf              0 [NULL] #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE [NULL] #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE [NULL] #> 6:  divisor_override ParamDbl     0   Inf     Inf         [NULL] [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Applies 3D average-pooling operation \\(kT * kH * kW\\) regions step size \\(sT * sH * sW\\) steps. number output features equal \\(\\lfloor \\frac{ \\mbox{input planes} }{sT} \\rfloor\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Calls nn_avg_pool3d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"PipeOpTorchAvgPool3D$new() PipeOpTorchAvgPool3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"PipeOpTorchAvgPool3D$new(id = \"nn_avg_pool3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"PipeOpTorchAvgPool3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_avg_pool3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool3d\") pipeop #> PipeOp: <nn_avg_pool3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(6)> #>                   id    class lower upper nlevels        default  value #>               <char>   <char> <num> <num>   <num>         <list> <list> #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:            stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 3:           padding ParamUty    NA    NA     Inf              0 [NULL] #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE [NULL] #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE [NULL] #> 6:  divisor_override ParamDbl     0   Inf     Inf         [NULL] [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Calls torch::nn_batch_norm1d(). parameter num_features inferred second dimension input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"PipeOpTorchBatchNorm1D$new() PipeOpTorchBatchNorm1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"PipeOpTorchBatchNorm1D$new(id = \"nn_batch_norm1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"PipeOpTorchBatchNorm1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm1d\") pipeop #> PipeOp: <nn_batch_norm1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(4)> #>                     id    class lower upper nlevels default  value #>                 <char>   <char> <num> <num>   <num>  <list> <list> #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05 [NULL] #> 2:            momentum ParamDbl     0   Inf     Inf     0.1 [NULL] #> 3:              affine ParamLgl    NA    NA       2    TRUE [NULL] #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Calls torch::nn_batch_norm2d(). parameter num_features inferred second dimension input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"PipeOpTorchBatchNorm2D$new() PipeOpTorchBatchNorm2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"PipeOpTorchBatchNorm2D$new(id = \"nn_batch_norm2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"PipeOpTorchBatchNorm2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm2d\") pipeop #> PipeOp: <nn_batch_norm2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(4)> #>                     id    class lower upper nlevels default  value #>                 <char>   <char> <num> <num>   <num>  <list> <list> #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05 [NULL] #> 2:            momentum ParamDbl     0   Inf     Inf     0.1 [NULL] #> 3:              affine ParamLgl    NA    NA       2    TRUE [NULL] #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Calls torch::nn_batch_norm3d(). parameter num_features inferred second dimension input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"PipeOpTorchBatchNorm3D$new() PipeOpTorchBatchNorm3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"PipeOpTorchBatchNorm3D$new(id = \"nn_batch_norm3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"PipeOpTorchBatchNorm3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_batch_norm3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm3d\") pipeop #> PipeOp: <nn_batch_norm3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(4)> #>                     id    class lower upper nlevels default  value #>                 <char>   <char> <num> <num>   <num>  <list> <list> #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05 [NULL] #> 2:            momentum ParamDbl     0   Inf     Inf     0.1 [NULL] #> 3:              affine ParamLgl    NA    NA       2    TRUE [NULL] #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Repetition — mlr_pipeops_nn_block","title":"Block Repetition — mlr_pipeops_nn_block","text":"Repeat block n_blocks times concatenating (via %>>%).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"naming","dir":"Reference","previous_headings":"","what":"Naming","title":"Block Repetition — mlr_pipeops_nn_block","text":"generated module graph, IDs modules generated prefixing IDs n_blocks layers ID PipeOpTorchBlock postfixing __<layer>.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Block Repetition — mlr_pipeops_nn_block","text":"parameters available block , well n_blocks :: integer(1) often repeat block.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Block Repetition — mlr_pipeops_nn_block","text":"PipeOp sets input output channels block (Graph) received construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Block Repetition — mlr_pipeops_nn_block","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Block Repetition — mlr_pipeops_nn_block","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchBlock","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Block Repetition — mlr_pipeops_nn_block","text":"block (Graph) neural network segment repeated PipeOp.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Block Repetition — mlr_pipeops_nn_block","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Block Repetition — mlr_pipeops_nn_block","text":"PipeOpTorchBlock$new() PipeOpTorchBlock$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Block Repetition — mlr_pipeops_nn_block","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Repetition — mlr_pipeops_nn_block","text":"","code":"PipeOpTorchBlock$new(block, id = \"nn_block\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block Repetition — mlr_pipeops_nn_block","text":"block (Graph) graph consisting primarily PipeOpTorch objects repeated. id (character(1)) id new object. param_vals (named list()) Parameter values set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Block Repetition — mlr_pipeops_nn_block","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Repetition — mlr_pipeops_nn_block","text":"","code":"PipeOpTorchBlock$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block Repetition — mlr_pipeops_nn_block","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block Repetition — mlr_pipeops_nn_block","text":"","code":"block = po(\"nn_linear\") %>>% po(\"nn_relu\") po_block = po(\"nn_block\", block, nn_linear.out_features = 10L, n_blocks = 3) network = po(\"torch_ingress_num\") %>>% po_block %>>% po(\"nn_head\") %>>% po(\"torch_loss\", t_loss(\"cross_entropy\")) %>>% po(\"torch_optimizer\", t_opt(\"adam\")) %>>% po(\"torch_model_classif\",   batch_size = 50,   epochs = 3)  task = tsk(\"iris\") network$train(task) #> $torch_model_classif.output #> NULL #>"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":null,"dir":"Reference","previous_headings":"","what":"CELU Activation Function — mlr_pipeops_nn_celu","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Applies element-wise, \\(CELU(x) = max(0,x) + min(0, \\alpha * (exp(x \\alpha) - 1))\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Calls torch::nn_celu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"alpha :: numeric(1) alpha value ELU formulation. Default: 1.0 inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchCELU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"PipeOpTorchCELU$new() PipeOpTorchCELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"PipeOpTorchCELU$new(id = \"nn_celu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"PipeOpTorchCELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_celu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_celu\") pipeop #> PipeOp: <nn_celu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1:   alpha ParamDbl  -Inf   Inf     Inf       1 [NULL] #> 2: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Convolution — mlr_pipeops_nn_conv1d","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Applies 1D convolution input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Calls torch::nn_conv1d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"PipeOpTorchConv1D$new() PipeOpTorchConv1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"PipeOpTorchConv1D$new(id = \"nn_conv1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"PipeOpTorchConv1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv1d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv1d> (not trained) #> values: <out_channels=1, kernel_size=10> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(8)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>     10 #> 3:       stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:      padding ParamUty    NA    NA     Inf              0 [NULL] #> 5:     dilation ParamUty    NA    NA     Inf              1 [NULL] #> 6:       groups ParamInt     1   Inf     Inf              1 [NULL] #> 7:         bias ParamLgl    NA    NA       2           TRUE [NULL] #> 8: padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Convolution — mlr_pipeops_nn_conv2d","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Applies 2D convolution input image composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Calls torch::nn_conv2d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"PipeOpTorchConv2D$new() PipeOpTorchConv2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"PipeOpTorchConv2D$new(id = \"nn_conv2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"PipeOpTorchConv2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv2d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv2d> (not trained) #> values: <out_channels=1, kernel_size=10> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(8)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>     10 #> 3:       stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:      padding ParamUty    NA    NA     Inf              0 [NULL] #> 5:     dilation ParamUty    NA    NA     Inf              1 [NULL] #> 6:       groups ParamInt     1   Inf     Inf              1 [NULL] #> 7:         bias ParamLgl    NA    NA       2           TRUE [NULL] #> 8: padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Convolution — mlr_pipeops_nn_conv3d","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Applies 3D convolution input image composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Calls torch::nn_conv3d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"PipeOpTorchConv3D$new() PipeOpTorchConv3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"PipeOpTorchConv3D$new(id = \"nn_conv3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"PipeOpTorchConv3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv3d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv3d> (not trained) #> values: <out_channels=1, kernel_size=10> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(8)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>     10 #> 3:       stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:      padding ParamUty    NA    NA     Inf              0 [NULL] #> 5:     dilation ParamUty    NA    NA     Inf              1 [NULL] #> 6:       groups ParamInt     1   Inf     Inf              1 [NULL] #> 7:         bias ParamLgl    NA    NA       2           TRUE [NULL] #> 8: padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Applies 1D transposed convolution operator input signal composed several input planes, sometimes also called \"deconvolution\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Calls nn_conv_transpose1d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"PipeOpTorchConvTranspose1D$new() PipeOpTorchConvTranspose1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"PipeOpTorchConvTranspose1D$new(id = \"nn_conv_transpose1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"PipeOpTorchConvTranspose1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose1d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose1d> (not trained) #> values: <out_channels=2, kernel_size=3> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(9)> #>                id    class lower upper nlevels        default  value #>            <char>   <char> <num> <num>   <num>         <list> <list> #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>      3 #> 3:         stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:        padding ParamUty    NA    NA     Inf              0 [NULL] #> 5: output_padding ParamUty    NA    NA     Inf              0 [NULL] #> 6:       dilation ParamUty    NA    NA     Inf              1 [NULL] #> 7:         groups ParamInt     1   Inf     Inf              1 [NULL] #> 8:           bias ParamLgl    NA    NA       2           TRUE [NULL] #> 9:   padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Applies 2D transposed convolution operator input image composed several input planes, sometimes also called \"deconvolution\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Calls nn_conv_transpose2d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"PipeOpTorchConvTranspose2D$new() PipeOpTorchConvTranspose2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"PipeOpTorchConvTranspose2D$new(id = \"nn_conv_transpose2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"PipeOpTorchConvTranspose2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose2d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose2d> (not trained) #> values: <out_channels=2, kernel_size=3> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(9)> #>                id    class lower upper nlevels        default  value #>            <char>   <char> <num> <num>   <num>         <list> <list> #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>      3 #> 3:         stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:        padding ParamUty    NA    NA     Inf              0 [NULL] #> 5: output_padding ParamUty    NA    NA     Inf              0 [NULL] #> 6:       dilation ParamUty    NA    NA     Inf              1 [NULL] #> 7:         groups ParamInt     1   Inf     Inf              1 [NULL] #> 8:           bias ParamLgl    NA    NA       2           TRUE [NULL] #> 9:   padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Applies 3D transposed convolution operator input image composed several input planes, sometimes also called \"deconvolution\"","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Calls nn_conv_transpose3d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"PipeOpTorchConvTranspose3D$new() PipeOpTorchConvTranspose3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"PipeOpTorchConvTranspose3D$new(id = \"nn_conv_transpose3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"PipeOpTorchConvTranspose3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose3d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose3d> (not trained) #> values: <out_channels=2, kernel_size=3> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(9)> #>                id    class lower upper nlevels        default  value #>            <char>   <char> <num> <num>   <num>         <list> <list> #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[0]>      2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[0]>      3 #> 3:         stride ParamUty    NA    NA     Inf              1 [NULL] #> 4:        padding ParamUty    NA    NA     Inf              0 [NULL] #> 5: output_padding ParamUty    NA    NA     Inf              0 [NULL] #> 6:       dilation ParamUty    NA    NA     Inf              1 [NULL] #> 7:         groups ParamInt     1   Inf     Inf              1 [NULL] #> 8:           bias ParamLgl    NA    NA       2           TRUE [NULL] #> 9:   padding_mode ParamFct    NA    NA       4          zeros [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropout — mlr_pipeops_nn_dropout","title":"Dropout — mlr_pipeops_nn_dropout","text":"training, randomly zeroes elements input tensor probability p using samples Bernoulli distribution.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Dropout — mlr_pipeops_nn_dropout","text":"Calls torch::nn_dropout() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Dropout — mlr_pipeops_nn_dropout","text":"p :: numeric(1) Probability element zeroed. Default: 0.5. inplace :: logical(1) set TRUE, operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Dropout — mlr_pipeops_nn_dropout","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Dropout — mlr_pipeops_nn_dropout","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Dropout — mlr_pipeops_nn_dropout","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchDropout","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dropout — mlr_pipeops_nn_dropout","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Dropout — mlr_pipeops_nn_dropout","text":"PipeOpTorchDropout$new() PipeOpTorchDropout$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Dropout — mlr_pipeops_nn_dropout","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"PipeOpTorchDropout$new(id = \"nn_dropout\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropout — mlr_pipeops_nn_dropout","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Dropout — mlr_pipeops_nn_dropout","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"PipeOpTorchDropout$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropout — mlr_pipeops_nn_dropout","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_dropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_dropout\") pipeop #> PipeOp: <nn_dropout> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1:       p ParamDbl     0     1     Inf     0.5 [NULL] #> 2: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":null,"dir":"Reference","previous_headings":"","what":"ELU Activation Function — mlr_pipeops_nn_elu","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Applies element-wise, $$ELU(x) = max(0,x) + min(0, \\alpha * (exp(x) - 1))$$.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Calls torch::nn_elu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"alpha :: numeric(1) alpha value ELU formulation. Default: 1.0 inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchELU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"PipeOpTorchELU$new() PipeOpTorchELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"PipeOpTorchELU$new(id = \"nn_elu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"PipeOpTorchELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_elu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_elu\") pipeop #> PipeOp: <nn_elu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1:   alpha ParamDbl  -Inf   Inf     Inf       1 [NULL] #> 2: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flattens a Tensor — mlr_pipeops_nn_flatten","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"use nn_sequential.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"Calls torch::nn_flatten() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"start_dim :: integer(1) wich dimension start flattening. Default 2. end_dim :: integer(1) wich dimension stop flattening. Default -1.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchFlatten","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"PipeOpTorchFlatten$new() PipeOpTorchFlatten$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"PipeOpTorchFlatten$new(id = \"nn_flatten\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"PipeOpTorchFlatten$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_flatten\") pipeop #> PipeOp: <nn_flatten> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>           id    class lower upper nlevels default  value #>       <char>   <char> <int> <num>   <num>  <list> <list> #> 1: start_dim ParamInt     1   Inf     Inf       2 [NULL] #> 2:   end_dim ParamInt     1   Inf     Inf      -1 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":null,"dir":"Reference","previous_headings":"","what":"GELU Activation Function — mlr_pipeops_nn_gelu","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Gelu","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Calls torch::nn_gelu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"approximate :: character(1) Whether use approximation algorithm. Default \"none\".","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchGELU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"PipeOpTorchGELU$new() PipeOpTorchGELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"PipeOpTorchGELU$new(id = \"nn_gelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"PipeOpTorchGELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_gelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_gelu\") pipeop #> PipeOp: <nn_gelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>             id    class lower upper nlevels default  value #>         <char>   <char> <num> <num>   <num>  <list> <list> #> 1: approximate ParamFct    NA    NA       2    none [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":null,"dir":"Reference","previous_headings":"","what":"GLU Activation Function — mlr_pipeops_nn_glu","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"gated linear unit. Computes:","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"Calls torch::nn_glu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"dim :: integer(1) Dimension split input. Default: -1","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchGLU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"PipeOpTorchGLU$new() PipeOpTorchGLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"PipeOpTorchGLU$new(id = \"nn_glu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"PipeOpTorchGLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_glu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_glu\") pipeop #> PipeOp: <nn_glu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels default  value #>    <char>   <char> <int> <num>   <num>  <list> <list> #> 1:    dim ParamInt     1   Inf     Inf      -1 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Applies hard shrinkage function element-wise","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Calls torch::nn_hardshrink() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"lambd :: numeric(1) lambda value Hardshrink formulation formulation. Default 0.5.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"PipeOpTorchHardShrink$new() PipeOpTorchHardShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"PipeOpTorchHardShrink$new(id = \"nn_hardshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"PipeOpTorchHardShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardshrink\") pipeop #> PipeOp: <nn_hardshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels default  value #>    <char>   <char> <num> <num>   <num>  <list> <list> #> 1:  lambd ParamDbl  -Inf   Inf     Inf     0.5 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Applies element-wise function \\(\\mbox{Hardsigmoid}(x) = \\frac{ReLU6(x + 3)}{6}\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Calls torch::nn_hardsigmoid() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"PipeOpTorchHardSigmoid$new() PipeOpTorchHardSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"PipeOpTorchHardSigmoid$new(id = \"nn_hardsigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"PipeOpTorchHardSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardsigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardsigmoid\") pipeop #> PipeOp: <nn_hardsigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Applies HardTanh function element-wise.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Calls torch::nn_hardtanh() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"min_val :: numeric(1) Minimum value linear region range. Default: -1. max_val :: numeric(1) Maximum value linear region range. Default: 1. inplace :: logical(1) Can optionally operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardTanh","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"PipeOpTorchHardTanh$new() PipeOpTorchHardTanh$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"PipeOpTorchHardTanh$new(id = \"nn_hardtanh\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"PipeOpTorchHardTanh$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_hardtanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardtanh\") pipeop #> PipeOp: <nn_hardtanh> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(3)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1: min_val ParamDbl  -Inf   Inf     Inf      -1 [NULL] #> 2: max_val ParamDbl  -Inf   Inf     Inf       1 [NULL] #> 3: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Head — mlr_pipeops_nn_head","title":"Output Head — mlr_pipeops_nn_head","text":"Output head classification regresssion.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output Head — mlr_pipeops_nn_head","text":"method $shapes_out() access task, returns c(NA, NA). PipeOp trained however, model descriptor correct output shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Output Head — mlr_pipeops_nn_head","text":"Calls torch::nn_linear() input output features inferred input shape / task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Output Head — mlr_pipeops_nn_head","text":"bias :: logical(1) Whether use bias. Default TRUE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Output Head — mlr_pipeops_nn_head","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Output Head — mlr_pipeops_nn_head","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Output Head — mlr_pipeops_nn_head","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHead","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Output Head — mlr_pipeops_nn_head","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Output Head — mlr_pipeops_nn_head","text":"PipeOpTorchHead$new() PipeOpTorchHead$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Output Head — mlr_pipeops_nn_head","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"PipeOpTorchHead$new(id = \"nn_head\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Head — mlr_pipeops_nn_head","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Output Head — mlr_pipeops_nn_head","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"PipeOpTorchHead$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Head — mlr_pipeops_nn_head","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_head\") pipeop #> PipeOp: <nn_head> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels default  value #>    <char>   <char> <num> <num>   <num>  <list> <list> #> 1:   bias ParamLgl    NA    NA       2    TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer Normalization — mlr_pipeops_nn_layer_norm","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Applies Layer Normalization last certain number dimensions.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Calls torch::nn_layer_norm() trained. parameter normalized_shape inferred dimensions last dims dimensions input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"dims :: integer(1) number dimensions normalized (starting last dimension). elementwise_affine :: logical(1) Whether learn affine-linear parameters initialized 1 weights 0 biases. default TRUE. eps :: numeric(1) value added denominator numerical stability.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLayerNorm","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"PipeOpTorchLayerNorm$new() PipeOpTorchLayerNorm$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"PipeOpTorchLayerNorm$new(id = \"nn_layer_norm\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"PipeOpTorchLayerNorm$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_layer_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_layer_norm\", dims = 1) pipeop #> PipeOp: <nn_layer_norm> (not trained) #> values: <dims=1> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(3)> #>                    id    class lower upper nlevels        default  value #>                <char>   <char> <num> <num>   <num>         <list> <list> #> 1:               dims ParamInt     1   Inf     Inf <NoDefault[0]>      1 #> 2: elementwise_affine ParamLgl    NA    NA       2           TRUE [NULL] #> 3:                eps ParamDbl     0   Inf     Inf          1e-05 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Applies element-wise, \\(LeakyReLU(x) = max(0, x) + negative_slope * min(0, x)\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Calls torch::nn_leaky_relu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"negative_slope :: numeric(1) Controls angle negative slope. Default: 1e-2. inplace :: logical(1) Can optionally operation -place. Default: ‘FALSE’.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLeakyReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"PipeOpTorchLeakyReLU$new() PipeOpTorchLeakyReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"PipeOpTorchLeakyReLU$new(id = \"nn_leaky_relu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"PipeOpTorchLeakyReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_leaky_relu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_leaky_relu\") pipeop #> PipeOp: <nn_leaky_relu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>                id    class lower upper nlevels default  value #>            <char>   <char> <num> <num>   <num>  <list> <list> #> 1: negative_slope ParamDbl  -Inf   Inf     Inf    0.01 [NULL] #> 2:        inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Layer — mlr_pipeops_nn_linear","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Applies linear transformation incoming data: \\(y = xA^T + b\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Calls torch::nn_linear() trained parameter in_features inferred second last dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Linear Layer — mlr_pipeops_nn_linear","text":"out_features :: integer(1) output features linear layer. bias :: logical(1) Whether use bias. Default TRUE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Linear Layer — mlr_pipeops_nn_linear","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Linear Layer — mlr_pipeops_nn_linear","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Linear Layer — mlr_pipeops_nn_linear","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLinear","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Linear Layer — mlr_pipeops_nn_linear","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Linear Layer — mlr_pipeops_nn_linear","text":"PipeOpTorchLinear$new() PipeOpTorchLinear$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"PipeOpTorchLinear$new(id = \"nn_linear\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Layer — mlr_pipeops_nn_linear","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Linear Layer — mlr_pipeops_nn_linear","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"PipeOpTorchLinear$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Layer — mlr_pipeops_nn_linear","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_linear\", out_features = 10) pipeop #> PipeOp: <nn_linear> (not trained) #> values: <out_features=10> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1: out_features ParamInt     1   Inf     Inf <NoDefault[0]>     10 #> 2:         bias ParamLgl    NA    NA       2           TRUE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Applies element-wise \\(LogSigmoid(x_i) = log(\\frac{1}{1 + exp(-x_i)})\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Calls torch::nn_log_sigmoid() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLogSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"PipeOpTorchLogSigmoid$new() PipeOpTorchLogSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"PipeOpTorchLogSigmoid$new(id = \"nn_log_sigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"PipeOpTorchLogSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_log_sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_log_sigmoid\") pipeop #> PipeOp: <nn_log_sigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Applies 1D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Calls torch::nn_max_pool1d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool1D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"PipeOpTorchMaxPool1D$new() PipeOpTorchMaxPool1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"PipeOpTorchMaxPool1D$new(   id = \"nn_max_pool1d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"PipeOpTorchMaxPool1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool1d\") pipeop #> PipeOp: <nn_max_pool1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(5)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:     padding ParamUty    NA    NA     Inf              0 [NULL] #> 3:      stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 4:    dilation ParamInt  -Inf   Inf     Inf              1 [NULL] #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Applies 2D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Calls torch::nn_max_pool2d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool2D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"PipeOpTorchMaxPool2D$new() PipeOpTorchMaxPool2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"PipeOpTorchMaxPool2D$new(   id = \"nn_max_pool2d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"PipeOpTorchMaxPool2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool2d\") pipeop #> PipeOp: <nn_max_pool2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(5)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:     padding ParamUty    NA    NA     Inf              0 [NULL] #> 3:      stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 4:    dilation ParamInt  -Inf   Inf     Inf              1 [NULL] #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Applies 3D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Calls torch::nn_max_pool3d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool3D","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"PipeOpTorchMaxPool3D$new() PipeOpTorchMaxPool3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"PipeOpTorchMaxPool3D$new(   id = \"nn_max_pool3d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"PipeOpTorchMaxPool3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_max_pool3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool3d\") pipeop #> PipeOp: <nn_max_pool3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(5)> #>             id    class lower upper nlevels        default  value #>         <char>   <char> <num> <num>   <num>         <list> <list> #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:     padding ParamUty    NA    NA     Inf              0 [NULL] #> 3:      stride ParamUty    NA    NA     Inf         [NULL] [NULL] #> 4:    dilation ParamInt  -Inf   Inf     Inf              1 [NULL] #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Operation — mlr_pipeops_nn_merge","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Base class merge operations addition (PipeOpTorchMergeSum), multiplication (PipeOpTorchMergeProd concatenation (PipeOpTorchMergeCat).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge Operation — mlr_pipeops_nn_merge","text":"See respective child class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge Operation — mlr_pipeops_nn_merge","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge Operation — mlr_pipeops_nn_merge","text":"PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Per default, private$.shapes_out() method outputs broadcasted tensors. two things aware: NAs assumed batch (almost always batch size first dimension). Tensors expected number dimensions, .e. missing dimensions filled 1s. reason first dimension batch dimension. private method can overwritten PipeOpTorchs inheriting class.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge Operation — mlr_pipeops_nn_merge","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchMerge","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge Operation — mlr_pipeops_nn_merge","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge Operation — mlr_pipeops_nn_merge","text":"PipeOpTorchMerge$new() PipeOpTorchMerge$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Operation — mlr_pipeops_nn_merge","text":"","code":"PipeOpTorchMerge$new(   id,   module_generator,   param_set = ps(),   innum = 0,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Operation — mlr_pipeops_nn_merge","text":"id (character(1)) Identifier resulting  object. module_generator (nn_module_generator) torch module generator. param_set (ParamSet) parameter set. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge Operation — mlr_pipeops_nn_merge","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Operation — mlr_pipeops_nn_merge","text":"","code":"PipeOpTorchMerge$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Operation — mlr_pipeops_nn_merge","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Concatenates multiple tensors given dimension. broadcasting rules applied , must reshape tensors shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Calls nn_merge_cat() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"dim :: integer(1) dimension along concatenate tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeCat","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"PipeOpTorchMergeCat$new() PipeOpTorchMergeCat$speak() PipeOpTorchMergeCat$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$new(id = \"nn_merge_cat\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"method-speak-","dir":"Reference","previous_headings":"","what":"Method speak()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"cat say?","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$speak()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_cat\") pipeop #> PipeOp: <nn_merge_cat> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels default  value #>    <char>   <char> <num> <num>   <num>  <list> <list> #> 1:    dim ParamInt  -Inf   Inf     Inf      -1 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Product — mlr_pipeops_nn_merge_prod","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Calculates product input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Calls nn_merge_prod() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeProd","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"PipeOpTorchMergeProd$new() PipeOpTorchMergeProd$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"PipeOpTorchMergeProd$new(id = \"nn_merge_prod\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"PipeOpTorchMergeProd$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_prod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_prod\") pipeop #> PipeOp: <nn_merge_prod> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Summation — mlr_pipeops_nn_merge_sum","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Calculates sum input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Calls nn_merge_sum() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeSum","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"PipeOpTorchMergeSum$new() PipeOpTorchMergeSum$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"PipeOpTorchMergeSum$new(id = \"nn_merge_sum\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"PipeOpTorchMergeSum$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_merge_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_sum\") pipeop #> PipeOp: <nn_merge_sum> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":null,"dir":"Reference","previous_headings":"","what":"PReLU Activation Function — mlr_pipeops_nn_prelu","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Applies element-wise function \\(PReLU(x) = max(0,x) + weight * min(0,x)\\) weight learnable parameter.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Calls torch::nn_prelu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"num_parameters :: integer(1): Number learn. Although takes int input, two values legitimate: 1, number channels input. Default: 1. init :: numeric(1) T initial value . Default: 0.25.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchPReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"PipeOpTorchPReLU$new() PipeOpTorchPReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"PipeOpTorchPReLU$new(id = \"nn_prelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"PipeOpTorchPReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_prelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_prelu\") pipeop #> PipeOp: <nn_prelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>                id    class lower upper nlevels default  value #>            <char>   <char> <num> <num>   <num>  <list> <list> #> 1: num_parameters ParamInt     1   Inf     Inf       1 [NULL] #> 2:           init ParamDbl  -Inf   Inf     Inf    0.25 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":null,"dir":"Reference","previous_headings":"","what":"ReLU Activation Function — mlr_pipeops_nn_relu","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Applies rectified linear unit function element-wise.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Calls torch::nn_relu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"PipeOpTorchReLU$new() PipeOpTorchReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"PipeOpTorchReLU$new(id = \"nn_relu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"PipeOpTorchReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_relu\") pipeop #> PipeOp: <nn_relu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":null,"dir":"Reference","previous_headings":"","what":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Applies element-wise function \\(ReLU6(x) = min(max(0,x), 6)\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Calls torch::nn_relu6() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReLU6","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"PipeOpTorchReLU6$new() PipeOpTorchReLU6$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"PipeOpTorchReLU6$new(id = \"nn_relu6\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"PipeOpTorchReLU6$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_relu6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_relu6\") pipeop #> PipeOp: <nn_relu6> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape a Tensor — mlr_pipeops_nn_reshape","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Reshape tensor given shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Calls nn_reshape() trained. internally calls torch::torch_reshape() given shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"shape :: integer(1) desired output shape. Unknown dimension (one ) can either specified -1 NA.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReshape","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"PipeOpTorchReshape$new() PipeOpTorchReshape$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"PipeOpTorchReshape$new(id = \"nn_reshape\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"PipeOpTorchReshape$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_reshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_reshape\") pipeop #> PipeOp: <nn_reshape> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels        default  value #>    <char>   <char> <num> <num>   <num>         <list> <list> #> 1:  shape ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":null,"dir":"Reference","previous_headings":"","what":"RReLU Activation Function — mlr_pipeops_nn_rrelu","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Randomized leaky ReLU.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Calls torch::nn_rrelu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"lower:: numeric(1) Lower bound uniform distribution. Default: 1/8. upper:: numeric(1) Upper bound uniform distribution. Default: 1/3. inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchRReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"PipeOpTorchRReLU$new() PipeOpTorchRReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"PipeOpTorchRReLU$new(id = \"nn_rrelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"PipeOpTorchRReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_rrelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_rrelu\") pipeop #> PipeOp: <nn_rrelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(3)> #>         id    class lower upper nlevels   default  value #>     <char>   <char> <num> <num>   <num>    <list> <list> #> 1:   lower ParamDbl  -Inf   Inf     Inf     0.125 [NULL] #> 2:   upper ParamDbl  -Inf   Inf     Inf 0.3333333 [NULL] #> 3: inplace ParamLgl    NA    NA       2     FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":null,"dir":"Reference","previous_headings":"","what":"SELU Activation Function — mlr_pipeops_nn_selu","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Applies element-wise, $$SELU(x) = scale * (max(0,x) + min(0, \\alpha * (exp(x) - 1)))$$, \\(\\alpha=1.6732632423543772848170429916717\\) \\(scale=1.0507009873554804934193349852946\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Calls torch::nn_selu() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSELU","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"PipeOpTorchSELU$new() PipeOpTorchSELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"PipeOpTorchSELU$new(id = \"nn_selu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"PipeOpTorchSELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_selu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_selu\") pipeop #> PipeOp: <nn_selu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>         id    class lower upper nlevels default  value #>     <char>   <char> <num> <num>   <num>  <list> <list> #> 1: inplace ParamLgl    NA    NA       2   FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Applies element-wise \\(Sigmoid(x_i) = \\frac{1}{1 + exp(-x_i)}\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Calls torch::nn_sigmoid() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"PipeOpTorchSigmoid$new() PipeOpTorchSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"PipeOpTorchSigmoid$new(id = \"nn_sigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"PipeOpTorchSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_sigmoid\") pipeop #> PipeOp: <nn_sigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax — mlr_pipeops_nn_softmax","title":"Softmax — mlr_pipeops_nn_softmax","text":"Applies softmax function.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Softmax — mlr_pipeops_nn_softmax","text":"Calls torch::nn_softmax() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Softmax — mlr_pipeops_nn_softmax","text":"dim :: integer(1) dimension along Softmax computed (every slice along dim sum 1).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Softmax — mlr_pipeops_nn_softmax","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Softmax — mlr_pipeops_nn_softmax","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Softmax — mlr_pipeops_nn_softmax","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftmax","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Softmax — mlr_pipeops_nn_softmax","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Softmax — mlr_pipeops_nn_softmax","text":"PipeOpTorchSoftmax$new() PipeOpTorchSoftmax$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Softmax — mlr_pipeops_nn_softmax","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"PipeOpTorchSoftmax$new(id = \"nn_softmax\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax — mlr_pipeops_nn_softmax","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Softmax — mlr_pipeops_nn_softmax","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"PipeOpTorchSoftmax$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax — mlr_pipeops_nn_softmax","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softmax\") pipeop #> PipeOp: <nn_softmax> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels        default  value #>    <char>   <char> <int> <num>   <num>         <list> <list> #> 1:    dim ParamInt     1   Inf     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":null,"dir":"Reference","previous_headings":"","what":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Applies element-wise, function \\(Softplus(x) = 1/\\beta * log(1 + exp(\\beta * x))\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Calls torch::nn_softplus() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"beta :: numeric(1) beta value Softplus formulation. Default: 1 threshold :: numeric(1) Values revert linear function. Default: 20","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftPlus","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"PipeOpTorchSoftPlus$new() PipeOpTorchSoftPlus$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"PipeOpTorchSoftPlus$new(id = \"nn_softplus\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"PipeOpTorchSoftPlus$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softplus\") pipeop #> PipeOp: <nn_softplus> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(2)> #>           id    class lower upper nlevels default  value #>       <char>   <char> <num> <num>   <num>  <list> <list> #> 1:      beta ParamDbl  -Inf   Inf     Inf       1 [NULL] #> 2: threshold ParamDbl  -Inf   Inf     Inf      20 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Applies soft shrinkage function elementwise","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Calls torch::nn_softshrink() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"lamd :: numeric(1) lambda (must less zero) value Softshrink formulation. Default: 0.5","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"PipeOpTorchSoftShrink$new() PipeOpTorchSoftShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"PipeOpTorchSoftShrink$new(id = \"nn_softshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"PipeOpTorchSoftShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softshrink\") pipeop #> PipeOp: <nn_softshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels default  value #>    <char>   <char> <num> <num>   <num>  <list> <list> #> 1:  lambd ParamDbl  -Inf     1     Inf     0.5 [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":null,"dir":"Reference","previous_headings":"","what":"SoftSign Activation Function — mlr_pipeops_nn_softsign","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Applies element-wise, function \\(SoftSign(x) = x/(1 + |x|\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Calls torch::nn_softsign() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftSign","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"PipeOpTorchSoftSign$new() PipeOpTorchSoftSign$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"PipeOpTorchSoftSign$new(id = \"nn_softsign\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"PipeOpTorchSoftSign$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_softsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softsign\") pipeop #> PipeOp: <nn_softsign> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Squeezes tensor calling torch::torch_squeeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Calls nn_squeeze() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"dim :: integer(1) dimension squeeze. NULL, dimensions size 1 squeezed. Negative values interpreted downwards last dimension.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSqueeze","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"PipeOpTorchSqueeze$new() PipeOpTorchSqueeze$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchSqueeze$new(id = \"nn_squeeze\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchSqueeze$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_squeeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_squeeze\") pipeop #> PipeOp: <nn_squeeze> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels        default  value #>    <char>   <char> <num> <num>   <num>         <list> <list> #> 1:    dim ParamUty    NA    NA     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":null,"dir":"Reference","previous_headings":"","what":"Tanh Activation Function — mlr_pipeops_nn_tanh","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Applies element-wise function:","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Calls torch::nn_tanh() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchTanh","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"PipeOpTorchTanh$new() PipeOpTorchTanh$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"PipeOpTorchTanh$new(id = \"nn_tanh\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"PipeOpTorchTanh$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_tanh\") pipeop #> PipeOp: <nn_tanh> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Applies element-wise, \\(Tanhshrink(x) = x - Tanh(x)\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Calls torch::nn_tanhshrink() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchTanhShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"PipeOpTorchTanhShrink$new() PipeOpTorchTanhShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"PipeOpTorchTanhShrink$new(id = \"nn_tanhshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"PipeOpTorchTanhShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_tanhshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_tanhshrink\") pipeop #> PipeOp: <nn_tanhshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(0)> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Treshold Activation Function — mlr_pipeops_nn_threshold","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Thresholds element input Tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Calls torch::nn_threshold() trained.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"threshold :: numeric(1) value threshold . value :: numeric(1) value replace . inplace :: logical(1) Can optionally operation -place. Default: ‘FALSE’.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchThreshold","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"PipeOpTorchThreshold$new() PipeOpTorchThreshold$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"PipeOpTorchThreshold$new(id = \"nn_threshold\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"PipeOpTorchThreshold$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_threshold\", threshold = 1, value = 2) pipeop #> PipeOp: <nn_threshold> (not trained) #> values: <threshold=1, value=2> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(3)> #>           id    class lower upper nlevels        default  value #>       <char>   <char> <num> <num>   <num>         <list> <list> #> 1: threshold ParamDbl  -Inf   Inf     Inf <NoDefault[0]>      1 #> 2:     value ParamDbl  -Inf   Inf     Inf <NoDefault[0]>      2 #> 3:   inplace ParamLgl    NA    NA       2          FALSE [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"Unsqueezes tensor calling torch::torch_unsqueeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"nn-module","dir":"Reference","previous_headings":"","what":"nn_module","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"Calls nn_unsqueeze() trained. internally calls torch::torch_unsqueeze().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"dim :: integer(1) dimension unsqueeze. Negative values interpreted downwards last dimension.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"state value calculated public method $shapes_out().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchUnsqueeze","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"PipeOpTorchUnsqueeze$new() PipeOpTorchUnsqueeze$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"","code":"PipeOpTorchUnsqueeze$new(id = \"nn_unsqueeze\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"","code":"PipeOpTorchUnsqueeze$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_nn_unsqueeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unqueeze a Tensor — mlr_pipeops_nn_unsqueeze","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_unsqueeze\") pipeop #> PipeOp: <nn_unsqueeze> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet(1)> #>        id    class lower upper nlevels        default  value #>    <char>   <char> <num> <num>   <num>         <list> <list> #> 1:    dim ParamInt  -Inf   Inf     Inf <NoDefault[0]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"PipeOp can used preprocess (one ) lazy_tensor columns contained mlr3::Task. preprocessing function specified construction argument fn additional arguments function can defined PipeOp's parameter set. preprocessing done per column, .e. number lazy tensor output columns equal number lazy tensor input columns. create custom preprocessing PipeOps can use pipeop_preproc_torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"addition specifying construction arguments, can overwrite private .shapes_out() method. overwrite , output shapes assumed unknown (NULL). .shapes_out(shapes_in, param_vals, task) (list(), list(), TaskorNULL) -> list()\\cr private method calculates output shapes lazy tensor columns created applying preprocessing function provided parameter values (param_vals). taskis rarely needed, checked notNULL`. private method responsibility calculate output shapes one input column, .e. input shapes_in can assumed exactly one shape vector must calculate output shapes return list() length 1. can also assumed shape NULL (.e. unknown). Also, first dimension can NA, .e. unknown (batch dimension).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"See PipeOpTaskPreproc.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"addition state elements PipeOpTaskPreprocSimple, state also contains $param_vals set training.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"addition parameters inherited PipeOpTaskPreproc well specified construction argument param_set following parameters: stages :: character(1) stages apply preprocessing. Can one \"train\", \"predict\" \"\". initial value parameter set \"train\" PipeOp's id starts \"augment_\" \"\" otherwise. Note preprocessing applied $predict() uses parameters set $train() set performing prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"$train() / $predict(), PipeOpModule one input one output channel created. pipeop applies function fn input tensor additionally passing parameter values (minus stages affect_columns) fn. preprocessing graph lazy tensor columns shallowly cloned PipeOpModule added. done avoid modifying user input means identical PipeOpModules can part different preprocessing graphs. possible, created PipeOpModule stateless. later point graph, preprocessing graphs merged possible avoid unnecessary computation. best illustrated example: One lazy tensor column's preprocessing graph -> B. , two branches created B -> C B -> D, creating two preprocessing graphs -> B -> C -> B -> D. loading data, want run preprocessing , .e. want run -> B part twice. reason, task_dataset() try merge graphs cache results graphs. However, graphs using dataset can currently merged. Also, shapes created $train() $predict() might differ. avoid creation graphs predict shapes incompatible train shapes, hypothetical predict shapes already calculated $train() (parameters set train also used predict) PipeOpTorchModel check train predict shapes compatibility starting training. Otherwise, mechanism similar ModelDescriptor construct.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"mlr3pipelines::PipeOp -> mlr3pipelines::PipeOpTaskPreproc -> PipeOpTaskPreprocTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"fn preprocessing function. rowwise Whether preprocessing applied rowwise.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"PipeOpTaskPreprocTorch$new() PipeOpTaskPreprocTorch$shapes_out() PipeOpTaskPreprocTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"","code":"PipeOpTaskPreprocTorch$new(   fn,   id = \"preproc_torch\",   param_vals = list(),   param_set = ps(),   packages = character(0),   rowwise = FALSE,   stages_init = NULL,   tags = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"fn (function character(2)) preprocessing function. Must modify input -place. character(2), first element namespace second element name. preprocessing function applied tensor, tensor passed position first argument. param_set inferred (left NULL) assumed first argument torch_tensor. id (character(1)) id new object. param_vals (named list()) Parameter values set construction. param_set (ParamSet) case function fn takes additional parameter besides torch_tensor can specfied parameters. None parameters can \"predict\" tag. tags include \"train\". packages (character()) packages preprocessing function depends . rowwise (logical(1)) Whether preprocessing function applied rowwise (concatenated row) directly whole tensor. first case batch dimension. stages_init (character(1)) Initial value stages parameter. tags (character()) Tags pipeop.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"method-shapes-out-","dir":"Reference","previous_headings":"","what":"Method shapes_out()","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"Calculates output shapes result applying preprocessing one lazy tensor columns provided shape. Names ignored order matters. uses parameter values currently set.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"","code":"PipeOpTaskPreprocTorch$shapes_out(shapes_in, stage = NULL, task = NULL)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"shapes_in (list() (integer() NULL)) input input shapes lazy tensors. NULL indicates shape unknown. First dimension must NA (NULL). stage (character(1)) stage: either \"train\" \"predict\". task (Task NULL) task, rarely needed.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"list() (integer() NULL)","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"","code":"PipeOpTaskPreprocTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_preproc_torch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Class for Lazy Tensor Preprocessing — mlr_pipeops_preproc_torch","text":"","code":"# Creating a simple task d = data.table(   x1 = as_lazy_tensor(rnorm(10)),   x2 = as_lazy_tensor(rnorm(10)),   x3 = as_lazy_tensor(as.double(1:10)),   y = rnorm(10) )  taskin = as_task_regr(d, target = \"y\")  # Creating a simple preprocessing pipeop po_simple = po(\"preproc_torch\",   # get rid of environment baggage   fn = mlr3misc::crate(function(x, a) x + a),   param_set = paradox::ps(a = paradox::p_int(tags = c(\"train\", \"required\"))) )  po_simple$param_set$set_values(   a = 100,   affect_columns = selector_name(c(\"x1\", \"x2\")),   stages = \"both\" # use during train and predict )  taskout_train = po_simple$train(list(taskin))[[1L]] materialize(taskout_train$data(cols = c(\"x1\", \"x2\")), rbind = TRUE) #> $x1 #> torch_tensor #>  100.8678 #>  100.6844 #>   99.8373 #>   98.2156 #>   98.9629 #>  100.8301 #>  100.6073 #>   99.8778 #>  100.9331 #>   99.0387 #> [ CPUFloatType{10,1} ] #>  #> $x2 #> torch_tensor #>  100.2551 #>   99.4546 #>  100.9304 #>   99.4623 #>   99.5476 #>   99.5607 #>   99.3838 #>  100.4416 #>  100.4826 #>  100.5421 #> [ CPUFloatType{10,1} ] #>   taskout_predict_noaug = po_simple$predict(list(taskin))[[1L]] materialize(taskout_predict_noaug$data(cols = c(\"x1\", \"x2\")), rbind = TRUE) #> $x1 #> torch_tensor #>  100.8678 #>  100.6844 #>   99.8373 #>   98.2156 #>   98.9629 #>  100.8301 #>  100.6073 #>   99.8778 #>  100.9331 #>   99.0387 #> [ CPUFloatType{10,1} ] #>  #> $x2 #> torch_tensor #>  100.2551 #>   99.4546 #>  100.9304 #>   99.4623 #>   99.5476 #>   99.5607 #>   99.3838 #>  100.4416 #>  100.4826 #>  100.5421 #> [ CPUFloatType{10,1} ] #>   po_simple$param_set$set_values(   stages = \"train\" )  # transformation is not applied taskout_predict_aug = po_simple$predict(list(taskin))[[1L]] materialize(taskout_predict_aug$data(cols = c(\"x1\", \"x2\")), rbind = TRUE) #> $x1 #> torch_tensor #>  100.8678 #>  100.6844 #>   99.8373 #>   98.2156 #>   98.9629 #>  100.8301 #>  100.6073 #>   99.8778 #>  100.9331 #>   99.0387 #> [ CPUFloatType{10,1} ] #>  #> $x2 #> torch_tensor #>  100.2551 #>   99.4546 #>  100.9304 #>   99.4623 #>   99.5476 #>   99.5607 #>   99.3838 #>  100.4416 #>  100.4826 #>  100.5421 #> [ CPUFloatType{10,1} ] #>   # Creating a more complex preprocessing PipeOp PipeOpPreprocTorchPoly = R6::R6Class(\"PipeOpPreprocTorchPoly\",  inherit = PipeOpTaskPreprocTorch,  public = list(    initialize = function(id = \"preproc_poly\", param_vals = list()) {      param_set = paradox::ps(        n_degree = paradox::p_int(lower = 1L, tags = c(\"train\", \"required\"))      )      param_set$set_values(        n_degree = 1L      )      fn = mlr3misc::crate(function(x, n_degree) {        torch::torch_cat(          lapply(seq_len(n_degree), function(d) torch::torch_pow(x, d)),          dim = 2L        )      })       super$initialize(        fn = fn,        id = id,        packages = character(0),        param_vals = param_vals,        param_set = param_set,        stages_init = \"both\"      )    }  ),  private = list(    .shapes_out = function(shapes_in, param_vals, task) {      # shapes_in is a list of length 1 containing the shapes      checkmate::assert_true(length(shapes_in[[1L]]) == 2L)      if (shapes_in[[1L]][2L] != 1L) {        stop(\"Input shape must be (NA, 1)\")      }      list(c(NA, param_vals$n_degree))    }  ) )  po_poly = PipeOpPreprocTorchPoly$new(   param_vals = list(n_degree = 3L, affect_columns = selector_name(\"x3\")) )  po_poly$shapes_out(list(c(NA, 1L)), stage = \"train\") #> [[1]] #> [1] NA  3 #>   taskout = po_poly$train(list(taskin))[[1L]] materialize(taskout$data(cols = \"x3\"), rbind = TRUE) #> $x3 #> torch_tensor #>     1     1     1 #>     2     4     8 #>     3     9    27 #>     4    16    64 #>     5    25   125 #>     6    36   216 #>     7    49   343 #>     8    64   512 #>     9    81   729 #>    10   100  1000 #> [ CPUFloatType{10,3} ] #>"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"PipeOpTorch base class PipeOps represent neural network layers Graph. training, generates PipeOpModule wraps nn_module attaches architecture, also represented Graph consisting mostly PipeOpModules PipeOpNOPs. former Graph operates ModelDescriptors, latter operates tensors. relationship PipeOpTorch PipeOpModule similar relationshop nn_module_generator (like nn_linear) nn_module (like output nn_linear(...)). crucial difference PipeOpTorch infers auxiliary parameters (like in_features nn_linear) automatically intermediate tensor shapes communicated ModelDescriptor. prediction, PipeOpTorch takes Task channel outputs new Task resulting feature union channel. one input output channel, task simply piped .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"ParamSet specified child class inheriting PipeOpTorch. Usually parameters arguments wrapped nn_module minus auxiliary parameter can automatically inferred shapes input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"inheriting class, one overload either private$.shapes_out() private$.shape_dependent_params() methods, overload private$.make_module(). .make_module(shapes_in, param_vals, task) (list(), list()) -> nn_module private method called generated nn_module passed argument module PipeOpModule. must overwritten, module_generator provided. left , calls provided module_generator arguments obtained private method .shape_dependent_params(). .shapes_out(shapes_in, param_vals, task) (list(), list(), Task NULL) -> named list() private method gets list numeric vectors (shapes_in), parameter values (param_vals), well (optional) Task. shapes_in can assumed order input names PipeOp. output shapes must order output names PipeOp. case output shapes depends task (case PipeOpTorchHead), function return valid output shapes (possibly containing NAs) task argument provided . .shape_dependent_params(shapes_in, param_vals, task) (list(), list()) -> named list() private method inputs .shapes_out. .make_module() overwritten, constructs arguments passed module_generator. Usually means must infer auxiliary parameters can inferred input shapes add user-supplied parameter values (param_vals).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"training, inputs outputs class ModelDescriptor. prediction, input output channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"training, PipeOpTorch creates PipeOpModule given parameter specification input shapes incoming ModelDescriptors using private method .make_module(). input shapes provided slot pointer_shape incoming ModelDescriptors. channel names PipeOpModule identical channel names generating PipeOpTorch. model descriptor union incoming ModelDescriptors created. Note modifies graph first ModelDescriptor place efficiency. PipeOpModule added graph slot union edges connect sending PipeOpModules input channel PipeOpModule addeded graph. possible every incoming ModelDescriptor contains information id channel name sending PipeOp slot pointer. new graph model_descriptor_union represents current state neural network architecture. structurally similar subgraph consists pipeops class PipeOpTorch PipeOpTorchIngress ancestors PipeOpTorch. output, shallow copy ModelDescriptor created pointer pointer_shape updated accordingly. shallow copy means ModelDescriptors point Graph allows graph modified -reference different parts code.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"mlr3pipelines::PipeOp -> PipeOpTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"module_generator (nn_module_generator NULL) module generator wrapped PipeOpTorch. NULL, private method private$.make_module(shapes_in, param_vals) must overwritte, see section 'Inheriting'. change construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"PipeOpTorch$new() PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"PipeOpTorch$new(   id,   module_generator,   param_set = ps(),   param_vals = list(),   inname = \"input\",   outname = \"output\",   packages = \"torch\",   tags = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"id (character(1)) Identifier resulting  object. module_generator (nn_module_generator) torch module generator. param_set (ParamSet) parameter set. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. inname (character()) names PipeOp's input channels. input channels generated PipeOpModule. Unless wrapped module_generator's forward method (present) argument ..., inname must identical argument names order avoid ambiguity. forward method argument ..., order input channels determines tensors passed wrapped nn_module. left NULL (default), argument module_generator must given argument names modue_generator's forward function set inname. outname (character())  names output channels channels. ouput channels generated PipeOpModule therefore also names list returned $train(). case one output channel, nn_module constructed PipeOp training must return named list(), names list names output channels. default \"output\". packages (character()) R packages object depends . tags (character()) tags PipeOp. tags \"torch\" always added.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"method-shapes-out-","dir":"Reference","previous_headings":"","what":"Method shapes_out()","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"Calculates output shapes given input shapes, parameters task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"PipeOpTorch$shapes_out(shapes_in, task = NULL)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"shapes_in (list() integer()) input input shapes, must order input channel names PipeOp. task (Task NULL) task, rarely used (default NULL). exception PipeOpTorchHead.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"named list() containing output shapes. names names output channels PipeOp.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"## Creating a neural network # In torch  task = tsk(\"iris\")  network_generator = torch::nn_module(   initialize = function(task, d_hidden) {     d_in = length(task$feature_names)     self$linear = torch::nn_linear(d_in, d_hidden)     self$output = if (task$task_type == \"regr\") {       torch::nn_linear(d_hidden, 1)     } else if (task$task_type == \"classif\") {       torch::nn_linear(d_hidden, length(task$class_names))     }   },   forward = function(x) {     x = self$linear(x)     x = torch::nnf_relu(x)     self$output(x)   } )  network = network_generator(task, d_hidden = 50) x = torch::torch_tensor(as.matrix(task$data(1, task$feature_names))) y = torch::with_no_grad(network(x))   # In mlr3torch network_generator = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 50) %>>%   po(\"nn_head\") md = network_generator$train(task)[[1L]] network = model_descriptor_to_module(md) y = torch::with_no_grad(network(torch_ingress_num.input = x))    ## Implementing a custom PipeOpTorch  # defining a custom module nn_custom = nn_module(\"nn_custom\",   initialize = function(d_in1, d_in2, d_out1, d_out2, bias = TRUE) {     self$linear1 = nn_linear(d_in1, d_out1, bias)     self$linear2 = nn_linear(d_in2, d_out2, bias)   },   forward = function(input1, input2) {     output1 = self$linear1(input1)     output2 = self$linear1(input2)      list(output1 = output1, output2 = output2)   } )  # wrapping the module into a custom PipeOpTorch  library(paradox)  PipeOpTorchCustom = R6::R6Class(\"PipeOpTorchCustom\",   inherit = PipeOpTorch,   public = list(     initialize = function(id = \"nn_custom\", param_vals = list()) {       param_set = ps(         d_out1 = p_int(lower = 1, tags = c(\"required\", \"train\")),         d_out2 = p_int(lower = 1, tags = c(\"required\", \"train\")),         bias = p_lgl(default = TRUE, tags = \"train\")       )       super$initialize(         id = id,         param_vals = param_vals,         param_set = param_set,         inname = c(\"input1\", \"input2\"),         outname = c(\"output1\", \"output2\"),         module_generator = nn_custom       )     }   ),   private = list(     .shape_dependent_params = function(shapes_in, param_vals, task) {       c(param_vals,         list(d_in1 = tail(shapes_in[[\"input1\"]], 1)), d_in2 = tail(shapes_in[[\"input2\"]], 1)       )     },     .shapes_out = function(shapes_in, param_vals, task) {       list(         input1 = c(head(shapes_in[[\"input1\"]], -1), param_vals$d_out1),         input2 = c(head(shapes_in[[\"input2\"]], -1), param_vals$d_out2)       )     }   ) )  ## Training  # generate input task = tsk(\"iris\") task1 = task$clone()$select(paste0(\"Sepal.\", c(\"Length\", \"Width\"))) task2 = task$clone()$select(paste0(\"Petal.\", c(\"Length\", \"Width\"))) graph = gunion(list(po(\"torch_ingress_num_1\"), po(\"torch_ingress_num_2\"))) mds_in = graph$train(list(task1, task2), single_input = FALSE)  mds_in[[1L]][c(\"graph\", \"task\", \"ingress\", \"pointer\", \"pointer_shape\")] #> $graph #> Graph with 1 PipeOps: #>                   ID         State sccssors prdcssors #>               <char>        <char>   <char>    <char> #>  torch_ingress_num_1 <<UNTRAINED>>                    #>  #> $task #> <TaskClassif:iris> (150 x 3): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (2): #>   - dbl (2): Sepal.Length, Sepal.Width #>  #> $ingress #> $ingress$torch_ingress_num_1.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #>  #> $pointer #> [1] \"torch_ingress_num_1\" \"output\"              #>  #> $pointer_shape #> [1] NA  2 #>  mds_in[[2L]][c(\"graph\", \"task\", \"ingress\", \"pointer\", \"pointer_shape\")] #> $graph #> Graph with 1 PipeOps: #>                   ID         State sccssors prdcssors #>               <char>        <char>   <char>    <char> #>  torch_ingress_num_2 <<UNTRAINED>>                    #>  #> $task #> <TaskClassif:iris> (150 x 3): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (2): #>   - dbl (2): Petal.Length, Petal.Width #>  #> $ingress #> $ingress$torch_ingress_num_2.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) #>  #>  #> $pointer #> [1] \"torch_ingress_num_2\" \"output\"              #>  #> $pointer_shape #> [1] NA  2 #>   # creating the PipeOpTorch and training it po_torch = PipeOpTorchCustom$new() po_torch$param_set$values = list(d_out1 = 10, d_out2 = 20) train_input = list(input1 = mds_in[[1L]], input2 = mds_in[[2L]]) mds_out = do.call(po_torch$train, args = list(input = train_input)) po_torch$state #> $output1 #> [1] NA 10 #>  #> $output2 #> [1] NA 20 #>   # the new model descriptors  # the resulting graphs are identical identical(mds_out[[1L]]$graph, mds_out[[2L]]$graph) #> [1] TRUE # not that as a side-effect, also one of the input graphs is modified in-place for efficiency mds_in[[1L]]$graph$edges #>                 src_id src_channel    dst_id dst_channel #>                 <char>      <char>    <char>      <char> #> 1: torch_ingress_num_1      output nn_custom      input1 #> 2: torch_ingress_num_2      output nn_custom      input2  # The new task has both Sepal and Petal features identical(mds_out[[1L]]$task, mds_out[[2L]]$task) #> [1] TRUE mds_out[[2L]]$task #> <TaskClassif:iris> (150 x 5): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width  # The new ingress slot contains all ingressors identical(mds_out[[1L]]$ingress, mds_out[[2L]]$ingress) #> [1] TRUE mds_out[[1L]]$ingress #> $torch_ingress_num_1.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #> $torch_ingress_num_2.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) #>   # The pointer and pointer_shape slots are different mds_out[[1L]]$pointer #> [1] \"nn_custom\" \"output1\"   mds_out[[2L]]$pointer #> [1] \"nn_custom\" \"output2\"    mds_out[[1L]]$pointer_shape #> [1] NA 10 mds_out[[2L]]$pointer_shape #> [1] NA 20  ## Prediction predict_input = list(input1 = task1, input2 = task2) tasks_out = do.call(po_torch$predict, args = list(input = predict_input)) identical(tasks_out[[1L]], tasks_out[[2L]]) #> [1] TRUE"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback Configuration — mlr_pipeops_torch_callbacks","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"Configures callbacks deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"parameters defined dynamically callbacks, id respective callbacks respective set id.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"one input channel \"input\" one output channel \"output\". training, channels class ModelDescriptor. prediction, channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"training callbacks cloned added ModelDescriptor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"mlr3pipelines::PipeOp -> PipeOpTorchCallbacks","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"PipeOpTorchCallbacks$new() PipeOpTorchCallbacks$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"PipeOpTorchCallbacks$new(   callbacks = list(),   id = \"torch_callbacks\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"callbacks (list TorchCallbacks)  callbacks (something convertible via as_torch_callbacks()). Must unique ids. callbacks cloned construction. id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"PipeOpTorchCallbacks$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_callbacks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"po_cb = po(\"torch_callbacks\", \"checkpoint\") po_cb$param_set #> <ParamSetCollection(3)> #>                      id    class lower upper nlevels        default  value #>                  <char>   <char> <num> <num>   <num>         <list> <list> #> 1:      checkpoint.path ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:      checkpoint.freq ParamInt     1   Inf     Inf <NoDefault[0]> [NULL] #> 3: checkpoint.freq_type ParamFct    NA    NA       2          epoch [NULL] mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$callbacks #> named list() mdout = po_cb$train(mdin)[[1L]] mdout$callbacks #> $checkpoint #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackSetCheckpoint #> * Parameters: list() #> * Packages: mlr3torch,torch #>  # Can be called again po_cb1 = po(\"torch_callbacks\", t_clbk(\"progress\")) mdout1 = po_cb1$train(list(mdout))[[1L]] mdout1$callbacks #> $progress #> <TorchCallback:progress> Progress #> * Generator: CallbackSetProgress #> * Parameters: list() #> * Packages: progress,mlr3torch,torch #>  #> $checkpoint #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackSetCheckpoint #> * Parameters: list() #> * Packages: mlr3torch,torch #>"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":null,"dir":"Reference","previous_headings":"","what":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Use entry-point mlr3torch-networks. Unless advanced user, need use directly PipeOpTorchIngressNumeric, PipeOpTorchIngressCategorical PipeOpTorchIngressLazyTensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Defined construction argument param_set.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"state set input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Creates object class TorchIngressToken given task. purpuse store information construct torch dataloader task entry point network.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"mlr3pipelines::PipeOp -> PipeOpTorchIngress","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"feature_types (character(1)) features types can consumed PipeOpTorchIngress.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"PipeOpTorchIngress$new() PipeOpTorchIngress$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"","code":"PipeOpTorchIngress$new(   id,   param_set = ps(),   param_vals = list(),   packages = character(0),   feature_types )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"id (character(1)) Identifier resulting  object. param_set (ParamSet) parameter set. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. packages (character()) R packages object depends . feature_types (character()) feature types. See mlr_reflections$task_feature_types available values, Additionally, \"lazy_tensor\" supported.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"","code":"PipeOpTorchIngress$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Ingress PipeOp represents categorical (factor(), ordered() logical()) entry point torch network.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"select :: logical(1) Whether PipeOp selected supported feature types. Otherwise err receiving tasks unsupported feature types.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Uses batchgetter_categ().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressCategorical","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"PipeOpTorchIngressCategorical$new() PipeOpTorchIngressCategorical$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"PipeOpTorchIngressCategorical$new(   id = \"torch_ingress_categ\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"PipeOpTorchIngressCategorical$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_categ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"graph = po(\"select\", selector = selector_type(\"factor\")) %>>%   po(\"torch_ingress_categ\") task = tsk(\"german_credit\") # The output is a model descriptor md = graph$train(task)[[1L]] ingress = md$ingress[[1L]] ingress$batchgetter(task$data(1, ingress$features), \"cpu\") #> torch_tensor #>  5  5  1  2  3  1  3  1  3  1  4  5  1  2 #> [ CPULongType{1,14} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"Ingress single lazy_tensor column.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"shape :: integer() | NULL | \"infer\" shape tensor, first dimension (batch) must NA. specified, lazy tensor input column needs known shape. set \"infer\", shape inferred example batch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"returned batchgetter materializes lazy tensor column tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressLazyTensor","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"PipeOpTorchIngressLazyTensor$new() PipeOpTorchIngressLazyTensor$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"","code":"PipeOpTorchIngressLazyTensor$new(   id = \"torch_ingress_ltnsr\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"","code":"PipeOpTorchIngressLazyTensor$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_ltnsr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ingress for Lazy Tensor — mlr_pipeops_torch_ingress_ltnsr","text":"","code":"po_ingress = po(\"torch_ingress_ltnsr\") task = tsk(\"lazy_iris\")  md = po_ingress$train(list(task))[[1L]]  ingress = md$ingress x_batch = ingress[[1L]]$batchgetter(data = task$data(1, \"x\"), cache = NULL) x_batch #> torch_tensor #>  5.1000  3.5000  1.4000  0.2000 #> [ CPUFloatType{1,4} ]  # Now we try a lazy tensor with unknown shape, i.e. the shapes between the rows can differ  ds = dataset(   initialize = function() self$x = list(torch_randn(3, 10, 10), torch_randn(3, 8, 8)),   .getitem = function(i) list(x = self$x[[i]]),   .length = function() 2)()  task_unknown = as_task_regr(data.table(   x = as_lazy_tensor(ds, dataset_shapes = list(x = NULL)),   y = rnorm(2) ), target = \"y\", id = \"example2\")  # this task (as it is) can NOT be processed by PipeOpTorchIngressLazyTensor # It therefore needs to be preprocessed po_resize = po(\"trafo_resize\", size = c(6, 6)) task_unknown_resize = po_resize$train(list(task_unknown))[[1L]]  # printing the transformed column still shows unknown shapes, # because the preprocessing pipeop cannot infer them, # however we know that the shape is now (3, 10, 10) for all rows task_unknown_resize$data(1:2, \"x\") #>                x #>    <lazy_tensor> #> 1:      <tnsr[]> #> 2:      <tnsr[]> po_ingress$param_set$set_values(shape = c(NA, 3, 6, 6))  md2 = po_ingress$train(list(task_unknown_resize))[[1L]]  ingress2 = md2$ingress x_batch2 = ingress2[[1L]]$batchgetter(   data = task_unknown_resize$data(1:2, \"x\"),   cache = NULL )  x_batch2 #> torch_tensor #> (1,1,.,.) =  #>   0.0584  1.1540 -0.6838 -0.1345  0.7166 -0.1001 #>   0.1030 -1.1843  0.4625 -1.2743  0.3107  0.6001 #>  -0.4018  0.1173  0.2082  0.5757  0.4001 -0.1134 #>   0.2773 -0.1097 -0.0896 -0.3457  0.4073  0.1018 #>  -1.1756  0.0686  0.6384 -1.0616 -0.8770 -0.7203 #>   1.2721 -0.1520 -0.8474 -0.3209 -0.4132 -0.5879 #>  #> (2,1,.,.) =  #>   0.2584  0.3291  0.8919 -0.0781 -0.4938 -0.3368 #>   0.4498  0.5942 -0.1619 -1.5562  0.2340  0.4918 #>   0.6124  0.7222 -0.5876 -0.8403 -0.0998 -0.7715 #>   0.0641 -0.1189 -0.2512  0.2063  0.2547 -0.1059 #>   0.3604 -0.1723 -0.0245 -0.1846 -0.2950  0.3261 #>   1.2149  0.8136 -0.1479 -0.5586 -0.1958  0.2617 #>  #> (1,2,.,.) =  #>  -0.1901  0.2382  0.7609  0.7862  1.0801  0.0396 #>  -0.8384 -0.1858  0.2758 -0.3891 -0.2032 -1.0331 #>   0.2101 -1.2954 -0.5540 -0.9116  1.1030 -0.3491 #>   0.2743  0.2570 -0.3152  1.1351 -0.6616  0.6196 #>  -0.0025  1.0044  0.2625  1.3346  1.5293 -1.8108 #>  -0.2873  0.7334 -0.2273 -0.4304 -0.0558 -0.2041 #>  #> (2,2,.,.) =  #>  -1.0807  1.0639 -0.4367 -0.3011  0.1753 -0.9030 #>  -0.7590  0.1862  0.3582  0.6190  0.1483 -0.4890 #>  -0.1560 -0.7729  0.8068  0.1980  0.1058  0.7656 #>   0.6955  1.2231  0.6754  0.8966 -0.4761 -0.2140 #>   0.6465  0.6770 -0.0757 -1.0318  0.2228  0.0925 #> ... [the output was truncated (use n=-1 to disable)] #> [ CPUFloatType{2,3,6,6} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Ingress PipeOp represents numeric (integer() numeric()) entry point torch network.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Uses batchgetter_num().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressNumeric","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"PipeOpTorchIngressNumeric$new() PipeOpTorchIngressNumeric$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"PipeOpTorchIngressNumeric$new(id = \"torch_ingress_num\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"PipeOpTorchIngressNumeric$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_ingress_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"graph = po(\"select\", selector = selector_type(c(\"numeric\", \"integer\"))) %>>%   po(\"torch_ingress_num\") task = tsk(\"german_credit\") # The output is a model descriptor md = graph$train(task)[[1L]] ingress = md$ingress[[1L]] ingress$batchgetter(task$data(1:5, ingress$features), \"cpu\") #> torch_tensor #>    67  1169     6 #>    22  5951    48 #>    49  2096    12 #>    45  7882    42 #>    53  4870    24 #> [ CPUFloatType{5,3} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Configuration — mlr_pipeops_torch_loss","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"Configures loss deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"parameters defined dynamically loss set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"training loss cloned added ModelDescriptor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"mlr3pipelines::PipeOp -> PipeOpTorchLoss","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"PipeOpTorchLoss$new() PipeOpTorchLoss$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"PipeOpTorchLoss$new(loss, id = \"torch_loss\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"loss (TorchLoss character(1) nn_loss) loss (something convertible via as_torch_loss()). id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"PipeOpTorchLoss$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"po_loss = po(\"torch_loss\", loss = t_loss(\"cross_entropy\")) po_loss$param_set #> <ParamSet(3)> #>              id    class lower upper nlevels default  value #>          <char>   <char> <num> <num>   <num>  <list> <list> #> 1:       weight ParamUty    NA    NA     Inf  [NULL] [NULL] #> 2: ignore_index ParamInt  -Inf   Inf     Inf    -100 [NULL] #> 3:    reduction ParamFct    NA    NA       2    mean [NULL] mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$loss #> NULL mdout = po_loss$train(mdin)[[1L]] mdout$loss #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_cross_entropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"PipeOp Torch Model — mlr_pipeops_torch_model","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"Builds Torch Learner ModelDescriptor trains given parameter specification. task type must specified construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"General: parameters optimizer, loss callbacks, prefixed \"opt.\", \"loss.\" \"cb.<callback id>.\" respectively, well : epochs :: integer(1) number epochs. device :: character(1) device. One \"auto\", \"cpu\", \"cuda\" values defined mlr_reflections$torch$devices. value initialized \"auto\", select \"cuda\" possible, try \"mps\" otherwise fall back \"cpu\". num_threads :: integer(1) number threads intraop pararallelization (device \"cpu\"). value initialized 1. num_interop_threads :: integer(1) number threads intraop interop pararallelization (device \"cpu\"). value initialized 1. Note can set session changing value within R session raise warning. seed :: integer(1) \"random\" NULL torch seed used training prediction. value initialized \"random\", means random seed sampled beginning training phase. seed (either set randomly sampled) available via $model$seed training used prediction. Note setting seed training phase mean default (.e. seed \"random\"), clones learner use different seed. set NULL, seeding done. tensor_dataset :: logical(1) | \"device\" Whether load batches beginning training stack . initialized FALSE. set \"device\", device tensors set value device, can avoid unnecessary moving tensors devices. dataset fits memory make loading batches faster. Note set datasets contain lazy_tensors random data augmentation, augmentation applied beginning training. Evaluation: measures_train :: Measure list() Measures Measures evaluated training. measures_valid :: Measure list() Measures Measures evaluated validation. eval_freq :: integer(1) often train / validation predictions evaluated using measures_train / measures_valid. initialized 1. Note final model always evaluated. Early Stopping: patience :: integer(1) activates early stopping using validation scores. performance model improve patience evaluation steps, training ended. Note final model stored learner, best model. initialized 0, means early stopping. first entry measures_valid used metric. also requires specify $validate field Learner, well measures_valid. set, epoch improvement observed, can accessed via $internal_tuned_values field learner. min_delta :: double(1) minimum improvement threshold early stopping. initialized 0. Dataloader: batch_size :: integer(1) batch size (required). shuffle :: logical(1) Whether shuffle instances dataset. initialized TRUE, differs default (FALSE). sampler :: torch::sampler Object defines dataloader draw samples. batch_sampler :: torch::sampler Object defines dataloader draws batches. num_workers :: integer(1) number workers data loading (batches loaded parallel). default 0, means data loaded main process. collate_fn :: function merge list samples form batch. pin_memory :: logical(1) Whether dataloader copies tensors CUDA pinned memory returning . drop_last :: logical(1) Whether drop last training batch epoch training. Default FALSE. timeout :: numeric(1) timeout value collecting batch workers. Negative values mean timeout default -1. worker_init_fn :: function(id) function receives worker id ([1, num_workers]) exectued seeding worker data loading. worker_globals :: list() | character() loading data parallel, allows export globals workers. character vector, objects global environment names copied workers. worker_packages :: character() packages load workers. Also see torch::dataloder information.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"trained LearnerTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"LearnerTorchModel created calling model_descriptor_to_learner() provided ModelDescriptor received input channel. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task][mlr3::Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"mlr3pipelines::PipeOp -> mlr3pipelines::PipeOpLearner -> PipeOpTorchModel","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"PipeOpTorchModel$new() PipeOpTorchModel$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"","code":"PipeOpTorchModel$new(task_type, id = \"torch_model\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"task_type (character(1)) task type model. id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"","code":"PipeOpTorchModel$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PipeOp Torch Model — mlr_pipeops_torch_model","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":null,"dir":"Reference","previous_headings":"","what":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"Builds torch classifier trains .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"See LearnerTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"trained LearnerTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"LearnerTorchModel created calling model_descriptor_to_learner() provided ModelDescriptor received input channel. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task][mlr3::Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"mlr3pipelines::PipeOp -> mlr3pipelines::PipeOpLearner -> mlr3torch::PipeOpTorchModel -> PipeOpTorchModelClassif","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"PipeOpTorchModelClassif$new() PipeOpTorchModelClassif$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"","code":"PipeOpTorchModelClassif$new(id = \"torch_model_classif\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"","code":"PipeOpTorchModelClassif$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_classif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PipeOp Torch Classifier — mlr_pipeops_torch_model_classif","text":"","code":"# simple logistic regression  # configure the model descriptor md = as_graph(po(\"torch_ingress_num\") %>>%   po(\"nn_head\") %>>%   po(\"torch_loss\", \"cross_entropy\") %>>%   po(\"torch_optimizer\", \"adam\"))$train(tsk(\"iris\"))[[1L]]  print(md) #> <ModelDescriptor: 2 ops> #> * Ingress:  torch_ingress_num.input: [(NA,4)] #> * Task:  iris [classif] #> * Callbacks:  N/A #> * Optimizer:  Adaptive Moment Estimation #> * Loss:  Cross Entropy #> * pointer:  nn_head.output [(NA,3)]  # build the learner from the model descriptor and train it po_model = po(\"torch_model_classif\", batch_size = 50, epochs = 1) po_model$train(list(md)) #> $output #> NULL #>  po_model$state #> $model #> $network #> An `nn_module` containing 15 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • module_list: <nn_module_list> #15 parameters #>  #> $internal_valid_scores #> NULL #>  #> $loss_fn #> list() #>  #> $optimizer #> $optimizer$param_groups #> $optimizer$param_groups[[1]] #> $optimizer$param_groups[[1]]$params #> [1] 1 2 #>  #> $optimizer$param_groups[[1]]$lr #> [1] 0.001 #>  #> $optimizer$param_groups[[1]]$weight_decay #> [1] 0 #>  #> $optimizer$param_groups[[1]]$betas #> [1] 0.900 0.999 #>  #> $optimizer$param_groups[[1]]$eps #> [1] 1e-08 #>  #> $optimizer$param_groups[[1]]$amsgrad #> [1] FALSE #>  #>  #>  #> $optimizer$state #> $optimizer$state$`1` #> $optimizer$state$`1`$exp_avg #> torch_tensor #> -0.1260 -0.0209 -0.4384 -0.3011 #> -0.1005 -0.0250 -0.1186 -0.0357 #>  0.2265  0.0458  0.5570  0.3368 #> [ CPUFloatType{3,4} ] #>  #> $optimizer$state$`1`$exp_avg_sq #> torch_tensor #> 0.01 * #>  0.0645  0.0018  0.7808  0.3683 #>   0.0702  0.0056  0.1150  0.0182 #>   0.2329  0.0109  1.2956  0.4669 #> [ CPUFloatType{3,4} ] #>  #> $optimizer$state$`1`$max_exp_avg_sq #> torch_tensor #> [ CPUFloatType{0} ] #>  #> $optimizer$state$`1`$step #> torch_tensor #>  3 #> [ CPULongType{1} ] #>  #>  #> $optimizer$state$`2` #> $optimizer$state$`2`$exp_avg #> torch_tensor #> -0.0876 #> -0.0196 #>  0.1072 #> [ CPUFloatType{3} ] #>  #> $optimizer$state$`2`$exp_avg_sq #> torch_tensor #> 0.0001 * #>  3.1150 #>  0.3254 #>  4.7708 #> [ CPUFloatType{3} ] #>  #> $optimizer$state$`2`$max_exp_avg_sq #> torch_tensor #> [ CPUFloatType{0} ] #>  #> $optimizer$state$`2`$step #> torch_tensor #>  3 #> [ CPULongType{1} ] #>  #>  #>  #>  #> $epochs #> [1] 1 #>  #> $callbacks #> named list() #>  #> $seed #> [1] 1338150431 #>  #> $task_col_info #> Key: <id> #>              id    type                      levels #>          <char>  <char>                      <list> #> 1: Petal.Length numeric                      [NULL] #> 2:  Petal.Width numeric                      [NULL] #> 3: Sepal.Length numeric                      [NULL] #> 4:  Sepal.Width numeric                      [NULL] #> 5:      Species  factor setosa,versicolor,virginica #>  #> attr(,\"class\") #> [1] \"learner_torch_model\" \"list\"                #>  #> $log #> Empty data.table (0 rows and 3 cols): stage,class,msg #>  #> $train_time #> [1] 0.051 #>  #> $param_vals #> $param_vals$epochs #> [1] 1 #>  #> $param_vals$device #> [1] \"auto\" #>  #> $param_vals$num_threads #> [1] 1 #>  #> $param_vals$num_interop_threads #> [1] 1 #>  #> $param_vals$seed #> [1] \"random\" #>  #> $param_vals$jit_trace #> [1] FALSE #>  #> $param_vals$eval_freq #> [1] 1 #>  #> $param_vals$measures_train #> list() #>  #> $param_vals$measures_valid #> list() #>  #> $param_vals$patience #> [1] 0 #>  #> $param_vals$min_delta #> [1] 0 #>  #> $param_vals$batch_size #> [1] 50 #>  #> $param_vals$shuffle #> [1] TRUE #>  #> $param_vals$tensor_dataset #> [1] FALSE #>  #>  #> $task_hash #> [1] \"60543108f51f96bb\" #>  #> $feature_names #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $validate #> NULL #>  #> $mlr3_version #> [1] ‘0.22.1’ #>  #> $internal_tuned_values #> named list() #>  #> $data_prototype #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>  #> $task_prototype #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>  #> $train_task #> <TaskClassif:iris> (150 x 5): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> attr(,\"class\") #> [1] \"learner_state\" \"list\""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Regression Model — mlr_pipeops_torch_model_regr","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"Builds torch regression model trains .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"See LearnerTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"trained LearnerTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"LearnerTorchModel created calling model_descriptor_to_learner() provided ModelDescriptor received input channel. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task][mlr3::Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"mlr3pipelines::PipeOp -> mlr3pipelines::PipeOpLearner -> mlr3torch::PipeOpTorchModel -> PipeOpTorchModelRegr","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"PipeOpTorchModelRegr$new() PipeOpTorchModelRegr$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"","code":"PipeOpTorchModelRegr$new(id = \"torch_model_regr\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"","code":"PipeOpTorchModelRegr$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_model_regr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"","code":"# simple linear regression  # build the model descriptor md = as_graph(po(\"torch_ingress_num\") %>>%   po(\"nn_head\") %>>%   po(\"torch_loss\", \"mse\") %>>%   po(\"torch_optimizer\", \"adam\"))$train(tsk(\"mtcars\"))[[1L]]  print(md) #> <ModelDescriptor: 2 ops> #> * Ingress:  torch_ingress_num.input: [(NA,10)] #> * Task:  mtcars [regr] #> * Callbacks:  N/A #> * Optimizer:  Adaptive Moment Estimation #> * Loss:  Mean Squared Error #> * pointer:  nn_head.output [(NA,1)]  # build the learner from the model descriptor and train it po_model = po(\"torch_model_regr\", batch_size = 20, epochs = 1) po_model$train(list(md)) #> $output #> NULL #>  po_model$state #> $model #> $network #> An `nn_module` containing 11 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • module_list: <nn_module_list> #11 parameters #>  #> $internal_valid_scores #> NULL #>  #> $loss_fn #> list() #>  #> $optimizer #> $optimizer$param_groups #> $optimizer$param_groups[[1]] #> $optimizer$param_groups[[1]]$params #> [1] 1 2 #>  #> $optimizer$param_groups[[1]]$lr #> [1] 0.001 #>  #> $optimizer$param_groups[[1]]$weight_decay #> [1] 0 #>  #> $optimizer$param_groups[[1]]$betas #> [1] 0.900 0.999 #>  #> $optimizer$param_groups[[1]]$eps #> [1] 1e-08 #>  #> $optimizer$param_groups[[1]]$amsgrad #> [1] FALSE #>  #>  #>  #> $optimizer$state #> $optimizer$state$`1` #> $optimizer$state$`1`$exp_avg #> torch_tensor #> -2.9507 -4.8365 -12.6544 -136.2684 -14.7779 -14.6720 -174.2433 -67.4318 -3.6596 -6.2324 #> [ CPUFloatType{1,10} ] #>  #> $optimizer$state$`1`$exp_avg_sq #> torch_tensor #> Columns 1 to 7    0.5200     2.3228    12.1758  6475.4131    13.2938    13.9329  4650.6953 #>  #> Columns 8 to 10  285.8094     0.7534     3.3957 #> [ CPUFloatType{1,10} ] #>  #> $optimizer$state$`1`$max_exp_avg_sq #> torch_tensor #> [ CPUFloatType{0} ] #>  #> $optimizer$state$`1`$step #> torch_tensor #>  2 #> [ CPULongType{1} ] #>  #>  #> $optimizer$state$`2` #> $optimizer$state$`2`$exp_avg #> torch_tensor #> -3.5004 #> [ CPUFloatType{1} ] #>  #> $optimizer$state$`2`$exp_avg_sq #> torch_tensor #>  0.7837 #> [ CPUFloatType{1} ] #>  #> $optimizer$state$`2`$max_exp_avg_sq #> torch_tensor #> [ CPUFloatType{0} ] #>  #> $optimizer$state$`2`$step #> torch_tensor #>  2 #> [ CPULongType{1} ] #>  #>  #>  #>  #> $epochs #> [1] 1 #>  #> $callbacks #> named list() #>  #> $seed #> [1] 1879465332 #>  #> $task_col_info #>         id    type levels #>     <char>  <char> <list> #>  1:     am numeric [NULL] #>  2:   carb numeric [NULL] #>  3:    cyl numeric [NULL] #>  4:   disp numeric [NULL] #>  5:   drat numeric [NULL] #>  6:   gear numeric [NULL] #>  7:     hp numeric [NULL] #>  8:   qsec numeric [NULL] #>  9:     vs numeric [NULL] #> 10:     wt numeric [NULL] #> 11:    mpg numeric [NULL] #>  #> attr(,\"class\") #> [1] \"learner_torch_model\" \"list\"                #>  #> $log #> Empty data.table (0 rows and 3 cols): stage,class,msg #>  #> $train_time #> [1] 0.038 #>  #> $param_vals #> $param_vals$epochs #> [1] 1 #>  #> $param_vals$device #> [1] \"auto\" #>  #> $param_vals$num_threads #> [1] 1 #>  #> $param_vals$num_interop_threads #> [1] 1 #>  #> $param_vals$seed #> [1] \"random\" #>  #> $param_vals$jit_trace #> [1] FALSE #>  #> $param_vals$eval_freq #> [1] 1 #>  #> $param_vals$measures_train #> list() #>  #> $param_vals$measures_valid #> list() #>  #> $param_vals$patience #> [1] 0 #>  #> $param_vals$min_delta #> [1] 0 #>  #> $param_vals$batch_size #> [1] 20 #>  #> $param_vals$shuffle #> [1] TRUE #>  #> $param_vals$tensor_dataset #> [1] FALSE #>  #>  #> $task_hash #> [1] \"907e8c646e24bf41\" #>  #> $feature_names #>  [1] \"am\"   \"carb\" \"cyl\"  \"disp\" \"drat\" \"gear\" \"hp\"   \"qsec\" \"vs\"   \"wt\"   #>  #> $validate #> NULL #>  #> $mlr3_version #> [1] ‘0.22.1’ #>  #> $internal_tuned_values #> named list() #>  #> $data_prototype #> Empty data.table (0 rows and 11 cols): mpg,am,carb,cyl,disp,drat... #>  #> $task_prototype #> Empty data.table (0 rows and 11 cols): mpg,am,carb,cyl,disp,drat... #>  #> $train_task #> <TaskRegr:mtcars> (32 x 11): Motor Trends #> * Target: mpg #> * Properties: - #> * Features (10): #>   - dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt #>  #> attr(,\"class\") #> [1] \"learner_state\" \"list\""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Configuration — mlr_pipeops_torch_optimizer","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"Configures optimizer deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"parameters defined dynamically optimizer set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"one input channel \"input\" one output channel \"output\". training, channels class ModelDescriptor. prediction, channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"training, optimizer cloned added ModelDescriptor. Note parameter set stored TorchOptimizer reference-identical parameter set pipeop .","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"mlr3pipelines::PipeOp -> PipeOpTorchOptimizer","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"PipeOpTorchOptimizer$new() PipeOpTorchOptimizer$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"PipeOpTorchOptimizer$new(   optimizer = t_opt(\"adam\"),   id = \"torch_optimizer\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"optimizer (TorchOptimizer character(1) torch_optimizer_generator) optimizer (something convertible via as_torch_optimizer()). id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"PipeOpTorchOptimizer$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeops_torch_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"po_opt = po(\"torch_optimizer\", \"sgd\", lr = 0.01) po_opt$param_set #> <ParamSet(5)> #>              id    class lower upper nlevels        default  value #>          <char>   <char> <num> <num>   <num>         <list> <list> #> 1:           lr ParamDbl     0   Inf     Inf <NoDefault[0]>   0.01 #> 2:     momentum ParamDbl     0     1     Inf              0 [NULL] #> 3:    dampening ParamDbl     0     1     Inf              0 [NULL] #> 4: weight_decay ParamDbl     0     1     Inf              0 [NULL] #> 5:     nesterov ParamLgl    NA    NA       2          FALSE [NULL] mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$optimizer #> NULL mdout = po_opt$train(mdin) mdout[[1L]]$optimizer #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_ignite_sgd #> * Parameters: lr=0.01 #> * Packages: torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_center_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Center Crop Augmentation — mlr_pipeops_augment_center_crop","title":"Center Crop Augmentation — mlr_pipeops_augment_center_crop","text":"Calls torchvision::transform_center_crop, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_center_crop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Center Crop Augmentation — mlr_pipeops_augment_center_crop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_color_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Jitter Augmentation — mlr_pipeops_augment_color_jitter","title":"Color Jitter Augmentation — mlr_pipeops_augment_color_jitter","text":"Calls torchvision::transform_color_jitter, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_color_jitter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Color Jitter Augmentation — mlr_pipeops_augment_color_jitter","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop Augmentation — mlr_pipeops_augment_crop","title":"Crop Augmentation — mlr_pipeops_augment_crop","text":"Calls torchvision::transform_crop, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_crop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Crop Augmentation — mlr_pipeops_augment_crop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_hflip.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizontal Flip Augmentation — mlr_pipeops_augment_hflip","title":"Horizontal Flip Augmentation — mlr_pipeops_augment_hflip","text":"Calls torchvision::transform_hflip, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_hflip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Horizontal Flip Augmentation — mlr_pipeops_augment_hflip","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_affine.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Affine Augmentation — mlr_pipeops_augment_random_affine","title":"Random Affine Augmentation — mlr_pipeops_augment_random_affine","text":"Calls torchvision::transform_random_affine, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_affine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Affine Augmentation — mlr_pipeops_augment_random_affine","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Choice Augmentation — mlr_pipeops_augment_random_choice","title":"Random Choice Augmentation — mlr_pipeops_augment_random_choice","text":"Calls torchvision::transform_random_choice, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_choice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Choice Augmentation — mlr_pipeops_augment_random_choice","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Crop Augmentation — mlr_pipeops_augment_random_crop","title":"Random Crop Augmentation — mlr_pipeops_augment_random_crop","text":"Calls torchvision::transform_random_crop, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_crop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Crop Augmentation — mlr_pipeops_augment_random_crop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_horizontal_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Horizontal Flip Augmentation — mlr_pipeops_augment_random_horizontal_flip","title":"Random Horizontal Flip Augmentation — mlr_pipeops_augment_random_horizontal_flip","text":"Calls torchvision::transform_random_horizontal_flip, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_horizontal_flip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Horizontal Flip Augmentation — mlr_pipeops_augment_random_horizontal_flip","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Order Augmentation — mlr_pipeops_augment_random_order","title":"Random Order Augmentation — mlr_pipeops_augment_random_order","text":"Calls torchvision::transform_random_order, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_order.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Order Augmentation — mlr_pipeops_augment_random_order","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_resized_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Resized Crop Augmentation — mlr_pipeops_augment_random_resized_crop","title":"Random Resized Crop Augmentation — mlr_pipeops_augment_random_resized_crop","text":"Calls torchvision::transform_random_resized_crop, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_resized_crop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Resized Crop Augmentation — mlr_pipeops_augment_random_resized_crop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_vertical_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Vertical Flip Augmentation — mlr_pipeops_augment_random_vertical_flip","title":"Random Vertical Flip Augmentation — mlr_pipeops_augment_random_vertical_flip","text":"Calls torchvision::transform_random_vertical_flip, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_random_vertical_flip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Vertical Flip Augmentation — mlr_pipeops_augment_random_vertical_flip","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_resized_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Resized Crop Augmentation — mlr_pipeops_augment_resized_crop","title":"Resized Crop Augmentation — mlr_pipeops_augment_resized_crop","text":"Calls torchvision::transform_resized_crop, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_resized_crop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Resized Crop Augmentation — mlr_pipeops_augment_resized_crop","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate Augmentation — mlr_pipeops_augment_rotate","title":"Rotate Augmentation — mlr_pipeops_augment_rotate","text":"Calls torchvision::transform_rotate, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_rotate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rotate Augmentation — mlr_pipeops_augment_rotate","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_vflip.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertical Flip Augmentation — mlr_pipeops_augment_vflip","title":"Vertical Flip Augmentation — mlr_pipeops_augment_vflip","text":"Calls torchvision::transform_vflip, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopsaugment_vflip.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vertical Flip Augmentation — mlr_pipeops_augment_vflip","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_brightness.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Brightness Transformation — mlr_pipeops_trafo_adjust_brightness","title":"Adjust Brightness Transformation — mlr_pipeops_trafo_adjust_brightness","text":"Calls torchvision::transform_adjust_brightness, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_brightness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adjust Brightness Transformation — mlr_pipeops_trafo_adjust_brightness","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Gamma Transformation — mlr_pipeops_trafo_adjust_gamma","title":"Adjust Gamma Transformation — mlr_pipeops_trafo_adjust_gamma","text":"Calls torchvision::transform_adjust_gamma, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_gamma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adjust Gamma Transformation — mlr_pipeops_trafo_adjust_gamma","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Hue Transformation — mlr_pipeops_trafo_adjust_hue","title":"Adjust Hue Transformation — mlr_pipeops_trafo_adjust_hue","text":"Calls torchvision::transform_adjust_hue, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_hue.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adjust Hue Transformation — mlr_pipeops_trafo_adjust_hue","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_saturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Saturation Transformation — mlr_pipeops_trafo_adjust_saturation","title":"Adjust Saturation Transformation — mlr_pipeops_trafo_adjust_saturation","text":"Calls torchvision::transform_adjust_saturation, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_adjust_saturation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adjust Saturation Transformation — mlr_pipeops_trafo_adjust_saturation","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_grayscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Grayscale Transformation — mlr_pipeops_trafo_grayscale","title":"Grayscale Transformation — mlr_pipeops_trafo_grayscale","text":"Calls torchvision::transform_grayscale, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_grayscale.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Grayscale Transformation — mlr_pipeops_trafo_grayscale","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization Transformation — mlr_pipeops_trafo_normalize","title":"Normalization Transformation — mlr_pipeops_trafo_normalize","text":"Calls torchvision::transform_normalize, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_normalize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Normalization Transformation — mlr_pipeops_trafo_normalize","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Padding Transformation — mlr_pipeops_trafo_pad","title":"Padding Transformation — mlr_pipeops_trafo_pad","text":"Calls torchvision::transform_pad, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_pad.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Padding Transformation — mlr_pipeops_trafo_pad","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_resize.html","id":null,"dir":"Reference","previous_headings":"","what":"Resizing Transformation — mlr_pipeops_trafo_resize","title":"Resizing Transformation — mlr_pipeops_trafo_resize","text":"Calls torchvision::transform_resize, see information parameters. preprocessing applied whole batch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_resize.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Resizing Transformation — mlr_pipeops_trafo_resize","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_rgb_to_grayscale.html","id":null,"dir":"Reference","previous_headings":"","what":"RGB to Grayscale Transformation — mlr_pipeops_trafo_rgb_to_grayscale","title":"RGB to Grayscale Transformation — mlr_pipeops_trafo_rgb_to_grayscale","text":"Calls torchvision::transform_rgb_to_grayscale, see information parameters. preprocessing applied element batch individually.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_pipeopstrafo_rgb_to_grayscale.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RGB to Grayscale Transformation — mlr_pipeops_trafo_rgb_to_grayscale","text":"R6Class inheriting PipeOpTaskPreprocTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":null,"dir":"Reference","previous_headings":"","what":"CIFAR Classification Tasks — mlr_tasks_cifar","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"CIFAR-10 CIFAR-100 datasets. subset 80 million tiny images dataset noisy labels supplied student labelers, asked filter incorrectly labeled images. images datatype torch_long(). CIFAR-10 contains 10 classes. CIFAR-100 contains 100 classes, may partitioned 20 superclasses 5 classes . CIFAR-10 CIFAR-100 classes mutually exclusive. See Chapter 3.1 technical report details. data obtained torchvision::cifar10_dataset() (torchvision::cifar100_dataset()).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"R6::R6Class inheriting mlr3::TaskClassif.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"","code":"tsk(\"cifar10\") tsk(\"cifar100\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"download","dir":"Reference","previous_headings":"","what":"Download","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"task's backend DataBackendLazy download data requested. meta-data already available . can cache datasets setting mlr3torch.cache option TRUE specific path used cache directory.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"Task type: “classif” Properties: “multiclass” Missings: Target: “class” Features: “image” Data Dimension: 60000x4","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"Krizhevsky, Alex (2009). “Learning Multiple Layers Features Tiny Images.” Master's thesis, Department Computer Science, University Toronto.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_cifar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CIFAR Classification Tasks — mlr_tasks_cifar","text":"","code":"task_cifar10 = tsk(\"cifar10\") task_cifar100 = tsk(\"cifar100\") print(task_cifar10) #> <TaskClassif:cifar10> (60000 x 2): CIFAR-10 Classification #> * Target: class #> * Properties: multiclass #> * Features (1): #>   - lt (1): image print(task_cifar100) #> <TaskClassif:cifar100> (60000 x 2): CIFAR-100 Classification #> * Target: class #> * Properties: multiclass #> * Features (1): #>   - lt (1): image"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":null,"dir":"Reference","previous_headings":"","what":"Iris Classification Task — mlr_tasks_lazy_iris","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"classification task popular datasets::iris data set. Just like iris task, features represented one lazy tensor column.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"R6::R6Class inheriting mlr3::TaskClassif.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"https://en.wikipedia.org/wiki/Iris_flower_data_set","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"","code":"tsk(\"lazy_iris\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"Task type: “classif” Properties: “multiclass” Missings: Target: “Species” Features: “x” Data Dimension: 150x3","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"Anderson E (1936). “Species Problem Iris.” Annals Missouri Botanical Garden, 23(3), 457. doi:10.2307/2394164 .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_lazy_iris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iris Classification Task — mlr_tasks_lazy_iris","text":"","code":"task = tsk(\"lazy_iris\") task #> <TaskClassif:lazy_iris> (150 x 2): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (1): #>   - lt (1): x df = task$data() materialize(df$x[1:6], rbind = TRUE) #> torch_tensor #>  5.1000  3.5000  1.4000  0.2000 #>  4.9000  3.0000  1.4000  0.2000 #>  4.7000  3.2000  1.3000  0.2000 #>  4.6000  3.1000  1.5000  0.2000 #>  5.0000  3.6000  1.4000  0.2000 #>  5.4000  3.9000  1.7000  0.4000 #> [ CPUFloatType{6,4} ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":null,"dir":"Reference","previous_headings":"","what":"Melanoma Image classification — mlr_tasks_melanoma","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"Classification melanoma tumor images. data preprocessed version 2020 SIIM-ISIC challenge images reshaped size $(3, 128, 128)$. default training rows active task, test data (targets) also included. Whether observation part train test set indicated column \"test\". labels test rows, default, observations inactive, means task uses 32701 43683 observations defined underlying data backend. data backend also contains detailed diagnosis specific type tumor. Columns: outcome (factor): target variable. Whether tumor benign malignant (positive class) anatom_site_general_challenge (factor): location tumor patient's body sex (factor): sex patient age_approx (int): approximate age patient time imaging image (lazy_tensor): image (shape $(3, 128, 128)$) tumor. ee split (character): Whether observation os part train test set.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"https://huggingface.co/datasets/carsonzhang/ISIC_2020_small","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"","code":"tsk(\"melanoma\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"download","dir":"Reference","previous_headings":"","what":"Download","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"task's backend DataBackendLazy download data requested. meta-data already available . can cache datasets setting mlr3torch.cache option TRUE specific path used cache directory.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"Task type: “classif” Properties: “twoclass”, “groups” Missings: Target: “outcome” Features: “sex”, “anatom_site_general_challenge”, “age_approx”, “image” Data Dimension: 43683x11","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"Rotemberg, V., Kurtansky, N., Betz-Stablein, B., Caffery, L., Chousakos, E., Codella, N., Combalia, M., Dusza, S., Guitera, P., Gutman, D., Halpern, ., Helba, B., Kittler, H., Kose, K., Langer, S., Lioprys, K., Malvehy, J., Musthaq, S., Nanda, J., Reiter, O., Shih, G., Stratigos, ., Tschandl, P., Weber, J., Soyer, P. (2021). “patient-centric dataset images metadata identifying melanomas using clinical context.” Scientific Data, 8, 34. doi:10.1038/s41597-021-00815-z .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_melanoma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melanoma Image classification — mlr_tasks_melanoma","text":"","code":"task = tsk(\"melanoma\") task #> <TaskClassif:melanoma> (32701 x 5): Melanoma Classification #> * Target: outcome #> * Properties: twoclass, groups #> * Features (4): #>   - fct (2): anatom_site_general_challenge, sex #>   - int (1): age_approx #>   - lt (1): image #> * Groups: patient_id"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":null,"dir":"Reference","previous_headings":"","what":"MNIST Image classification — mlr_tasks_mnist","title":"MNIST Image classification — mlr_tasks_mnist","text":"Classic MNIST image classification. underlying DataBackend contains columns \"label\", \"image\", \"row_id\", \"split\", last column indicates whether row belongs train test set. first 60000 rows belong training set, last 10000 rows test set.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MNIST Image classification — mlr_tasks_mnist","text":"https://torchvision.mlverse.org/reference/mnist_dataset.html","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"MNIST Image classification — mlr_tasks_mnist","text":"","code":"tsk(\"mnist\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"download","dir":"Reference","previous_headings":"","what":"Download","title":"MNIST Image classification — mlr_tasks_mnist","text":"task's backend DataBackendLazy download data requested. meta-data already available . can cache datasets setting mlr3torch.cache option TRUE specific path used cache directory.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"MNIST Image classification — mlr_tasks_mnist","text":"Task type: “classif” Properties: “multiclass” Missings: Target: “label” Features: “image” Data Dimension: 70000x4","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MNIST Image classification — mlr_tasks_mnist","text":"Lecun, Y., Bottou, L., Bengio, Y., Haffner, P. (1998). “Gradient-based learning applied document recognition.” Proceedings IEEE, 86(11), 2278-2324. doi:10.1109/5.726791 .","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_mnist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MNIST Image classification — mlr_tasks_mnist","text":"","code":"task = tsk(\"mnist\") task #> <TaskClassif:mnist> (70000 x 2): MNIST Digit Classification #> * Target: label #> * Properties: multiclass #> * Features (1): #>   - lt (1): image"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"Subset famous ImageNet dataset. data obtained torchvision::tiny_imagenet_dataset(). underlying DataBackend contains columns \"class\", \"image\", \"..row_id\", \"split\", last column indicates whether row belongs train, validation test set provided torchvision. labels test rows, default, observations inactive, means task uses 110000 120000 observations defined underlying data backend.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"","code":"tsk(\"tiny_imagenet\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":"download","dir":"Reference","previous_headings":"","what":"Download","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"task's backend DataBackendLazy download data requested. meta-data already available . can cache datasets setting mlr3torch.cache option TRUE specific path used cache directory.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":"properties","dir":"Reference","previous_headings":"","what":"Properties","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"Task type: “classif” Properties: “multiclass” Missings: Target: “class” Features: “image” Data Dimension: 120000x4","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"Deng, Jia, Dong, Wei, Socher, Richard, Li, Li-Jia, Li, Kai, Fei-Fei, Li (2009). “Imagenet: large-scale hierarchical image database.” 2009 IEEE conference computer vision pattern recognition, 248–255. IEEE.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/mlr_tasks_tiny_imagenet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tiny ImageNet Classification Task — mlr_tasks_tiny_imagenet","text":"","code":"task = tsk(\"tiny_imagenet\") task #> <TaskClassif:tiny_imagenet> (110000 x 2): ImageNet Subset #> * Target: class #> * Properties: multiclass #> * Features (1): #>   - lt (1): image"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"First nn_graph created using model_descriptor_to_module learner created module remaining information model descriptor, must include optimizer loss function optionally callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"","code":"model_descriptor_to_learner(model_descriptor)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"model_descriptor (ModelDescriptor) model descriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"Learner","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"Creates nn_graph ModelDescriptor. Mostly internal use, since ModelDescriptor circumstances harder use just creating nn_graph directly.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"","code":"model_descriptor_to_module(   model_descriptor,   output_pointers = NULL,   list_output = FALSE )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"model_descriptor (ModelDescriptor) Model Descriptor. pointer ignored, instead output_pointer values used. $graph member modified -reference. output_pointers (list character) Collection pointers indicate part model_descriptor$graph used output. Entries format ModelDescriptor$pointer. list_output (logical(1)) Whether output list tensors. FALSE, length(output_pointers) must 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_to_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"nn_graph","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of ModelDescriptors — model_descriptor_union","title":"Union of ModelDescriptors — model_descriptor_union","text":"mostly internal function used PipeOpTorchs multiple input channels. creates union multiple ModelDescriptors: graphs combinded (identical begin ). first entry's graph modified reference. PipeOps ID must identical. new input edges may added PipeOps. Drops pointer / pointer_shape entries. new task feature union two incoming tasks. optimizer loss ModelDescriptors must identical. Ingress tokens callbacks merged, objects \"id\" must identical.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of ModelDescriptors — model_descriptor_union","text":"","code":"model_descriptor_union(md1, md2)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of ModelDescriptors — model_descriptor_union","text":"md1 (ModelDescriptor) first ModelDescriptor. md2 (ModelDescriptor) second ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of ModelDescriptors — model_descriptor_union","text":"ModelDescriptor","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/model_descriptor_union.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Union of ModelDescriptors — model_descriptor_union","text":"requirement new input edgedes may added PipeOps  theoretically necessary, since assume ModelDescriptor built beginning end (.e. PipeOps never get new ancestors) can make assumption simplify things. Otherwise need treat \"...\"-inputs special.)","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Neural Network Layer — nn","title":"Create a Neural Network Layer — nn","text":"Retrieve neural network layer mlr_pipeops dictionary.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Neural Network Layer — nn","text":"","code":"nn(.key, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Neural Network Layer — nn","text":".key (character(1)) ... () Additional parameters, constructor arguments fields.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Neural Network Layer — nn","text":"","code":"po1 = po(\"nn_linear\", id = \"linear\") # is the same as: po2 = nn(\"linear\")"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Network — nn_graph","title":"Graph Network — nn_graph","text":"Represents neural network using Graph usually costains mostly PipeOpModules.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Network — nn_graph","text":"","code":"nn_graph(graph, shapes_in, output_map = graph$output$name, list_output = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Network — nn_graph","text":"graph (Graph) Graph wrap. cloned. shapes_in (named integer) Shape info tensors go graph. Names must graph$input$name, possibly different order. output_map (character) graph's outputs use. Must subset graph$output$name. list_output (logical(1)) Whether output list tensors. FALSE (default), length(output_map) must 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Network — nn_graph","text":"nn_graph","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Network — nn_graph","text":"","code":"graph = mlr3pipelines::Graph$new() graph$add_pipeop(po(\"module_1\", module = nn_linear(10, 20)), clone = FALSE) graph$add_pipeop(po(\"module_2\", module = nn_relu()), clone = FALSE) graph$add_pipeop(po(\"module_3\", module = nn_linear(20, 1)), clone = FALSE) graph$add_edge(\"module_1\", \"module_2\") graph$add_edge(\"module_2\", \"module_3\")  network = nn_graph(graph, shapes_in = list(module_1.input = c(NA, 10)))  x = torch_randn(16, 10)  network(module_1.input = x) #> torch_tensor #> -0.2769 #> -0.2779 #> -0.1570 #> -0.2491 #> -0.3878 #> -0.1224 #> -0.4271 #> -0.2581 #> -0.3228 #> -0.0445 #> -0.3487 #> -0.6967 #> -0.0038 #> -0.5004 #> -0.4031 #> -0.4273 #> [ CPUFloatType{16,1} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenates multiple tensors — nn_merge_cat","title":"Concatenates multiple tensors — nn_merge_cat","text":"Concatenates multiple tensors given dimension. broadcasting rules applied , must reshape tensors shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenates multiple tensors — nn_merge_cat","text":"","code":"nn_merge_cat(dim = -1)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenates multiple tensors — nn_merge_cat","text":"dim (integer(1)) dimension concatenation.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Product of multiple tensors — nn_merge_prod","title":"Product of multiple tensors — nn_merge_prod","text":"Calculates product input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product of multiple tensors — nn_merge_prod","text":"","code":"nn_merge_prod()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of multiple tensors — nn_merge_sum","title":"Sum of multiple tensors — nn_merge_sum","text":"Calculates sum input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_merge_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of multiple tensors — nn_merge_sum","text":"","code":"nn_merge_sum()"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape — nn_reshape","title":"Reshape — nn_reshape","text":"Reshape tensor given shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape — nn_reshape","text":"","code":"nn_reshape(shape)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape — nn_reshape","text":"shape (integer()) desired output shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_squeeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Squeeze — nn_squeeze","title":"Squeeze — nn_squeeze","text":"Squeezes tensor calling torch::torch_squeeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_squeeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze — nn_squeeze","text":"","code":"nn_squeeze(dim)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_squeeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze — nn_squeeze","text":"dim (integer()) dimension squeeze.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_unsqueeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Unsqueeze — nn_unsqueeze","title":"Unsqueeze — nn_unsqueeze","text":"Unsqueezes tensor calling torch::torch_unsqueeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_unsqueeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unsqueeze — nn_unsqueeze","text":"","code":"nn_unsqueeze(dim)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/nn_unsqueeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unsqueeze — nn_unsqueeze","text":"dim (integer(1)) dimension unsqueeze.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/pipeop_preproc_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","title":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","text":"Function create objects class PipeOpTaskPreprocTorch convenient way. Start reading documentation PipeOpTaskPreprocTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/pipeop_preproc_torch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","text":"","code":"pipeop_preproc_torch(   id,   fn,   shapes_out = NULL,   param_set = NULL,   packages = character(0),   rowwise = FALSE,   parent_env = parent.frame(),   stages_init = NULL,   tags = NULL )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/pipeop_preproc_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","text":"id (character(1)) id new object. fn (function) preprocessing function. shapes_out (function NULL \"infer\") private .shapes_out(shapes_in, param_vals, task) method PipeOpTaskPreprocTorch (see section Inheriting). Special values NULL infer: NULL, output shapes unknown. \"infer\", output shape function inferred calculates output shapes follows: input shape (NA, ...) meta-tensor shape (1, ...) created preprocessing function applied. Afterwards batch dimension (1) replaced NA shape returned. first dimension NA, output shape applying preprocessing function returned. Method \"infer\" correct cases, might fail edge cases. param_set (ParamSet NULL) parameter set. left NULL (default) parameter set inferred following way: parameters first ... fn set untyped parameters tags 'train' default value tagged 'required' well. Default values annotated. packages (character()) R packages object depends . rowwise (logical(1)) Whether preprocessing applied row-wise. parent_env (environment) parent environment R6 class. stages_init (character(1)) Initial value stages parameter. NULL (default), set \"\" case id starts \"trafo\" \"train\" starts \"augment\". Otherwise must specified. tags (character()) Tags pipeop","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/pipeop_preproc_torch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","text":"R6Class instance inheriting PipeOpTaskPreprocTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/pipeop_preproc_torch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Torch Preprocessing PipeOps — pipeop_preproc_torch","text":"","code":"PipeOpPreprocExample = pipeop_preproc_torch(\"preproc_example\", function(x, a) x + a) po_example = PipeOpPreprocExample$new() po_example$param_set #> <ParamSet(3)> #>                id    class lower upper nlevels        default  value #>            <char>   <char> <num> <num>   <num>         <list> <list> #> 1:              a ParamUty    NA    NA     Inf <NoDefault[0]> [NULL] #> 2:         stages ParamFct    NA    NA       3 <NoDefault[0]> [NULL] #> 3: affect_columns ParamUty    NA    NA     Inf  <Selector[1]> [NULL]"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/replace_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the head of a network Replaces the head of the network with a linear layer with d_out classes. — replace_head","title":"Replace the head of a network Replaces the head of the network with a linear layer with d_out classes. — replace_head","text":"Replace head network Replaces head network linear layer d_out classes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/replace_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the head of a network Replaces the head of the network with a linear layer with d_out classes. — replace_head","text":"","code":"replace_head(network, d_out)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/replace_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the head of a network Replaces the head of the network with a linear layer with d_out classes. — replace_head","text":"network (torch::nn_module) network d_out (integer(1)) number output classes.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_clbk.html","id":null,"dir":"Reference","previous_headings":"","what":"Sugar Function for Torch Callback — t_clbk","title":"Sugar Function for Torch Callback — t_clbk","text":"Retrieves one TorchCallbacks mlr3torch_callbacks. Works like mlr3::lrn() mlr3::lrns().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_clbk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sugar Function for Torch Callback — t_clbk","text":"","code":"t_clbk(.key, ...)  t_clbks(.keys)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_clbk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sugar Function for Torch Callback — t_clbk","text":".key (character(1)) key torch callback. ... () See description dictionary_sugar_get(). .keys (character()) keys callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_clbk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sugar Function for Torch Callback — t_clbk","text":"TorchCallback list() TorchCallbacks","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_clbk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sugar Function for Torch Callback — t_clbk","text":"","code":"t_clbk(\"progress\") #> <TorchCallback:progress> Progress #> * Generator: CallbackSetProgress #> * Parameters: list() #> * Packages: progress,mlr3torch,torch"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Function Quick Access — t_loss","title":"Loss Function Quick Access — t_loss","text":"Retrieve one TorchLosses mlr3torch_losses. Works like mlr3::lrn() mlr3::lrns().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Function Quick Access — t_loss","text":"","code":"t_loss(.key, ...)  t_losses(.keys, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Function Quick Access — t_loss","text":".key (character(1)) Key object retrieve. ... () See description dictionary_sugar_get. .keys (character()) keys losses.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loss Function Quick Access — t_loss","text":"TorchLoss","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Function Quick Access — t_loss","text":"","code":"t_loss(\"mse\", reduction = \"mean\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: reduction=mean #> * Packages: torch,mlr3torch #> * Task Types: regr # get the dictionary t_loss() #> <DictionaryMlr3torchLosses> with 3 stored values #> Keys: cross_entropy, l1, mse t_losses(c(\"mse\", \"l1\")) #> $mse #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr #>  #> $l1 #> <TorchLoss:l1> Absolute Error #> * Generator: nn_l1_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr #>  # get the dictionary t_losses() #> <DictionaryMlr3torchLosses> with 3 stored values #> Keys: cross_entropy, l1, mse"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizers Quick Access — t_opt","title":"Optimizers Quick Access — t_opt","text":"Retrieves one TorchOptimizers mlr3torch_optimizers. Works like mlr3::lrn() mlr3::lrns().","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizers Quick Access — t_opt","text":"","code":"t_opt(.key, ...)  t_opts(.keys, ...)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizers Quick Access — t_opt","text":".key (character(1)) Key object retrieve. ... () See description dictionary_sugar_get. .keys (character()) keys optimizers.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizers Quick Access — t_opt","text":"TorchOptimizer","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/t_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizers Quick Access — t_opt","text":"","code":"t_opt(\"adam\", lr = 0.1) #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: lr=0.1 #> * Packages: torch,mlr3torch # get the dictionary t_opt() #> <DictionaryMlr3torchOptimizers> with 5 stored values #> Keys: adagrad, adam, adamw, rmsprop, sgd t_opts(c(\"adam\", \"sgd\")) #> $adam #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_ignite_adam #> * Parameters: list() #> * Packages: torch,mlr3torch #>  #> $sgd #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_ignite_sgd #> * Parameters: list() #> * Packages: torch,mlr3torch #>  # get the dictionary t_opts() #> <DictionaryMlr3torchOptimizers> with 5 stored values #> Keys: adagrad, adam, adamw, rmsprop, sgd"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/task_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Dataset from a Task — task_dataset","title":"Create a Dataset from a Task — task_dataset","text":"Creates torch dataset mlr3 Task. resulting dataset's $.get_batch() method returns list elements x, y index: x list tensors, whose content defined parameter feature_ingress_tokens. y target variable content defined parameter target_batchgetter. .index index batch task's data. data returned device specified parameter device.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/task_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dataset from a Task — task_dataset","text":"","code":"task_dataset(task, feature_ingress_tokens, target_batchgetter = NULL)"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/task_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dataset from a Task — task_dataset","text":"task (Task) task build dataset. feature_ingress_tokens (named list() TorchIngressToken) ingress token defines one item $x value batch corresponding names. target_batchgetter (function(data, device)) function taking arguments data, data.table containing target variable, device. must return target torch tensor selected device.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/task_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Dataset from a Task — task_dataset","text":"torch::dataset","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/task_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dataset from a Task — task_dataset","text":"","code":"task = tsk(\"iris\") sepal_ingress = TorchIngressToken(   features = c(\"Sepal.Length\", \"Sepal.Width\"),   batchgetter = batchgetter_num,   shape = c(NA, 2) ) petal_ingress = TorchIngressToken(   features = c(\"Petal.Length\", \"Petal.Width\"),   batchgetter = batchgetter_num,   shape = c(NA, 2) ) ingress_tokens = list(sepal = sepal_ingress, petal = petal_ingress)  target_batchgetter = function(data) {   torch_tensor(data = data[[1L]], dtype = torch_float32())$unsqueeze(2) } dataset = task_dataset(task, ingress_tokens, target_batchgetter) batch = dataset$.getbatch(1:10) batch #> $x #> $x$sepal #> torch_tensor #>  5.1000  3.5000 #>  4.9000  3.0000 #>  4.7000  3.2000 #>  4.6000  3.1000 #>  5.0000  3.6000 #>  5.4000  3.9000 #>  4.6000  3.4000 #>  5.0000  3.4000 #>  4.4000  2.9000 #>  4.9000  3.1000 #> [ CPUFloatType{10,2} ] #>  #> $x$petal #> torch_tensor #>  1.4000  0.2000 #>  1.4000  0.2000 #>  1.3000  0.2000 #>  1.5000  0.2000 #>  1.4000  0.2000 #>  1.7000  0.4000 #>  1.4000  0.3000 #>  1.5000  0.2000 #>  1.4000  0.2000 #>  1.5000  0.1000 #> [ CPUFloatType{10,2} ] #>  #>  #> $.index #> torch_tensor #>   1 #>   2 #>   3 #>   4 #>   5 #>   6 #>   7 #>   8 #>   9 #>  10 #> [ CPULongType{10} ] #>  #> $y #> torch_tensor #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #> [ CPUFloatType{10,1} ] #>"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Callback Descriptor — torch_callback","title":"Create a Callback Descriptor — torch_callback","text":"Convenience function create custom TorchCallback. arguments available callback_set() also available . information correctly implement new callback, see CallbackSet.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Callback Descriptor — torch_callback","text":"","code":"torch_callback(   id,   classname = paste0(\"CallbackSet\", capitalize(id)),   param_set = NULL,   packages = NULL,   label = capitalize(id),   man = NULL,   on_begin = NULL,   on_end = NULL,   on_exit = NULL,   on_epoch_begin = NULL,   on_before_valid = NULL,   on_epoch_end = NULL,   on_batch_begin = NULL,   on_batch_end = NULL,   on_after_backward = NULL,   on_batch_valid_begin = NULL,   on_batch_valid_end = NULL,   on_valid_end = NULL,   state_dict = NULL,   load_state_dict = NULL,   initialize = NULL,   public = NULL,   private = NULL,   active = NULL,   parent_env = parent.frame(),   inherit = CallbackSet,   lock_objects = FALSE )"},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Callback Descriptor — torch_callback","text":"id (character(1))` id torch callback. classname (character(1)) class name. param_set (ParamSet) parameter set, present inferred $initialize() method. packages (character())packages callback depends . Default isNULL`. label (character(1)) label torch callback. Defaults capitalized id. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). default NULL. on_begin, on_end, on_epoch_begin, on_before_valid, on_epoch_end, on_batch_begin, on_batch_end, on_after_backward, on_batch_valid_begin, on_batch_valid_end, on_valid_end, on_exit (function) Function execute given stage, see section Stages. state_dict (function()) function retrieves state dict callback. available learner training. load_state_dict (function(state_dict)) Function loads callback state. initialize (function()) initialization method callback. public, private, active (list()) Additional public, private, active fields add callback. parent_env (environment()) parent environment R6Class. inherit (R6ClassGenerator) class inherit. class must either CallbackSet (default) inherit . lock_objects (logical(1)) Whether lock objects resulting R6Class. FALSE (default), values can freely assigned self without declaring class definition.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Callback Descriptor — torch_callback","text":"TorchCallback","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Create a Callback Descriptor — torch_callback","text":"first creates R6 class inheriting CallbackSet (using callback_set()) wraps generator TorchCallback can passed torch learner.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"stages","dir":"Reference","previous_headings":"","what":"Stages","title":"Create a Callback Descriptor — torch_callback","text":"begin :: Run training loop begins. epoch_begin :: Run beginning epoch. batch_begin :: Run forward call. after_backward :: Run backward call. batch_end :: Run optimizer step. batch_valid_begin :: Run forward call validation loop. batch_valid_end :: Run forward call validation loop. valid_end :: Run end validation. epoch_end :: Run end epoch. end :: Run last epoch. exit :: Run last, using .exit().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/reference/torch_callback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Callback Descriptor — torch_callback","text":"","code":"custom_tcb = torch_callback(\"custom\",   initialize = function(name) {     self$name = name   },   on_begin = function() {     cat(\"Hello\", self$name, \", we will train for \", self$ctx$total_epochs, \"epochs.\\n\")   },   on_end = function() {     cat(\"Training is done.\")   } )  learner = lrn(\"classif.torch_featureless\",   batch_size = 16,   epochs = 1,   callbacks = custom_tcb,   cb.custom.name = \"Marie\",   device = \"cpu\" ) task = tsk(\"iris\") learner$train(task) #> Hello Marie , we will train for  1 epochs. #> Training is done."},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"mlr3torch 0.2.0","text":"Removed optimizers fast (‘ignite’) variant exists. default optimizer now AdamW instead Adam. private LearnerTorch$.dataloader() method now operates longer task dataset generated private LearnerTorch$.dataset() method. shuffle parameter model training now initialized TRUE sidestep issues data sorted.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"performance-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Performance Improvements","title":"mlr3torch 0.2.0","text":"Optimizers now use faster (‘ignite’) version optimizers, leads considerable speed improvements. jit_trace parameter added LearnerTorch, set TRUE can lead significant speedups. enabled ‘static’ models, see torch tutorial information. Added parameter num_interop_threads LearnerTorch. tensor_dataset parameter added, allows stack batches beginning training make loading batches afterwards faster. Use faster default image loader.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"mlr3torch 0.2.0","text":"Added PipeOp adaptive average pooling. n_layers parameter added MLP learner. Added multimodal melanoma cifar{10, 100} example tasks. Added callback iteratively unfreeze parameters finetuning. Added different learning rate schedulers callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes:","title":"mlr3torch 0.2.0","text":"Torch learners can now used AutoTuner. Early stopping now uses epochs - patience internally tuned values instead trained number epochs . dataset learner must longer return tensors specified device, allows parallel dataloading GPUs. PipeOpBlock longer create ID clashes PipeOps graph (#260).","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"mlr3torch-012","dir":"Changelog","previous_headings":"","what":"mlr3torch 0.1.2","title":"mlr3torch 0.1.2","text":"CRAN release: 2024-10-15 Don’t use deprecated data_formats anymore Added CallbackSetTB, allows logging can viewed TensorBoard.","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"mlr3torch-011","dir":"Changelog","previous_headings":"","what":"mlr3torch 0.1.1","title":"mlr3torch 0.1.1","text":"CRAN release: 2024-09-12 fix(preprocessing): regarding construction PipeOps po(\"trafo_resize\") failed cases. fix(ci): tests run CI fix(learner): LearnerTabResnet now works correctly Fix tests run CI feat: added nn() helper function simplify creation neural network layers","code":""},{"path":"https://mlr3torch.mlr-org.com/dev/news/index.html","id":"mlr3torch-010","dir":"Changelog","previous_headings":"","what":"mlr3torch 0.1.0","title":"mlr3torch 0.1.0","text":"CRAN release: 2024-07-08 Initial CRAN release","code":""}]
