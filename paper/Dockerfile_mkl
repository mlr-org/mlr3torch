# -------- CUDA-capable base image --------
FROM nvcr.io/nvidia/cuda:12.4.1-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    TZ=Etc/UTC \
    ## Posit Public Package Manager â€“ Ubuntu 22.04 binary repo
    RSPM=https://packagemanager.posit.co/cran/__linux__/jammy/latest

# -------- system packages & R --------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget locales curl software-properties-common tzdata && \
    locale-gen en_US.UTF-8

# -------- add Intel oneAPI APT repo (for MKL) --------
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates gnupg wget && \
    mkdir -p /usr/share/keyrings && \
    wget -qO- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor -o /usr/share/keyrings/oneapi-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneapi.list

# -------- build toolchain, MKL, and R from source (linked to MKL) --------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        gfortran \
        libcurl4-openssl-dev \
        libreadline-dev \
        libx11-dev \
        libxt-dev \
        libpng-dev \
        libjpeg-dev \
        libcairo2-dev \
        libtiff5-dev \
        libglib2.0-dev \
        libssl-dev \
        libxml2-dev \
        libfontconfig1-dev \
        libfreetype6-dev \
        zlib1g-dev \
        libbz2-dev \
        liblzma-dev \
        libpcre2-dev \
        intel-oneapi-mkl-devel intel-oneapi-mkl && \
    rm -rf /var/lib/apt/lists/*


ENV MKLROOT=/opt/intel/oneapi/mkl/latest
RUN ls $MKLROOT/lib/

ENV LD_LIBRARY_PATH=${MKLROOT}/lib/:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH=${MKLROOT}/lib/:${LIBRARY_PATH}
ENV PKG_CONFIG_PATH=${MKLROOT}/lib/pkgconfig:${PKG_CONFIG_PATH}

RUN wget -q https://cran.r-project.org/src/base/R-4/R-4.5.0.tar.gz -O /tmp/R-4.5.0.tar.gz && \
    tar -xzf /tmp/R-4.5.0.tar.gz -C /tmp && rm /tmp/R-4.5.0.tar.gz

ENV MKL_LINKLINE="-L${MKLROOT}/lib/ \
  -Wl,--start-group -lmkl_gf_lp64 -lmkl_core -lmkl_gnu_thread -Wl,--end-group \
  -lpthread -lm -ldl -fopenmp -Wl,-rpath,${MKLROOT}/lib/"

RUN cd /tmp/R-4.5.0 && \
    ./configure --with-blas="$MKL_LINKLINE" --with-lapack="$MKL_LINKLINE" --enable-R-shlib&& \
    make -j"$(nproc)" && make install && \
    cd / && rm -rf /tmp/R-4.5.0

RUN Rscript -e "print(sessionInfo());"

# -------- install Python and pip packages --------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        python3-dev && \
    rm -rf /var/lib/apt/lists/*

RUN pip3 install \
    torch --index-url https://download.pytorch.org/whl/cu124 \
    numpy

# ---------- R defaults: PPM + binaries-only ----------
COPY .Rprofile /usr/local/lib/R/etc/Rprofile.site

RUN which R
ENV R_HOME=/usr/local/lib/R
ENV LD_LIBRARY_PATH=$R_HOME/lib:$LD_LIBRARY_PATH

#RUN R -q -e "options(repos = c(CRAN='${RSPM}')); install.packages('torch'); torch::install_torch()"

# -------- install R packages
RUN R -q -e "install.packages('torch'); torch::install_torch()"
RUN R -q -e "install.packages(c( \
  'mlr3mbo', \
  'torchdatasets', \
  'mlr3viz', \
  'batchtools', \
  'here', \
  'reticulate', \
  'cowplot', \
  'remotes', \
  'precrec', \
  'knitr', \
  'mlr3learners', \
  'ranger', \
  'rgenoud', \
  'DiceKriging' \
))"

RUN R -q -e "remotes::install_github('mlr-org/mlr3torch@4f43857')"

CMD ["bash"]
