[{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed. version GNU Lesser General Public License incorporates terms conditions version 3 GNU General Public License, supplemented additional permissions listed .","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_0-additional-definitions","dir":"","previous_headings":"","what":"0. Additional Definitions","title":"GNU Lesser General Public License","text":"used herein, “License” refers version 3 GNU Lesser General Public License, “GNU GPL” refers version 3 GNU General Public License. “Library” refers covered work governed License, Application Combined Work defined . “Application” work makes use interface provided Library, otherwise based Library. Defining subclass class defined Library deemed mode using interface provided Library. “Combined Work” work produced combining linking Application Library. particular version Library Combined Work made also called “Linked Version”. “Minimal Corresponding Source” Combined Work means Corresponding Source Combined Work, excluding source code portions Combined Work , considered isolation, based Application, Linked Version. “Corresponding Application Code” Combined Work means object code /source code Application, including data utility programs needed reproducing Combined Work Application, excluding System Libraries Combined Work.","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_1-exception-to-section-3-of-the-gnu-gpl","dir":"","previous_headings":"","what":"1. Exception to Section 3 of the GNU GPL","title":"GNU Lesser General Public License","text":"may convey covered work sections 3 4 License without bound section 3 GNU GPL.","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_2-conveying-modified-versions","dir":"","previous_headings":"","what":"2. Conveying Modified Versions","title":"GNU Lesser General Public License","text":"modify copy Library, , modifications, facility refers function data supplied Application uses facility (argument passed facility invoked), may convey copy modified version: ) License, provided make good faith effort ensure , event Application supply function data, facility still operates, performs whatever part purpose remains meaningful, b) GNU GPL, none additional permissions License applicable copy.","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_3-object-code-incorporating-material-from-library-header-files","dir":"","previous_headings":"","what":"3. Object Code Incorporating Material from Library Header Files","title":"GNU Lesser General Public License","text":"object code form Application may incorporate material header file part Library. may convey object code terms choice, provided , incorporated material limited numerical parameters, data structure layouts accessors, small macros, inline functions templates (ten fewer lines length), following: ) Give prominent notice copy object code Library used Library use covered License. b) Accompany object code copy GNU GPL license document.","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_4-combined-works","dir":"","previous_headings":"","what":"4. Combined Works","title":"GNU Lesser General Public License","text":"may convey Combined Work terms choice , taken together, effectively restrict modification portions Library contained Combined Work reverse engineering debugging modifications, also following: ) Give prominent notice copy Combined Work Library used Library use covered License. b) Accompany Combined Work copy GNU GPL license document. c) Combined Work displays copyright notices execution, include copyright notice Library among notices, well reference directing user copies GNU GPL license document. d) one following: 0) Convey Minimal Corresponding Source terms License, Corresponding Application Code form suitable , terms permit, user recombine relink Application modified version Linked Version produce modified Combined Work, manner specified section 6 GNU GPL conveying Corresponding Source. 1) Use suitable shared library mechanism linking Library. suitable mechanism one () uses run time copy Library already present user’s computer system, (b) operate properly modified version Library interface-compatible Linked Version. e) Provide Installation Information, otherwise required provide information section 6 GNU GPL, extent information necessary install execute modified version Combined Work produced recombining relinking Application modified version Linked Version. (use option 4d0, Installation Information must accompany Minimal Corresponding Source Corresponding Application Code. use option 4d1, must provide Installation Information manner specified section 6 GNU GPL conveying Corresponding Source.)","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_5-combined-libraries","dir":"","previous_headings":"","what":"5. Combined Libraries","title":"GNU Lesser General Public License","text":"may place library facilities work based Library side side single library together library facilities Applications covered License, convey combined library terms choice, following: ) Accompany combined library copy work based Library, uncombined library facilities, conveyed terms License. b) Give prominent notice combined library part work based Library, explaining find accompanying uncombined form work.","code":""},{"path":"https://mlr3torch.mlr-org.com/LICENSE.html","id":"id_6-revised-versions-of-the-gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"6. Revised Versions of the GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Free Software Foundation may publish revised /new versions GNU Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library received specifies certain numbered version GNU Lesser General Public License “later version” applies , option following terms conditions either published version later version published Free Software Foundation. Library received specify version number GNU Lesser General Public License, may choose version GNU Lesser General Public License ever published Free Software Foundation. Library received specifies proxy can decide whether future versions GNU Lesser General Public License shall apply, proxy’s public statement acceptance version permanent authorization choose version Library.","code":""},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Building a Neural Network using PipeOps","text":"TorchOps Neo project tries use mlr3pipelines backet implement building network architectures PipeOps. Specific PipeOps, inheriting [PipeOpModule], contain torch_module objects. PipeOps chained Graph passes torch_tensor objects along edges. Another class PipeOp, [PipeOpTorch], can used build torch module Graphs, become parts normal data preprocessing pipelines. two distinct classes PipeOps necessary since represent different things: [PipeOpTorch] operators correspond torch’s nn_module_generator functions, [PipeOpModule] contain instantiated nn_module-objects. changes made compared old code, particular handling different columns / datatypes within Tasks network input handled. network training code also refactored simplified.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"torch-primer","dir":"Articles","previous_headings":"Torch modules and PipeOpModule","what":"Torch Primer","title":"Building a Neural Network using PipeOps","text":"input tensor: 2-batch 3 units. nn_module constructed nn_module_generator. nn_linear one simpler generators: Applying module gives 2-batch 4 units: neural network one (4-unit) hidden layer two outputs needs following ingredients Piping tensor : Training neural network consists Toch keeping track parameters used calculate output calculate gradients etc. particular, “piping series modules” happen lot. obvious idea mlr3pipelines.","code":"input <- torch_randn(2, 3) input #> torch_tensor #>  0.9331 -0.8989 -0.1502 #>  0.1250 -0.1174  1.3385 #> [ CPUFloatType{2,3} ] module_1 <- nn_linear(3, 4, bias = TRUE) output <- module_1(input) output #> torch_tensor #>  0.0244 -0.2507  0.4597  0.4014 #> -0.3800  0.9842  0.6800 -0.1913 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] activation <- nn_sigmoid() module_2 <- nn_linear(4, 3, bias = TRUE) softmax <- nn_softmax(2) output <- module_1(input) output <- activation(output) output <- module_2(output) output <- softmax(output) output #> torch_tensor #>  0.3027  0.4155  0.2817 #>  0.3078  0.4340  0.2582 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"wrapped-torch-modules-as-pipeopmodule","dir":"Articles","previous_headings":"Torch modules and PipeOpModule","what":"Wrapped Torch modules as PipeOpModule","title":"Building a Neural Network using PipeOps","text":"Wrapping nn_module objects PipeOp advantage network structure can represented Graph object made explicit (can plotted, can extended manipulated), compared e.g. writing function pipes input series modules. PipeOpModule can used wrap module directly, usually constructed PipeOpTorch (see later). typically single input single output, although multiple inputs possible (module called multiple arguments), multiple outputs possible module-function returns list. Number outputs must declared construction, . Wrapping linear module_1 works like : used familiar way: Note use $train(), since Torch modules anything maps state (filled empty list). single hidden layer neural network can constructed Graph, can training . Using Graph’s $train() pipe tensor Graph:","code":"po_module_1 <- PipeOpModule$new(\"module_1\", module_1) output <- po_module_1$train(list(input))[[1]] output #> torch_tensor #>  0.0244 -0.2507  0.4597  0.4014 #> -0.3800  0.9842  0.6800 -0.1913 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] po_activation <- PipeOpModule$new(\"activation\", activation) po_module_2 <- PipeOpModule$new(\"module_2\", module_2) po_softmax <- PipeOpModule$new(\"softmax\", softmax)  module_graph <- po_module_1 %>>% po_activation %>>% po_module_2 %>>% po_softmax output <- module_graph$train(input)[[1]] output #> torch_tensor #>  0.3027  0.4155  0.2817 #>  0.3078  0.4340  0.2582 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"graph-as-a-torch-module","dir":"Articles","previous_headings":"Torch modules and PipeOpModule","what":"Graph as a Torch module","title":"Building a Neural Network using PipeOps","text":"native class torch represents transformation tensors nn_module. therefore also advantageous Graph PipeOpModule also nn_module. particularly useful nn_module accounting model parameters contains backpropagation (believe). Instead class inherits nn_module Graph (doesn’t work R6, since multiple inheritance available), class inherits nn_module contains Graph member slot (composition). class [nn_graph]. constructed Graph, well information shape(s) torch_tensor(s) expects inputs. Shape info communicated integer-valued numeric vector; dimensions arbitrary, e.g. batch-size, given NA. network expects input shape c(NA, 3), since first layer created nn_linear(in_features = 3). (Currently nothing done shape information, future used asserts, maybe concatenate nn_graphs.) Graph multiple outputs, also possible select subset outputs use, change output order, giving output_map argument. module gives us convenience torch nn_module objects, e.g.: can used transform tensors just torch nn_module:","code":"# the name of the single input is: module_graph$input #>              name        train predict    op.id channel.name #> 1: module_1.input torch_tensor    NULL module_1        input  graph_module <- nn_graph(   module_graph,   shapes_in = list(module_1.input = c(NA, 3)) ) graph_module$children #> $modules #> An `nn_module` containing 31 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #16 parameters #> • 1: <nn_sigmoid> #0 parameters #> • 2: <nn_linear> #15 parameters #> • 3: <nn_softmax> #0 parameters graph_module$parameters #> $modules.0.weight #> torch_tensor #> -0.3298 -0.0437 -0.4277 #> -0.5136  0.2724  0.4077 #> -0.3350 -0.2780  0.1121 #>  0.2977 -0.0775 -0.1958 #> [ CPUFloatType{4,3} ][ requires_grad = TRUE ] #>  #> $modules.0.bias #> torch_tensor #>  0.2286 #>  0.5347 #>  0.5392 #>  0.0245 #> [ CPUFloatType{4} ][ requires_grad = TRUE ] #>  #> $modules.2.weight #> torch_tensor #>  0.0941  0.2754 -0.4603  0.4646 #> -0.1366 -0.2303  0.2229 -0.3258 #> -0.3272 -0.4063  0.0434  0.2858 #> [ CPUFloatType{3,4} ][ requires_grad = TRUE ] #>  #> $modules.2.bias #> torch_tensor #> -0.4135 #>  0.2960 #> -0.1754 #> [ CPUFloatType{3} ][ requires_grad = TRUE ] graph_module(input) #> torch_tensor #>  0.3027  0.4155  0.2817 #>  0.3078  0.4340  0.2582 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"modeldescriptor","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"ModelDescriptor","title":"Building a Neural Network using PipeOps","text":"[PipeOpModule] represents anf nn_module fixed specific tensor shape hyperparameters. constructing neural network using operators, one take care output shape operations match input shapes following operations. complete Graph matching [PipeOpModule]s can constructed using operators mostly inherit [PipeOpTorch], making use ModelDescriptor class. ModelDescriptor class contains Graph [PipeOpModule] necessary meta-info. [PipeOpTorch] transforms ModelDescriptor adds [PipeOpModule]s Graph. ModelDescriptors always build [Graph] specific [Task]. easiest way initialize proper ModelDescriptor use appropriate [PipeOpTorchIngress] PipeOp given datatype. ModelDescriptor S3 object contains [Graph], information generate data ($ingress $task), tags build model unrelated architecture ($optimizer, $loss $callbacks) well information necessary extend graph along given output ($.pointer $.pointer_shape). $.pointer identifies output $graph [PipeOpTorch] extend. Piping ModelDescriptor [PipeOpTorchLinear], example, adds [PipeOpModule] wrapping torch nn_linear. $.pointer now updated identify output [PipeOpModule], $.pointer_shape shows shape changed 4 units (3 input ). [model_descriptor_to_module()] function converts [nn_graph], functional torch nn_module.","code":"task <- tsk(\"iris\")$select(colnames(iris)[1:3])  po_torch_in <- po(\"torch_ingress_num\") md <- po_torch_in$train(list(task))[[1]]  md #> <ModelDescriptor: 1 ops> #> * Ingress:  torch_ingress_num.input: [(NA,3)] #> * Task:  iris [classif] #> * Callbacks:  character(0) #> * Optimizer:  N/A #> * Loss:  N/A #> * .pointer:  torch_ingress_num.output [(NA,3)] unclass(md) #> $graph #> Graph with 1 PipeOps: #>                 ID         State sccssors prdcssors #>  torch_ingress_num <<UNTRAINED>>                    #>  #> $ingress #> $ingress$torch_ingress_num.input #> Ingress: Task[Petal.Length,Sepal.Length,Sepal.Width] --> Tensor(NA, 3) #>  #>  #> $task #> <TaskClassif:iris> (150 x 4): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (3): #>   - dbl (3): Petal.Length, Sepal.Length, Sepal.Width #>  #> $optimizer #> NULL #>  #> $loss #> NULL #>  #> $callbacks #> named list() #>  #> $.pointer #> [1] \"torch_ingress_num\" \"output\"            #>  #> $.pointer_shape #> [1] NA  3 po_torch_linear <- po(\"nn_linear\", out_features = 4) md <- po_torch_linear$train(list(md))[[1]]  md$graph #> Graph with 2 PipeOps: #>                 ID         State  sccssors         prdcssors #>  torch_ingress_num <<UNTRAINED>> nn_linear                   #>          nn_linear <<UNTRAINED>>           torch_ingress_num md$.pointer #> [1] \"nn_linear\" \"output\" md$.pointer_shape #> [1] NA  4 small_module <- model_descriptor_to_module(md, list(md$.pointer))  small_module(input) #> torch_tensor #>  0.5389 -0.1290 -0.2667  0.4351 #>  0.7544 -0.1537 -0.2124  0.3542 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"using-modeldescriptor-to-get-data","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Using ModelDescriptor to get Data","title":"Building a Neural Network using PipeOps","text":"ModelDescriptor represent Graph nn_module created, also way Task processed get input batches. torch dataset can created calling task_dataset(); task feature_ingress_tokens arguments can retrieved ModelDescriptor. target_batchgetter needs created extra (necessary), since depends ultimate machine learning model, looked far. Use $.getbatch() method get batch can given nn_module. Note $x $y slot, latter used, account possible target batches. $x slot also list, since able handle NNs multiple inputs (see ).","code":"td <- task_dataset(   task = md$task,   feature_ingress_tokens = md$ingress )  td #> <dataset> #>   Public: #>     .getbatch: function (index)  #>     .getitem: function (index)  #>     .length: function ()  #>     all_features: Petal.Length Sepal.Length Sepal.Width Species #>     clone: function (deep = FALSE)  #>     device: cpu #>     feature_ingress_tokens: list #>     initialize: function (task, feature_ingress_tokens, target_batchgetter = NULL,  #>     target_batchgetter: NULL #>     task: TaskClassif, TaskSupervised, Task, R6 batch <- td$.getbatch(1:3) batch #> $x #> $x$torch_ingress_num.input #> torch_tensor #>  1.4000  5.1000  3.5000 #>  1.4000  4.9000  3.0000 #>  1.3000  4.7000  3.2000 #> [ CPUFloatType{3,3} ] #>  #>  #> $y #> NULL #>  #> $.index #> [1] 1 2 3  small_module(batch$x[[1]]) #> torch_tensor #> -2.1661  1.6924 -0.6798 -1.2541 #> -2.1409  1.6545 -0.6939 -1.2074 #> -1.9616  1.5571 -0.6535 -1.1331 #> [ CPUFloatType{3,4} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"building-sequential-nns","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Building sequential NNs","title":"Building a Neural Network using PipeOps","text":"sequential NN can easily implemented follows: Note second nn_linear need informed output dimension first nn_linear, since ModelDescriptor passed along Graph edges knows info ($.pointer_shape slot).","code":"graph_generator <- po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\") %>>%     po(\"nn_sigmoid\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%       po(\"nn_softmax\", dim = 2) md_sequential <- graph_generator$train(task)[[1]]  graph_module <- model_descriptor_to_module(md_sequential, list(md_sequential$.pointer))  graph_module(input) #> torch_tensor #>  0.2152  0.5874  0.1973 #>  0.2326  0.5716  0.1958 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"building-more-interesting-nns","dir":"Articles","previous_headings":"Building Torch Models for Tasks using PipeOpTorch","what":"Building more interesting NNs","title":"Building a Neural Network using PipeOps","text":"selling-point mlr3pipelines ability easily represent computational Graphs. ModelDescriptor / [PipeOpTorch] setup built make full use functionality. possible multiple inputs NN using multiple [PipeOpTorchIngress] inputs, possible parallel alternative path branching, possible multiple outputs. Consider following (bit nonsensical) network operates differently \"Petal\" \"Sepal\" features tsk(\"iris\"). manually split task , shown wholly integrated mlr3pipelines pipeline can automatically.  can use create neural network iris tasks created . set $keep_results debug flag can inspection happening: make multiple observations : can observe ModelDescriptor grows passed along edges graph_iris. Note $graph slot ModelDescriptor often updated -reference, time inspect intermediate results, may contain complete graph. However, see $ingress, $.pointer $.pointer_shape ModelDescriptors take sepal.-path differ ones take petal.-path: po(\"nn_merge_cat\") unites two ModelDescriptors contains common ingress. .pointer_shape now reflects output “cat”-operation: 2nd dimension added : Multiple ModelDescriptors created, since graph_iris multiple outpus. makes possible create neural network multiple outputs. need unite outputs graph_iris using [model_descriptor_union()] can pass [model_descriptor_to_module()]. need collect output_pointers separately. list_output must set TRUE since module multiple outputs. PipeOpBranch disappears resulting Graph [PipeOpModule] iris_module. [PipeOpTorch]s graph_iris add anything ModelDescriptors. branch interpeted graph_iris runs, nn_relu path followed. iris_module therefore contains Graph “relu” activation:  ModelDescriptor’s $task slot contains Task features used create input data NN inputs. can given task_dataset(), along $ingress, create torch dataset creates batches. , output graph_iris can used: resulting module multiple inputs multiple outputs. call first two rows iris, set debug $keep_results flag can inspect happening nn_module’s $graph: first linear layer takes “Sepal” input (\"linear1\") creates 2x4 tensor (batch size 2, 4 units), \"linear3\" layer 2x5 output: observe po(\"nn_merge_cat\") concatenates , expected:","code":"iris_petal <- tsk(\"iris\")$select(c(\"Petal.Length\", \"Petal.Width\")) iris_sepal <- tsk(\"iris\")$select(c(\"Sepal.Length\", \"Sepal.Width\")) graph_sepal <- po(\"torch_ingress_num\", id = \"sepal.in\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\")  graph_petal <- po(\"torch_ingress_num\", id = \"petal.in\") %>>%   po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%   po(\"nn_tanh\") %>>%   po(\"nn_linear\", out_features = 5, id = \"linear3\")  graph_common <- ppl(\"branch\", graphs = list(     sigmoid = po(\"nn_sigmoid\"),     relu = po(\"nn_relu\")   )) %>>%   gunion(list(     po(\"nn_linear\", out_features = 1, id = \"lin_out\"),     po(\"nn_linear\", out_features = 3, id = \"cat_out\") %>>%       po(\"nn_softmax\", dim = 2)   ))   graph_iris <- gunion(list(graph_sepal, graph_petal)) %>>%   po(\"nn_merge_cat\") %>>%   graph_common  graph_iris$plot() graph_iris$param_set$values$branch.selection <- \"relu\"  graph_iris$keep_results = TRUE  iris_mds <- graph_iris$train(   input = list(sepal.in.input = iris_sepal, petal.in.input = iris_petal),   single_input = FALSE )  iris_mds #> $lin_out.output #> <ModelDescriptor: 11 ops> #> * Ingress:  sepal.in.input: [(NA,2)], petal.in.input: [(NA,2)] #> * Task:  iris [classif] #> * Callbacks:  character(0) #> * Optimizer:  N/A #> * Loss:  N/A #> * .pointer:  lin_out.output [(NA,1)] #>  #> $nn_softmax.output #> <ModelDescriptor: 11 ops> #> * Ingress:  sepal.in.input: [(NA,2)], petal.in.input: [(NA,2)] #> * Task:  iris [classif] #> * Callbacks:  character(0) #> * Optimizer:  N/A #> * Loss:  N/A #> * .pointer:  nn_softmax.output [(NA,3)] # sepal.in path graph_iris$pipeops$linear1$.result[[1]]$ingress #> $sepal.in.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) graph_iris$pipeops$linear1$.result[[1]]$.pointer #> [1] \"linear1\" \"output\" graph_iris$pipeops$linear1$.result[[1]]$.pointer_shape #> [1] NA  4  # petal.in path graph_iris$pipeops$linear3$.result[[1]]$ingress #> $petal.in.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) graph_iris$pipeops$linear3$.result[[1]]$.pointer #> [1] \"linear3\" \"output\" graph_iris$pipeops$linear3$.result[[1]]$.pointer_shape #> [1] NA  5 graph_iris$pipeops$nn_merge_cat$.result[[1]]$ingress #> $sepal.in.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #> $petal.in.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) graph_iris$pipeops$nn_merge_cat$.result[[1]]$.pointer_shape #> [1] NA  9 iris_mds_union = model_descriptor_union(iris_mds[[1]], iris_mds[[2]]) output_pointers = list(iris_mds[[1]]$.pointer, iris_mds[[2]]$.pointer) output_pointers #> [[1]] #> [1] \"lin_out\" \"output\"  #>  #> [[2]] #> [1] \"nn_softmax\" \"output\" iris_module = model_descriptor_to_module(iris_mds_union, output_pointers, list_output = TRUE) iris_module$graph$plot() iris_mds_union$task  # contains all features #> <TaskClassif:iris> (150 x 5): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width  iris_td <- task_dataset(   task = iris_mds_union$task,   feature_ingress_tokens = iris_mds_union$ingress )  batch <- iris_td$.getbatch(1:2) batch #> $x #> $x$sepal.in.input #> torch_tensor #>  5.1000  3.5000 #>  4.9000  3.0000 #> [ CPUFloatType{2,2} ] #>  #> $x$petal.in.input #> torch_tensor #>  1.4000  0.2000 #>  1.4000  0.2000 #> [ CPUFloatType{2,2} ] #>  #>  #> $y #> NULL #>  #> $.index #> [1] 1 2 iris_module$graph$keep_results = TRUE  iris_module(   sepal.in.input = batch$x$sepal.in.input,   petal.in.input = batch$x$petal.in.input ) #> $lin_out.output #> torch_tensor #> -0.3338 #> -0.3640 #> [ CPUFloatType{2,1} ][ grad_fn = <AddmmBackward0> ] #>  #> $nn_softmax.output #> torch_tensor #>  0.1160  0.7134  0.1706 #>  0.1259  0.7069  0.1672 #> [ CPUFloatType{2,3} ][ grad_fn = <SoftmaxBackward0> ] iris_module$graph$pipeops$linear1$.result #> $output #> torch_tensor #> -0.1436  0.4729 -0.8980  3.8363 #>  0.0179  0.6074 -0.7690  3.5465 #> [ CPUFloatType{2,4} ][ grad_fn = <AddmmBackward0> ] iris_module$graph$pipeops$linear3$.result #> $output #> torch_tensor #> 0.01 * #>  5.0021 -17.0187 -48.7343 -36.7424 -9.1976 #>   5.0021 -17.0187 -48.7343 -36.7424 -9.1976 #> [ CPUFloatType{2,5} ][ grad_fn = <AddmmBackward0> ] iris_module$graph$pipeops$nn_merge_cat$.result #> $output #> torch_tensor #> -0.1436  0.4729 -0.8980  3.8363  0.0500 -0.1702 -0.4873 -0.3674 -0.0920 #>  0.0179  0.6074 -0.7690  3.5465  0.0500 -0.1702 -0.4873 -0.3674 -0.0920 #> [ CPUFloatType{2,9} ][ grad_fn = <CatBackward0> ]"},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"optimizer-and-loss","dir":"Articles","previous_headings":"Building Torch Learners","what":"Optimizer and Loss","title":"Building a Neural Network using PipeOps","text":"now seen NN Graphs [PipeOpModule] created turned nn_modules. Using [PipeOpTorch] even creates ModelDescriptor objects contain additional info batch tensors extracted Tasks. complete Learner, still necessary define loss-function used optimization, optimizer . Optimizers represented [TorchOptimizer] objects – wrap torch torch_optimizer_generator object also provide ParamSet. can obtained Dictionary using t_opt quick-access function. Loss-functions work : [TorchLoss] obtained Dictionary using t_loss() ParamSets.","code":"adam <- t_opt(\"adam\", lr = 0.02) adam #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: lr=0.02 #> * Packages: torch,mlr3torch adam$param_set #> <ParamSet> #>              id    class lower upper nlevels     default value #> 1:           lr ParamDbl 0e+00   Inf     Inf       0.001  0.02 #> 2:        betas ParamUty    NA    NA     Inf 0.900,0.999       #> 3:          eps ParamDbl 1e-16 1e-04     Inf       1e-08       #> 4: weight_decay ParamDbl 0e+00 1e+00     Inf           0       #> 5:      amsgrad ParamLgl    NA    NA       2       FALSE xe <- t_loss(\"cross_entropy\") xe #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_crossentropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"learnerclassiftorchmodel-and-learnerregrtorchmodel","dir":"Articles","previous_headings":"Building Torch Learners","what":"[LearnerClassifTorchModel] and [LearnerRegrTorchModel]","title":"Building a Neural Network using PipeOps","text":"[LearnerClassifTorchModel] represents classification model using torch NNs. needs nn_module, well list [TorchIngressToken] define batches created Task. [TorchIngressToken] hard-code column-names Task used data-input, Learner created like therefore works specific Task created. (Generally full mlr3pipelines-UI used problem, see .) following uses sequential NN : training model, set hyperparameters. Among others, use [CallbackTorch] prints progress validation losses request. following calls $predict_newdata function plot response surface along Sepal.Width = mean(Sepal.Width) plane, along ground-truth values:","code":"lr_sequential <- LearnerClassifTorchModel$new(   network = model_descriptor_to_module(md_sequential, list(md_sequential$.pointer)),   ingress_tokens = md_sequential$ingress,   optimizer = adam,   callbacks = t_clbk(\"progress\"),   loss = xe )  lr_sequential #> <LearnerClassifTorchModel:classif.torch_model>: Torch Classification Model #> * Model: - #> * Parameters: opt.lr=0.02 #> * Packages: mlr3, mlr3torch, torch #> * Predict Types:  [response], prob #> * Feature Types: logical, integer, numeric, character, factor, ordered, #>   POSIXct, imageuri #> * Properties: multiclass, twoclass lr_sequential$param_set$set_values(   batch_size = 50,   epochs = 50,   measures_train = msrs(c(\"classif.logloss\", \"classif.ce\")) ) lr_sequential$predict_type = \"response\"  lr_sequential$train(md_sequential$task) library(\"data.table\") newdata <- cbind(data.table(Sepal.Width = mean(iris$Sepal.Width)), CJ(   Sepal.Length = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 30),   Petal.Length = seq(min(iris$Petal.Length), max(iris$Petal.Length), length.out = 30) ))  predictions <- lr_sequential$predict_newdata(newdata)  library(\"ggplot2\")  plot_predictions <- function(predictions) {   ggplot(cbind(newdata, Species = predictions$response),       aes(x = Sepal.Length, y = Petal.Length, fill = Species)) +     geom_tile(alpha = .3) +      geom_point(data = iris,       aes(x = Sepal.Length, y = Petal.Length, fill = Species),       color = \"black\", pch = 21, size = 3) +     theme_bw() } plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"torch-learner-pipelines","dir":"Articles","previous_headings":"","what":"Torch Learner Pipelines","title":"Building a Neural Network using PipeOps","text":"model shown constructed using ModelDescriptor generated Graph [PipeOpTorch] operators. ModelDescriptor furthermore contains Task pertains. makes possible use create NN model gets trained right away, using [PipeOpTorchModelClassif]. missing prerequisite now add desired [TorchOptimizer] [TorchLoss] information ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"adding-optimizer-and-loss-meta-info-to-modeldescriptor","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Adding Optimizer and Loss Meta-Info to ModelDescriptor","title":"Building a Neural Network using PipeOps","text":"Remember ModelDescriptor $optimizer $loss slots necessary build complete Learner NN. can set corresponding [PipeOpTorch] operators. po(\"torch_optimizer\") used set $optimizer slot ModelDescriptor; takes desired TorchOptimizer object construction exports ParamSet.","code":"po_adam = po(\"torch_optimizer\", optimizer = adam)  # hyperparameters are made available and can be changed: po_adam$param_set$values #> $lr #> [1] 0.02  md_sequential <- po_adam$train(list(md_sequential))[[1]]  md_sequential$optimizer #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: lr=0.02 #> * Packages: torch,mlr3torch po_xe <- po(\"torch_loss\", loss = xe) md_sequential <- po_xe$train(list(md_sequential))[[1]]  md_sequential$loss #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_crossentropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"combined-instantiation-and-training-of-learnerclassiftorchmodel","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Combined Instantiation and Training of [LearnerClassifTorchModel]","title":"Building a Neural Network using PipeOps","text":"ModelDescriptor can now given po(\"torch_model_classif\"). po(\"torch_model_classif\") behaves similarly PipeOpLearner: returns NULL training, prediction $predict().","code":"po_model = po(\"torch_model_classif\", batch_size = 50, epochs = 50)  po_model$train(list(md_sequential)) #> $output #> NULL newtask = TaskClassif$new(\"newdata\", cbind(newdata, Species = factor(NA, levels = levels(iris$Species))), target = \"Species\")  predictions <- po_model$predict(list(newtask))[[1]]  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"the-whole-pipeline","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"The whole Pipeline","title":"Building a Neural Network using PipeOps","text":"Remember md_sequential created using Graph initial Task piped . combine Graph [PipeOpTorchModelClassif], get Graph behaves like Graph ends PipeOpLearner, can therefore wrapped GraphLearner. following uses one hidden layer : Compare resulting Graph  Graph trained model:  Predictions, (can use predict_newdata ):","code":"graph_sequential_full <- po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 4, id = \"linear1\") %>>%     po(\"nn_sigmoid\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%       po(\"nn_softmax\", dim = 2, id = \"softmax\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear3\") %>>%       po(\"nn_softmax\", dim = 2, id = \"softmax2\") %>>%     po(\"torch_optimizer\", optimizer = adam) %>>%     po(\"torch_loss\", loss = xe) %>>%     po(\"torch_model_classif\", batch_size = 50, epochs = 100) lr_sequential_full = as_learner(graph_sequential_full)  lr_sequential_full$train(task) graph_sequential_full$plot() model <- lr_sequential_full$graph_model$state$torch_model_classif$model model$network$graph$plot() predictions <- lr_sequential_full$predict_newdata(newdata)  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/articles/pipeop_torch.html","id":"mixed-pipelines","dir":"Articles","previous_headings":"Torch Learner Pipelines","what":"Mixed Pipelines","title":"Building a Neural Network using PipeOps","text":"just limited [PipeOpTorch] kinds Graphs, also limited single [PipeOpTorchIngress]. following pipeline, example, removes Petal.Length columns Task fits model:   using Petal.Length Sepal.Length separately first?","code":"gr <- po(\"select\", selector = selector_name(\"Petal.Length\")) %>>%   po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 5, id = \"linear1\") %>>%   po(\"nn_relu\") %>>%   po(\"nn_linear\", out_features = 3, id = \"linear2\") %>>%   po(\"nn_softmax\", dim = 2) %>>%   po(\"torch_optimizer\", optimizer = adam) %>>%   po(\"torch_loss\", loss = xe) %>>%   po(\"torch_model_classif\", batch_size = 50, epochs = 50) gr$plot() lr <- as_learner(gr) lr$train(task) predictions <- lr$predict_newdata(newdata)  plot_predictions(predictions) gr <- gunion(list(       po(\"select\", selector = selector_name(\"Petal.Length\"), id = \"sel1\") %>>%         po(\"torch_ingress_num\", id = \"ingress.petal\") %>>%         po(\"nn_linear\", out_features = 3, id = \"linear1\"),       po(\"select\", selector = selector_name(\"Sepal.Length\"), id = \"sel2\") %>>%         po(\"torch_ingress_num\", id = \"ingress.sepal\") %>>%         po(\"nn_linear\", out_features = 3, id = \"linear2\")     )) %>>%     po(\"nn_merge_cat\")  %>>%     po(\"nn_relu\", id = \"act1\") %>>%     po(\"nn_linear\", out_features = 3, id = \"linear3\") %>>%     po(\"nn_softmax\", dim = 2, id = \"act3\") %>>%     po(\"torch_optimizer\", optimizer = adam, lr = 0.1) %>>%     po(\"torch_loss\", loss = xe) %>>%     po(\"torch_model_classif\", batch_size = 50, epochs = 50)  gr$plot() lr <- as_learner(gr) lr$train(task) predictions <- lr$predict_newdata(newdata)  plot_predictions(predictions)"},{"path":"https://mlr3torch.mlr-org.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Fischer. Maintainer, author. Bernd Bischl. Contributor. Lukas Burk. Author. Martin Binder. Author. Florian Pfisterer. Contributor.","code":""},{"path":"https://mlr3torch.mlr-org.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fischer S, Burk L, Binder M (2023). mlr3torch: Deep Learning 'mlr3'. R package version 0.0.0.9000.","code":"@Manual{,   title = {mlr3torch: Deep Learning for 'mlr3'},   author = {Sebastian Fischer and Lukas Burk and Martin Binder},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"mlr3torch","dir":"","previous_headings":"","what":"Deep Learning for mlr3","title":"Deep Learning for mlr3","text":"Deep Learning torch mlr3.","code":""},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deep Learning for mlr3","text":"","code":"remotes::install_github(\"mlr-org/mlr3torch\")"},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"what-is-mlr3torch","dir":"","previous_headings":"","what":"What is mlr3torch?","title":"Deep Learning for mlr3","text":"mlr3torch deep learning framework mlr3 ecosystem built top torch. allows easily build, train evaluate deep learning models lines codes, without needing worry low-level details. --shelf learners readily available, custom architectures can defined connection PipeOpTorch operators mlr3pipelines::Graph. Using predefined learners simple multi layer perceptron (MLP) works just like mlr3 Learner. learner can example used resampling benchmarking. can also tuned using mlr3tuning. , construct architecture using PipeOpTorch objects. first pipeop – PipeOpTorchIngress – defines entrypoint network. subsequent pipeops define neural network layers. turn learner, configure loss, optimizer, callbacks training arguments.","code":"learner_mlp = lrn(\"classif.mlp\",   # defining network parameters   activation     = \"relu\",   layers         = 1,   d_hidden       = 20,   # training parameters   batch_size     = 16,   epochs         = 50,   device         = \"cpu\",   # Defining the optimizer, loss, and callbacks   optimizer      = t_opt(\"adam\", lr = 0.1),   loss           = t_loss(\"cross_entropy\"),   callbacks      = t_clbk(\"history\"), # this saves the history in the learner   # Measures to track   measures_valid = msrs(c(\"classif.logloss\", \"classif.ce\")),   measures_train = msrs(c(\"classif.logloss\", \"classif.ce\")) ) resample(   learner    = learner_mlp,   task       = tsk(\"iris\"),   resampling = rsmp(\"holdout\") ) #> <ResampleResult> with 1 resampling iterations #>  task_id  learner_id resampling_id iteration warnings errors #>     iris classif.mlp       holdout         1        0      0 architecture = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 20) %>>%   po(\"nn_relu\") %>>%   po(\"nn_head\") graph_mlp = architecture %>>%   po(\"torch_loss\", loss = t_loss(\"cross_entropy\")) %>>%   po(\"torch_optimizer\", optimizer = t_opt(\"adam\", lr = 0.1)) %>>%   po(\"torch_callbacks\", callbacks = t_clbk(\"history\")) %>>%   po(\"torch_model_classif\", batch_size = 16, epochs = 50, device = \"cpu\")  learner_graph_mlp = as_learner(graph_mlp) learner_graph_mlp$id = \"graph_mlp\""},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"feature-overview","dir":"","previous_headings":"","what":"Feature Overview","title":"Deep Learning for mlr3","text":"--shelf architectures readily available mlr3 Learners. Custom learners can defined using Graph language mlr3pipelines using nn_modules. package supports tabular image data. possible customize training process via (predefined custom) callbacks. package fully integrated mlr3 ecosystem.","code":""},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Deep Learning for mlr3","text":"easiest way learn mlr3torch read one vignettes.","code":""},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Deep Learning for mlr3","text":"Without great R package torch none possible. names callback stages taken luz, another high-level deep learning framework R torch. Building neural networks using PipeOpTorch operators inspired keras.","code":""},{"path":"https://mlr3torch.mlr-org.com/index.html","id":"bugs-questions-feedback","dir":"","previous_headings":"","what":"Bugs, Questions, Feedback","title":"Deep Learning for mlr3","text":"mlr3torch free open source software project encourages participation feedback. issues, questions, suggestions feedback, please hesitate open “issue” GitHub page! case problems / bugs, often helpful provide “minimum working example” showcases behaviour (don’t worry bug obvious). Please understand resources project limited: response may sometimes delayed days, feature suggestions may rejected deemed tangential vision behind project.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/ModelDescriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent a Model with Meta-Info — ModelDescriptor","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"Represents model; possibly complete model, possibly one process built . model takes input tensors shapes shapes_in pipes graph. Input shapes get mapped input channels graph. Output shapes named output channels graph; also possible represent -ops tensors, case names input output identical. ModelDescriptor objects typically represent partial models built , case .pointer slot indicates specific point graph produces tensor shape .pointer_shape, graph extended. allowed graph structure modified -reference different parts code. However, modifications may never add edges elements Graph destination. particular, element graph$input may removed reference, e.g. adding edge Graph input channel PipeOp previously without parent destination. cases better create specific ModelDescriptor training Graph consisting (mostly) operators PipeOpTorchIngress, PipeOpTorch, PipeOpTorchLoss, PipeOpTorchOptimizer, PipeOpTorchCallbacks. ModelDescriptor can converted nn_graph via model_descriptor_to_module.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/ModelDescriptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"","code":"ModelDescriptor(   graph,   ingress,   task,   optimizer = NULL,   loss = NULL,   callbacks = NULL,   .pointer = NULL,   .pointer_shape = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/ModelDescriptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"graph (Graph)Graph PipeOpModule PipeOpNOP operators. ingress (uniquely named list TorchIngressToken) List inputs go graph. Names must subset graph$input$name. task (Task) (Training)-Task model built. May necessary aspects loss use etc. optimizer (TorchOptimizer | NULL) Additional info: optimizer use. loss (TorchLoss | NULL) Additional info: loss use. callbacks (list CallbackTorch NULL) Additional info: callbacks use. .pointer (character(2) | NULL) Indicating element model . Points output channel within graph: Element 1 PipeOp's id element 2 PipeOp's output channel. .pointer_shape (integer | NULL) Shape output indicated .pointer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/ModelDescriptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent a Model with Meta-Info — ModelDescriptor","text":"(ModelDescriptor)","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Callback — TorchCallback","title":"Torch Callback — TorchCallback","text":"wraps CallbackTorch annotates metadata, importantly ParamSet. callback created given parameter values calling $generate() method. class usually used configure callback torch learner, e.g. constructing learner ModelDescriptor. list available callbacks, see mlr3torch_callbacks conveniently retrieve TorchCallback, use t_clbk().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Callback — TorchCallback","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Callback — TorchCallback","text":"mlr3torch::TorchWrapper -> TorchCallback","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Callback — TorchCallback","text":"mlr3torch::TorchWrapper$generate() mlr3torch::TorchWrapper$help() mlr3torch::TorchWrapper$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Callback — TorchCallback","text":"TorchCallback$new() TorchCallback$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Callback — TorchCallback","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Callback — TorchCallback","text":"","code":"TorchCallback$new(   callback_generator,   param_set = NULL,   id = deparse(substitute(id))[[1L]],   label = capitalize(id),   packages = NULL,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Callback — TorchCallback","text":"callback_generator (R6ClassGenerator) class generator callback wrapped. param_set (ParamSet NULL) parameter set. NULL (default) inferred callback_generator. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Callback — TorchCallback","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Callback — TorchCallback","text":"","code":"TorchCallback$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Callback — TorchCallback","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchCallback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Callback — TorchCallback","text":"","code":"# Create a new Torch Callback from an existing callback torchcallback = TorchCallback$new(CallbackTorchCheckpoint) # The parameters are inferred torchcallback$param_set #> <ParamSet> #>      id    class lower upper nlevels        default value #> 1: path ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2: freq ParamUty    NA    NA     Inf <NoDefault[3]>        # Retrieve a torch callbac from the dictionary torchcallback = t_clbk(\"checkpoint\",   path = tempfile(), freq = 1 ) torchcallback #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackTorchCheckpoint #> * Parameters: path=/tmp/RtmpCHgtWB/file18907f14ecc2, freq=1 #> * Packages: torch,mlr3torch torchcallback$label #> [1] \"Checkpoint\" torchcallback$id #> [1] \"checkpoint\"  # Create the callback callback = torchcallback$generate() callback #> <CallbackTorchCheckpoint> #>   Inherits from: <CallbackTorch> #>   Public: #>     clone: function (deep = FALSE)  #>     freq: 1 #>     initialize: function (path, freq)  #>     on_end: function (ctx)  #>     on_epoch_end: function (ctx)  #>     path: /tmp/RtmpCHgtWB/file18907f14ecc2 # is the same as CallbackTorchCheckpoint$new(   path = tempfile(), freq = 1 ) #> <CallbackTorchCheckpoint> #>   Inherits from: <CallbackTorch> #>   Public: #>     clone: function (deep = FALSE)  #>     freq: 1 #>     initialize: function (path, freq)  #>     on_end: function (ctx)  #>     on_epoch_end: function (ctx)  #>     path: /tmp/RtmpCHgtWB/file1890547f1298  # open the help page of the wrapped callback # torchcallback$help()  # Use in a learner learner = lrn(\"regr.mlp\", callbacks = t_clbk(\"checkpoint\")) # the parameters of the callback are added to the learner's parameter set learner$param_set #> <ParamSetCollection> #>                        id    class lower upper nlevels        default value #>  1:            activation ParamFct    NA    NA      16           relu       #>  2:       activation_args ParamUty    NA    NA     Inf <NoDefault[3]>       #>  3:                layers ParamInt 0e+00   Inf     Inf <NoDefault[3]>       #>  4:              d_hidden ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  5:                     p ParamDbl 0e+00 1e+00     Inf            0.5       #>  6:            batch_size ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  7:                epochs ParamInt 0e+00   Inf     Inf <NoDefault[3]>       #>  8:                device ParamFct    NA    NA       3           auto       #>  9:        measures_train ParamUty    NA    NA     Inf <NoDefault[3]>       #> 10:        measures_valid ParamUty    NA    NA     Inf <NoDefault[3]>       #> 11:             drop_last ParamLgl    NA    NA       2          FALSE       #> 12:           num_threads ParamInt 1e+00   Inf     Inf              1       #> 13:               shuffle ParamLgl    NA    NA       2           TRUE       #> 14: early_stopping_rounds ParamInt  -Inf   Inf     Inf              0       #> 15:                  seed ParamInt  -Inf   Inf     Inf <NoDefault[3]>       #> 16:                opt.lr ParamDbl 0e+00   Inf     Inf          0.001       #> 17:             opt.betas ParamUty    NA    NA     Inf    0.900,0.999       #> 18:               opt.eps ParamDbl 1e-16 1e-04     Inf          1e-08       #> 19:      opt.weight_decay ParamDbl 0e+00 1e+00     Inf              0       #> 20:           opt.amsgrad ParamLgl    NA    NA       2          FALSE       #> 21:        loss.reduction ParamFct    NA    NA       2           mean       #> 22:    cb.checkpoint.path ParamUty    NA    NA     Inf <NoDefault[3]>       #> 23:    cb.checkpoint.freq ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>                        id    class lower upper nlevels        default value"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchIngressToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Ingress Token — TorchIngressToken","title":"Torch Ingress Token — TorchIngressToken","text":"function creates S3 class class \"TorchIngressToken\", internal data structure. contains (meta-)information batch generated Task fed entry point neural network. stored ingress field ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchIngressToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Ingress Token — TorchIngressToken","text":"","code":"TorchIngressToken(features, batchgetter, shape)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchIngressToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Ingress Token — TorchIngressToken","text":"features (character) Features batchgetter operate. batchgetter (function) Function two arguments: data device. function given output Task$data(rows = batch_indices, cols = features) produce tensor shape shape_out. shape (integer) Shape batchgetter produce. Batch-dimension included NA.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchIngressToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Torch Ingress Token — TorchIngressToken","text":"TorchIngressToken object.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/TorchIngressToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Ingress Token — TorchIngressToken","text":"","code":"# Define a task for which we want to define an ingress token task = tsk(\"iris\")  # We create an ingress token for two feature Sepal.Length and Petal.Length: # We have to specify the features, the batchgetter and the shape features = c(\"Sepal.Length\", \"Petal.Length\") # As a batchgetter we use batchgetter_num  batch_dt = task$data(rows = 1:10, cols =features) batch_dt #>     Sepal.Length Petal.Length #>  1:          5.1          1.4 #>  2:          4.9          1.4 #>  3:          4.7          1.3 #>  4:          4.6          1.5 #>  5:          5.0          1.4 #>  6:          5.4          1.7 #>  7:          4.6          1.4 #>  8:          5.0          1.5 #>  9:          4.4          1.4 #> 10:          4.9          1.5 batch_tensor = batchgetter_num(batch_dt, \"cpu\") batch_tensor #> torch_tensor #>  5.1000  1.4000 #>  4.9000  1.4000 #>  4.7000  1.3000 #>  4.6000  1.5000 #>  5.0000  1.4000 #>  5.4000  1.7000 #>  4.6000  1.4000 #>  5.0000  1.5000 #>  4.4000  1.4000 #>  4.9000  1.5000 #> [ CPUFloatType{10,2} ]  # The shape is unknown in the first dimension (batch dimension)  ingress_token = TorchIngressToken(   features = features,   batchgetter = batchgetter_num,   shape = c(NA, 2) ) ingress_token #> Ingress: Task[Sepal.Length,Petal.Length] --> Tensor(NA, 2)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Loss — TorchLoss","title":"Torch Loss — TorchLoss","text":"wraps torch::nn_loss annotates metadata, importantly ParamSet. loss function created given parameter values calling $generate() method inherited TorchWrapper. class usually used configure loss function torch learner, e.g. construcing learner ModelDescriptor. list available losses, see mlr3torch_losses. Items dictionary can retrieved using t_loss().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Loss — TorchLoss","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Loss — TorchLoss","text":"mlr3torch::TorchWrapper -> TorchLoss","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Torch Loss — TorchLoss","text":"task_types (character()) task types loss supports.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Loss — TorchLoss","text":"mlr3torch::TorchWrapper$generate() mlr3torch::TorchWrapper$help()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Loss — TorchLoss","text":"TorchLoss$new() TorchLoss$print() TorchLoss$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Loss — TorchLoss","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$new(   torch_loss,   task_types = NULL,   param_set = NULL,   id = deparse(substitute(torch_loss))[[1L]],   label = capitalize(id),   packages = NULL,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"torch_loss (nn_loss) loss module. task_types (character()) task types supported loss. left NULL (default), value set available task types. param_set (ParamSet NULL) parameter set. NULL (default) inferred torch_loss. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Torch Loss — TorchLoss","text":"Prints object","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$print(...)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"... ","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Loss — TorchLoss","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Loss — TorchLoss","text":"","code":"TorchLoss$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Loss — TorchLoss","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchLoss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Loss — TorchLoss","text":"","code":"# Create a new Torch Loss torchloss = TorchLoss$new(torch_loss = nn_mse_loss, task_types = \"regr\") torchloss #> <TorchLoss:nn_mse_loss> Nn_mse_loss #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # the parameters are inferred torchloss$param_set #> <ParamSet> #>           id    class lower upper nlevels        default value #> 1: reduction ParamUty    NA    NA     Inf <NoDefault[3]>        # Retrieve a loss from the dictionary: torchloss = t_loss(\"mse\", reduction = \"mean\") # is the same as torchloss #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: reduction=mean #> * Packages: torch,mlr3torch #> * Task Types: regr torchloss$param_set #> <ParamSet> #>           id    class lower upper nlevels default value #> 1: reduction ParamFct    NA    NA       2    mean  mean torchloss$label #> [1] \"Mean Squared Error\" torchloss$task_types #> [1] \"regr\" torchloss$id #> [1] \"mse\"  # Create the loss function loss_fn = torchloss$generate() loss_fn #> An `nn_module` containing 0 parameters. # Is the same as nn_mse_loss(reduction = \"mean\") #> An `nn_module` containing 0 parameters.  # open the help page of the wrapper loss function # torchloss$help()  # Use in a learner learner = lrn(\"regr.mlp\", loss = t_loss(\"mse\")) # The parameters of the loss are added to the learner's parameter set learner$param_set #> <ParamSetCollection> #>                        id    class lower upper nlevels        default value #>  1:            activation ParamFct    NA    NA      16           relu       #>  2:       activation_args ParamUty    NA    NA     Inf <NoDefault[3]>       #>  3:                layers ParamInt 0e+00   Inf     Inf <NoDefault[3]>       #>  4:              d_hidden ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  5:                     p ParamDbl 0e+00 1e+00     Inf            0.5       #>  6:            batch_size ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  7:                epochs ParamInt 0e+00   Inf     Inf <NoDefault[3]>       #>  8:                device ParamFct    NA    NA       3           auto       #>  9:        measures_train ParamUty    NA    NA     Inf <NoDefault[3]>       #> 10:        measures_valid ParamUty    NA    NA     Inf <NoDefault[3]>       #> 11:             drop_last ParamLgl    NA    NA       2          FALSE       #> 12:           num_threads ParamInt 1e+00   Inf     Inf              1       #> 13:               shuffle ParamLgl    NA    NA       2           TRUE       #> 14: early_stopping_rounds ParamInt  -Inf   Inf     Inf              0       #> 15:                  seed ParamInt  -Inf   Inf     Inf <NoDefault[3]>       #> 16:                opt.lr ParamDbl 0e+00   Inf     Inf          0.001       #> 17:             opt.betas ParamUty    NA    NA     Inf    0.900,0.999       #> 18:               opt.eps ParamDbl 1e-16 1e-04     Inf          1e-08       #> 19:      opt.weight_decay ParamDbl 0e+00 1e+00     Inf              0       #> 20:           opt.amsgrad ParamLgl    NA    NA       2          FALSE       #> 21:        loss.reduction ParamFct    NA    NA       2           mean       #>                        id    class lower upper nlevels        default value"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Optimizer — TorchOptimizer","title":"Torch Optimizer — TorchOptimizer","text":"wraps torch::torch_optimizer_generatora annotates metadata, importantly ParamSet. optimizer created given parameter values calling $generate() method. class usually used configure optimizer torch learner, e.g. construcing learner ModelDescriptor. list available optimizers, see mlr3torch_optimizers. Items dictionary can retrieved using t_opt().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Optimizer — TorchOptimizer","text":"Defined constructor argument param_set. parameter set provided construction, parameter set constructed creating parameter argument wrapped loss function, parametes type ParamUty.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Optimizer — TorchOptimizer","text":"mlr3torch::TorchWrapper -> TorchOptimizer","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Optimizer — TorchOptimizer","text":"mlr3torch::TorchWrapper$help() mlr3torch::TorchWrapper$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Optimizer — TorchOptimizer","text":"TorchOptimizer$new() TorchOptimizer$generate() TorchOptimizer$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Optimizer — TorchOptimizer","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$new(   torch_optimizer,   param_set = NULL,   id = deparse(substitute(torch_optimizer))[[1L]],   label = capitalize(id),   packages = NULL,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"torch_optimizer (torch_optimizer_generator) torch optimizer. param_set (ParamSet NULL) parameter set. NULL (default) inferred torch_optimizer. id (character(1)) id new object. label (character(1)) Label new instance. packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Torch Optimizer — TorchOptimizer","text":"Instantiates optimizer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$generate(params)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"params $parameters network.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Optimizer — TorchOptimizer","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Optimizer — TorchOptimizer","text":"","code":"TorchOptimizer$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Optimizer — TorchOptimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/TorchOptimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Optimizer — TorchOptimizer","text":"","code":"# Create a new Torch Optimizer torchopt = TorchOptimizer$new(optim_adam, label = \"adam\") # If the param set is not specified, parameters are inferred but are of class ParamUty torchopt$param_set #> <ParamSet> #>              id    class lower upper nlevels        default value #> 1:           lr ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:        betas ParamUty    NA    NA     Inf <NoDefault[3]>       #> 3:          eps ParamUty    NA    NA     Inf <NoDefault[3]>       #> 4: weight_decay ParamUty    NA    NA     Inf <NoDefault[3]>       #> 5:      amsgrad ParamUty    NA    NA     Inf <NoDefault[3]>        # Retrieve an optimizer from the dictionary torchopt = t_opt(\"sgd\", lr = 0.1) torchopt #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_sgd #> * Parameters: lr=0.1 #> * Packages: torch,mlr3torch torchopt$param_set #> <ParamSet> #>              id    class lower upper nlevels        default value #> 1:           lr ParamDbl     0   Inf     Inf <NoDefault[3]>   0.1 #> 2:     momentum ParamDbl     0     1     Inf              0       #> 3:    dampening ParamDbl     0     1     Inf              0       #> 4: weight_decay ParamDbl     0     1     Inf              0       #> 5:     nesterov ParamLgl    NA    NA       2          FALSE       torchopt$label #> [1] \"Stochastic Gradient Descent\" torchopt$id #> [1] \"sgd\"  # Create the optimizer for a network net = nn_linear(10, 1) opt = torchopt$generate(net$parameters)  # is the same as optim_sgd(net$parameters, lr = 0.1) #> <optim_sgd> #>   Inherits from: <torch_optimizer> #>   Public: #>     add_param_group: function (param_group)  #>     clone: function (deep = FALSE)  #>     defaults: list #>     initialize: function (params, lr = optim_required(), momentum = 0, dampening = 0,  #>     load_state_dict: function (state_dict)  #>     param_groups: list #>     state: State, R6 #>     state_dict: function ()  #>     step: function (closure = NULL)  #>     zero_grad: function ()  #>   Private: #>     step_helper: function (closure, loop_fun)   # open the help page of the wrapped optimizer # torchopt$help()  # Use in a learner learner = lrn(\"regr.mlp\", optimizer = t_opt(\"sgd\")) # The parameters of the optimizer are added to the learner's parameter set learner$param_set #> <ParamSetCollection> #>                        id    class lower upper nlevels        default value #>  1:            activation ParamFct    NA    NA      16           relu       #>  2:       activation_args ParamUty    NA    NA     Inf <NoDefault[3]>       #>  3:                layers ParamInt     0   Inf     Inf <NoDefault[3]>       #>  4:              d_hidden ParamInt     1   Inf     Inf <NoDefault[3]>       #>  5:                     p ParamDbl     0     1     Inf            0.5       #>  6:            batch_size ParamInt     1   Inf     Inf <NoDefault[3]>       #>  7:                epochs ParamInt     0   Inf     Inf <NoDefault[3]>       #>  8:                device ParamFct    NA    NA       3           auto       #>  9:        measures_train ParamUty    NA    NA     Inf <NoDefault[3]>       #> 10:        measures_valid ParamUty    NA    NA     Inf <NoDefault[3]>       #> 11:             drop_last ParamLgl    NA    NA       2          FALSE       #> 12:           num_threads ParamInt     1   Inf     Inf              1       #> 13:               shuffle ParamLgl    NA    NA       2           TRUE       #> 14: early_stopping_rounds ParamInt  -Inf   Inf     Inf              0       #> 15:                  seed ParamInt  -Inf   Inf     Inf <NoDefault[3]>       #> 16:                opt.lr ParamDbl     0   Inf     Inf <NoDefault[3]>       #> 17:          opt.momentum ParamDbl     0     1     Inf              0       #> 18:         opt.dampening ParamDbl     0     1     Inf              0       #> 19:      opt.weight_decay ParamDbl     0     1     Inf              0       #> 20:          opt.nesterov ParamLgl    NA    NA       2          FALSE       #> 21:        loss.reduction ParamFct    NA    NA       2           mean       #>                        id    class lower upper nlevels        default value"},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a TorchCallback — as_torch_callback","title":"Convert to a TorchCallback — as_torch_callback","text":"Converts object TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a TorchCallback — as_torch_callback","text":"","code":"as_torch_callback(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a TorchCallback — as_torch_callback","text":"x () Object converted. clone (logical(1) Whether make deep clone. ... () Additional arguments","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a TorchCallback — as_torch_callback","text":"TorchCallback.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a list of Torch Callbacks — as_torch_callbacks","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"Converts object list TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callbacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"","code":"as_torch_callbacks(x, clone, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_callbacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a list of Torch Callbacks — as_torch_callbacks","text":"x () Object convert. clone (logical(1)) Whether create deep clone. ... () Additional arguments.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to TorchLoss — as_torch_loss","title":"Convert to TorchLoss — as_torch_loss","text":"Converts object TorchLoss.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to TorchLoss — as_torch_loss","text":"","code":"as_torch_loss(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to TorchLoss — as_torch_loss","text":"x () Object convert TorchLoss. clone (logical(1) Whether make deep clone. ... () Additional arguments. Currently used pass additional constructor arguments TorchLoss objects type nn_loss.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to TorchLoss — as_torch_loss","text":"TorchLoss.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to TorchOptimizer — as_torch_optimizer","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"Converts object TorchOptimizer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"","code":"as_torch_optimizer(x, clone = FALSE, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"x () Object convert TorchOptimizer. clone (logical(1) Whether make deep clone. Default FALSE. ... () Additional arguments. Currently used pass additional constructor arguments TorchOptimizer objects type torch_optimizer_generator.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/as_torch_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to TorchOptimizer — as_torch_optimizer","text":"TorchOptimizer","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_categ.html","id":null,"dir":"Reference","previous_headings":"","what":"Batchgetter for categorical data — batchgetter_categ","title":"Batchgetter for categorical data — batchgetter_categ","text":"Converts data frame categorical data long tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_categ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batchgetter for categorical data — batchgetter_categ","text":"","code":"batchgetter_categ(data, device)"},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_categ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batchgetter for categorical data — batchgetter_categ","text":"data (data.table)data.table converted tensor. device (character(1)) device.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Batchgetter for Numeric Data — batchgetter_num","title":"Batchgetter for Numeric Data — batchgetter_num","text":"Converts data frame numeric data float tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batchgetter for Numeric Data — batchgetter_num","text":"","code":"batchgetter_num(data, device)"},{"path":"https://mlr3torch.mlr-org.com/reference/batchgetter_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batchgetter for Numeric Data — batchgetter_num","text":"data (data.table())data.table converted tensor. device (character(1)) device tensor created.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/callback_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Callback Torch — callback_torch","title":"Create a Callback Torch — callback_torch","text":"Creates R6ClassGenerator inheriting CallbackTorch. Additionally performs checks stages accidentally misspelled. create TorchCallback use torch_callback().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/callback_torch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Callback Torch — callback_torch","text":"","code":"callback_torch(   classname,   on_begin = NULL,   on_end = NULL,   on_epoch_begin = NULL,   on_before_valid = NULL,   on_epoch_end = NULL,   on_batch_begin = NULL,   on_batch_end = NULL,   on_after_backward = NULL,   on_batch_valid_begin = NULL,   on_batch_valid_end = NULL,   initialize = NULL,   public = NULL,   private = NULL,   active = NULL,   parent_env = parent.frame(),   inherit = CallbackTorch )"},{"path":"https://mlr3torch.mlr-org.com/reference/callback_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Callback Torch — callback_torch","text":"classname (character(1)) class name. on_begin, on_end, on_epoch_begin, on_before_valid, on_epoch_end, on_batch_begin, on_batch_end, on_after_backward, on_batch_valid_begin, on_batch_valid_end (function) Function execute given stage, see section Stages. initialize (function()) initialization method callback. public, private, active (list()) Additional public, private, active fields add callback. parent_env (environment()) parent environment R6Class. inherit (R6ClassGenerator) class inherit. class must either CallbackTorch (default) inherit .","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/imageuri.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object of class ","title":"Create an object of class ","text":"Creates object class \"imageuri\", contains uris images.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/imageuri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object of class ","text":"","code":"imageuri(x)"},{"path":"https://mlr3torch.mlr-org.com/reference/imageuri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object of class ","text":"x (character()) Character vector containig paths images.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3torch: Deep Learning for 'mlr3' — mlr3torch-package","title":"mlr3torch: Deep Learning for 'mlr3' — mlr3torch-package","text":"Provides torch models learners mlr3 ecosystem.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3torch: Deep Learning for 'mlr3' — mlr3torch-package","text":"Maintainer: Sebastian Fischer sebf.fischer@gmail.com (ORCID) Authors: Lukas Burk github@quantenbrot.de (ORCID) Martin Binder mlr.developer@mb706.com contributors: Bernd Bischl bernd_bischl@gmx.net (ORCID) [contributor] Florian Pfisterer pfistererf@googlemail.com (ORCID) [contributor]","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Torch Callbacks — mlr3torch_callbacks","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"mlr3misc::Dictionary torch callbacks. Use t_clbk() conveniently retrieve callbacks. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_callbacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"","code":"mlr3torch_callbacks"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_callbacks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"object class DictionaryMlr3torchCallbacks (inherits Dictionary, R6) length 13.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_callbacks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Torch Callbacks — mlr3torch_callbacks","text":"","code":"mlr3torch_callbacks$get(\"checkpoint\") #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackTorchCheckpoint #> * Parameters: list() #> * Packages: torch,mlr3torch # is the same as t_clbk(\"checkpoint\") #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackTorchCheckpoint #> * Parameters: list() #> * Packages: torch,mlr3torch # convert to a data.table as.data.table(mlr3torch_callbacks) #>           key      label                 packages #> 1: checkpoint Checkpoint          torch,mlr3torch #> 2:    history    History          torch,mlr3torch #> 3:   progress   Progress progress,torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Functions — mlr3torch_losses","title":"Loss Functions — mlr3torch_losses","text":"Dictionary torch loss functions. See t_loss conveniently retrieving loss function. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Functions — mlr3torch_losses","text":"","code":"mlr3torch_losses"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_losses.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Loss Functions — mlr3torch_losses","text":"object class DictionaryMlr3torchLosses (inherits Dictionary, R6) length 13.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_losses.html","id":"available-loss-functions","dir":"Reference","previous_headings":"","what":"Available Loss Functions","title":"Loss Functions — mlr3torch_losses","text":"cross_entropy, l1, mse","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_losses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Functions — mlr3torch_losses","text":"","code":"mlr3torch_losses$get(\"mse\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # is equivalent to t_loss(\"mse\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr # convert to a data.table as.data.table(mlr3torch_losses) #>              key              label task_types        packages #> 1: cross_entropy      Cross Entropy    classif torch,mlr3torch #> 2:            l1     Absolute Error       regr torch,mlr3torch #> 3:           mse Mean Squared Error       regr torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_optimizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizers — mlr3torch_optimizers","title":"Optimizers — mlr3torch_optimizers","text":"Dictionary torch optimizers. Use t_opt conveniently retrieving optimizers. Can converted data.table using .data.table.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_optimizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizers — mlr3torch_optimizers","text":"","code":"mlr3torch_optimizers"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_optimizers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Optimizers — mlr3torch_optimizers","text":"object class DictionaryMlr3torchOptimizers (inherits Dictionary, R6) length 13.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_optimizers.html","id":"available-optimizers","dir":"Reference","previous_headings":"","what":"Available Optimizers","title":"Optimizers — mlr3torch_optimizers","text":"adadelta, adagrad, adam, asgd, rmsprop, rprop, sgd","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr3torch_optimizers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizers — mlr3torch_optimizers","text":"","code":"mlr3torch_optimizers$get(\"adam\") #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: list() #> * Packages: torch,mlr3torch # is equivalent to t_opt(\"adam\") #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: list() #> * Packages: torch,mlr3torch # convert to a data.table as.data.table(mlr3torch_optimizers) #>         key                           label        packages #> 1: adadelta Adaptive Learning Rate Method`` torch,mlr3torch #> 2:  adagrad     Adaptive Gradient algorithm torch,mlr3torch #> 3:     adam      Adaptive Moment Estimation torch,mlr3torch #> 4:     asgd    SGD with Adaptive Batch Size torch,mlr3torch #> 5:  rmsprop    Root Mean Square Propagation torch,mlr3torch #> 6:    rprop       Resilient Backpropagation torch,mlr3torch #> 7:      sgd     Stochastic Gradient Descent torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"Saves model training.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"mlr3torch::CallbackTorch -> CallbackTorchCheckpoint","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"CallbackTorchCheckpoint$new() CallbackTorchCheckpoint$on_epoch_end() CallbackTorchCheckpoint$on_end() CallbackTorchCheckpoint$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"","code":"CallbackTorchCheckpoint$new(path, freq)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"path (character(1)) path folder models saved. path must exist . freq (integer(1)) frequency often model saved (epoch frequency).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"Saves network state dict.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"","code":"CallbackTorchCheckpoint$on_epoch_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"method-on-end-","dir":"Reference","previous_headings":"","what":"Method on_end()","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"Saves final network.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"","code":"CallbackTorchCheckpoint$on_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"","code":"CallbackTorchCheckpoint$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.checkpoint.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch Checkpoint — mlr_callbacks_torch.checkpoint","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback Torch History — mlr_callbacks_torch.history","title":"Callback Torch History — mlr_callbacks_torch.history","text":"Saves history training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Callback Torch History — mlr_callbacks_torch.history","text":"mlr3torch::CallbackTorch -> CallbackTorchHistory","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Callback Torch History — mlr_callbacks_torch.history","text":"CallbackTorchHistory$on_begin() CallbackTorchHistory$on_end() CallbackTorchHistory$on_before_valid() CallbackTorchHistory$on_epoch_end() CallbackTorchHistory$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"method-on-begin-","dir":"Reference","previous_headings":"","what":"Method on_begin()","title":"Callback Torch History — mlr_callbacks_torch.history","text":"Initializes lists train validation metrics stored.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch History — mlr_callbacks_torch.history","text":"","code":"CallbackTorchHistory$on_begin(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch History — mlr_callbacks_torch.history","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"method-on-end-","dir":"Reference","previous_headings":"","what":"Method on_end()","title":"Callback Torch History — mlr_callbacks_torch.history","text":"Converts lists data.tables.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch History — mlr_callbacks_torch.history","text":"","code":"CallbackTorchHistory$on_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch History — mlr_callbacks_torch.history","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"method-on-before-valid-","dir":"Reference","previous_headings":"","what":"Method on_before_valid()","title":"Callback Torch History — mlr_callbacks_torch.history","text":"Add latest training scores history.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch History — mlr_callbacks_torch.history","text":"","code":"CallbackTorchHistory$on_before_valid(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch History — mlr_callbacks_torch.history","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"Callback Torch History — mlr_callbacks_torch.history","text":"Add latest validation scores history.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch History — mlr_callbacks_torch.history","text":"","code":"CallbackTorchHistory$on_epoch_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch History — mlr_callbacks_torch.history","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Callback Torch History — mlr_callbacks_torch.history","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Torch History — mlr_callbacks_torch.history","text":"","code":"CallbackTorchHistory$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.history.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Torch History — mlr_callbacks_torch.history","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Callbacks — mlr_callbacks_torch","title":"Base Class for Torch Callbacks — mlr_callbacks_torch","text":"Base class Callbacks inherit. can used gain control training process neural network without write everything scratch. available stage (see section Stages) public method $on_<stage>(ctx) can defined. must function argument ctx, ContextTorch. learner trained, specific <stage>, $on_<stage>(ctx) method callback executed, ctx represents current state training loop. Different stages callback can communicate assigning values $self. used torch learner, CallbackTorch wrapped TorchCallback. latters parameter set represents arguments CallbackTorch's $initialize() method can specified learner. callback initialized beginning training loop. creating custom callbacks, function torch_callback() recommended, creates CallbackTorch wraps TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.html","id":"stages","dir":"Reference","previous_headings":"","what":"Stages","title":"Base Class for Torch Callbacks — mlr_callbacks_torch","text":"begin :: Run training loop begins. epoch_begin :: Run beginning epoch. before_validation :: Run validation loop. batch_begin :: Run forward call. after_backward :: Run backward call. batch_end :: Run optimizer step. batch_valid_begin :: Run forward call validation loop. batch_valid_end :: Run forward call validation loop. epoch_end :: Run end epoch. end :: Run last, using .exit().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Shows Training Process in the Console — mlr_callbacks_torch.progress","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Prints progress bar metrics training validation.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"mlr3torch::CallbackTorch -> CallbackTorchProgress","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"CallbackTorchProgress$on_epoch_begin() CallbackTorchProgress$on_batch_end() CallbackTorchProgress$on_before_valid() CallbackTorchProgress$on_batch_valid_end() CallbackTorchProgress$on_epoch_end() CallbackTorchProgress$on_end() CallbackTorchProgress$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-epoch-begin-","dir":"Reference","previous_headings":"","what":"Method on_epoch_begin()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Initializes progress bar training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_epoch_begin(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-batch-end-","dir":"Reference","previous_headings":"","what":"Method on_batch_end()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Increments training progress bar.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_batch_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-before-valid-","dir":"Reference","previous_headings":"","what":"Method on_before_valid()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Creates progress bar validation.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_before_valid(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-batch-valid-end-","dir":"Reference","previous_headings":"","what":"Method on_batch_valid_end()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Increments validation progress bar.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_batch_valid_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-epoch-end-","dir":"Reference","previous_headings":"","what":"Method on_epoch_end()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Prints summary training validation process.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_epoch_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-on-end-","dir":"Reference","previous_headings":"","what":"Method on_end()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"Deletes progess bar objects.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$on_end(ctx)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"ctx ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"","code":"CallbackTorchProgress$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_callbacks_torch.progress.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows Training Process in the Console — mlr_callbacks_torch.progress","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Context for Torch Learner — mlr_context_torch","title":"Context for Torch Learner — mlr_context_torch","text":"Context training torch learner. - mostly read-- information callbacks access argument ctx. information callbacks, see CallbackTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Context for Torch Learner — mlr_context_torch","text":"mlr3misc::Context -> ContextTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Context for Torch Learner — mlr_context_torch","text":"learner (Learner) torch learner. task_train (Task) training task. task_valid (Task NULL) validation task. loader_train (torch::dataloader) data loader training. loader_valid (torch::dataloader) data loader validation. measures_train (list() Measures NULL) Measures used training. measures_valid (list() Measures NULL) Measures used validation. network (torch::nn_module) torch network. optimizer (torch::optimizer) optimizer. loss_fn (torch::nn_module) loss function. total_epochs integer(1) total number epochs learner trained . last_scores_train (named list()) scores last training batch. Names ids training measures. last_scores_valid (list()) scores last validation batch. Names ids validation measures. epoch (integer(1)) current epoch. batch (integer(1)) current iteration batch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Context for Torch Learner — mlr_context_torch","text":"mlr3misc::Context$format() mlr3misc::Context$print()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Context for Torch Learner — mlr_context_torch","text":"ContextTorch$new() ContextTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Context for Torch Learner — mlr_context_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Context for Torch Learner — mlr_context_torch","text":"","code":"ContextTorch$new(   learner,   task_train,   task_valid = NULL,   loader_train,   loader_valid = NULL,   measures_train = NULL,   measures_valid = NULL,   network,   optimizer,   loss_fn,   total_epochs )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Context for Torch Learner — mlr_context_torch","text":"learner (Learner) torch learner. task_train (Task) training task. task_valid (Task NULL) validation task. loader_train (torch::dataloader) data loader training. loader_valid (torch::dataloader NULL) data loader validation. measures_train (list() Measures NULL) Measures used training. Default NULL. measures_valid (list() Measures NULL) Measures used validation. network (torch::nn_module) torch network. optimizer (torch::optimizer) optimizer. loss_fn (torch::nn_module) loss function. total_epochs (integer(1)) total number epochs learner trained .","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Context for Torch Learner — mlr_context_torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Context for Torch Learner — mlr_context_torch","text":"","code":"ContextTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_context_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Context for Torch Learner — mlr_context_torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":null,"dir":"Reference","previous_headings":"","what":"AlexNet Image Classifier — mlr_learners_classif.alexnet","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Historic convolutional network image classification.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Learner can instantiated via dictionary mlr_learners associated sugar function lrn():","code":"mlr_learners$get(\"classif.alexnet\") lrn(\"classif.alexnet\")"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"meta-information","dir":"Reference","previous_headings":"","what":"Meta Information","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Task type: “classif” Predict Types: “response”, “prob” Feature Types: “imageuri” Required Packages: mlr3, mlr3torch, torchvision, magick, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Parameters LearnerClassifTorchImage pretrained :: logical(1) Whether use pretrained model.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Krizhevsky, Alex, Sutskever, Ilya, Hinton, E. G (2017). “Imagenet classification deep convolutional neural networks.” Communications ACM, 60(6), 84--90.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"mlr3::Learner -> mlr3::LearnerClassif -> mlr3torch::LearnerClassifTorch -> mlr3torch::LearnerClassifTorchImage -> LearnerClassifAlexNet","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"LearnerClassifAlexNet$new() LearnerClassifAlexNet$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"","code":"LearnerClassifAlexNet$new(   optimizer = t_opt(\"adam\"),   loss = t_loss(\"cross_entropy\"),   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"optimizer (TorchOptimizer) optimizer used train network. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"","code":"LearnerClassifAlexNet$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.alexnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlexNet Image Classifier — mlr_learners_classif.alexnet","text":"","code":"learner = lrn(\"classif.alexnet\") learner$param_set #> <ParamSetCollection> #>                        id    class lower upper nlevels        default value #>  1:            pretrained ParamLgl    NA    NA       2           TRUE       #>  2:              channels ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  3:                height ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  4:                 width ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  5:            batch_size ParamInt 1e+00   Inf     Inf <NoDefault[3]>       #>  6:                epochs ParamInt 0e+00   Inf     Inf <NoDefault[3]>       #>  7:                device ParamFct    NA    NA       3           auto       #>  8:        measures_train ParamUty    NA    NA     Inf <NoDefault[3]>       #>  9:        measures_valid ParamUty    NA    NA     Inf <NoDefault[3]>       #> 10:             drop_last ParamLgl    NA    NA       2          FALSE       #> 11:           num_threads ParamInt 1e+00   Inf     Inf              1       #> 12:               shuffle ParamLgl    NA    NA       2           TRUE       #> 13: early_stopping_rounds ParamInt  -Inf   Inf     Inf              0       #> 14:                  seed ParamInt  -Inf   Inf     Inf <NoDefault[3]>       #> 15:                opt.lr ParamDbl 0e+00   Inf     Inf          0.001       #> 16:             opt.betas ParamUty    NA    NA     Inf    0.900,0.999       #> 17:               opt.eps ParamDbl 1e-16 1e-04     Inf          1e-08       #> 18:      opt.weight_decay ParamDbl 0e+00 1e+00     Inf              0       #> 19:           opt.amsgrad ParamLgl    NA    NA       2          FALSE       #> 20:           loss.weight ParamUty    NA    NA     Inf                      #> 21:     loss.ignore_index ParamInt  -Inf   Inf     Inf           -100       #> 22:        loss.reduction ParamFct    NA    NA       2           mean       #>                        id    class lower upper nlevels        default value"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"My Little Pony Classification — mlr_learners_classif.mlp","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"Fully connected feed forward network dropout activation function.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"Learner can instantiated via dictionary mlr_learners associated sugar function lrn():","code":"mlr_learners$get(\"classif.mlp\") lrn(\"classif.mlp\")"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"meta-information","dir":"Reference","previous_headings":"","what":"Meta Information","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"Task type: “classif” Predict Types: “response”, “prob” Feature Types: “integer”, “numeric” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"Parameters LearnerClassifTorch, well : activation :: character(1) Activation function. activation_args :: named list() named list initialization arguments activation function. layers :: integer(1) number layers. d_hidden :: numeric(1) dimension hidden layers. p :: numeric(1) dropout probability.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"mlr3::Learner -> mlr3::LearnerClassif -> mlr3torch::LearnerClassifTorch -> LearnerClassifMLP","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"LearnerClassifMLP$new() LearnerClassifMLP$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"","code":"LearnerClassifMLP$new(   optimizer = t_opt(\"adam\"),   loss = t_loss(\"cross_entropy\"),   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"optimizer (TorchOptimizer) optimizer used train network. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"","code":"LearnerClassifMLP$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"My Little Pony Classification — mlr_learners_classif.mlp","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"classif.mlp\") learner$param_set$set_values(   layers = 1, d_hidden = 10, batch_size = 1, epochs = 1 )  # Define a Task task = tsk(\"iris\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, ids$train)  # Make predictions for the test rows predictions = learner$predict(task, ids$test)  # Score the predictions predictions$score() #> classif.ce  #>  0.6666667"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"base class provides basic functionality training prediction neural network. torch classifiction learners inherit respective class, .e. LearnerClassifTorch classification LearnerRegrTorch regression. also allows hook training loop via callback mechanism.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"batch_size :: (integer(1)) batch size. epochs :: integer(1) number epochs. device :: character(1) device. One \"auto\", \"cpu\", \"cuda\". measures_train :: Measure list() Measures. Measures evaluated training. measures_valid :: Measure list() Measures. Measures evaluated validation. drop_last :: logical(1) Whether drop last batch epoch training. Default FALSE. num_threads :: integer(1) number threads (device \"cpu\"). Default 1. shuffle :: logical(1) Whether shuffle instances dataset. Default TRUE. early_stopping_rounds :: integer(1) many rounds wait early stopping. default 0. seed :: integer(1) seed used training. value seed + 1 used prediction. missing (default), random seed generated. Additionally parameters optimizer, loss function callbacks. prefixed \"opt.\", \"loss.\" \"cb.<callback id>.\" respectively.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"inheriting class, one overload two private methods: .network(task, param_vals) (Task, list()) -> nn_module Construct torch::nn_module object given task parameter values, .e. neural network trained learner. classification, output network expected scores application final softmax layer. .dataset(task, param_vals) (Task, list()) -> torch::dataset Create dataset task.  Must least respect parameters batch_size shuffle. also possible overwrite private .dataloader() method instead .dataset() method. Per default, dataloader constructed using output .dataset() method. .dataloader(task, param_vals) (Task, list()) -> torch::dataloader Create dataloader task. Needs respect least batch_size shuffle (otherwise predictions permuted). possible add parameters specifying param_set construction argument, currently possible remove existing parameters, .e. listed section Parameters. None parameters provided param_set can id starts \"loss.\", \"opt.\", \"cb.\"`, preserved dynamically constructed parameters optimizer, loss function, callbacks.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"mlr3::Learner -> mlr3::LearnerClassif -> LearnerClassifTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"network (nn_module()) network (available training). param_set (ParamSet) parameter set history (CallbackTorchHistory) Shortcut learner$model$callbacks$history.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"LearnerClassifTorch$new() LearnerClassifTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"","code":"LearnerClassifTorch$new(   id,   optimizer,   loss,   param_set,   properties = c(\"twoclass\", \"multiclass\"),   packages = character(0),   predict_types = c(\"response\", \"prob\"),   feature_types,   man,   label,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"id (character(1)) id new object. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss used train network. param_set (paradox::ParamSet) parameter set. properties (character()) properties object. See mlr_reflections$learner_properties available values. packages (character()) R packages object depends . predict_types (character()) predict types. See mlr_reflections$learner_predict_types available values. feature_types (character()) feature types. See mlr_reflections$task_feature_types available values. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). label (character(1)) Label new instance. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"","code":"LearnerClassifTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Base Class for a Torch Classification Learner — mlr_learners_classif.torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":null,"dir":"Reference","previous_headings":"","what":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"Featureless torch learner. Output constant weight learner training. classification, result majority class prediction standard cross-entropy loss. regression, result median L1 loss mean L2 loss.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"Learner can instantiated via dictionary mlr_learners associated sugar function lrn():","code":"mlr_learners$get(\"classif.torch_featureless\") lrn(\"classif.torch_featureless\")"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"meta-information","dir":"Reference","previous_headings":"","what":"Meta Information","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"Task type: “classif” Predict Types: “response”, “prob” Feature Types: “integer”, “numeric”, “factor”, “ordered” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"LearnerClassifTorch.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"mlr3::Learner -> mlr3::LearnerClassif -> mlr3torch::LearnerClassifTorch -> LearnerClassifTorchFeatureless","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"LearnerClassifTorchFeatureless$new() LearnerClassifTorchFeatureless$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"","code":"LearnerClassifTorchFeatureless$new(   optimizer = t_opt(\"adam\"),   loss = t_loss(\"cross_entropy\"),   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"optimizer (TorchOptimizer) optimizer used train network. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"","code":"LearnerClassifTorchFeatureless$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_featureless.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Featureless Torch Classifier — mlr_learners_classif.torch_featureless","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"classif.torch_featureless\") learner$param_set$set_values(   batch_size = 1, epochs = 1 )  # Define a Task task = tsk(\"iris\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, ids$train)  # Make predictions for the test rows predictions = learner$predict(task, ids$test)  # Score the predictions predictions$score() #> classif.ce  #>  0.6666667"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification Torch Learner — mlr_learners_classif.torch_model","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"Create classification learner instantiated nn_module(). learner used internally PipeOpTorchModelClassif. output network must scores (softmax).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"See LearnerClassifTorch","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"mlr3::Learner -> mlr3::LearnerClassif -> mlr3torch::LearnerClassifTorch -> LearnerClassifTorchModel","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"LearnerClassifTorchModel$new() LearnerClassifTorchModel$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"","code":"LearnerClassifTorchModel$new(   network,   ingress_tokens,   optimizer = t_opt(\"adam\"),   loss = t_loss(\"cross_entropy\"),   callbacks = list(),   packages = character(0),   feature_types = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"network (nn_module) instantiated nn_module. cloned construction. Outputs must scores (softmax). ingress_tokens (list TorchIngressToken()) list ingress tokens defines dataloader defined. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided packages (character()) R packages object depends . feature_types (character()) feature types. Defaults available feature types.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"","code":"LearnerClassifTorchModel$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif.torch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification Torch Learner — mlr_learners_classif.torch_model","text":"","code":"# The iris task has 4 features and 3 classes network = nn_linear(4, 3) task = tsk(\"iris\")  # This defines the dataloader. # It loads all 4 features, which are also numeric. # The shape is (NA, 4) because the batch dimension is generally NA ingress_tokens = list(   input = TorchIngressToken(task$feature_names, batchgetter_num, c(NA, 4)) )  # Creating the learner and setting required parameters learner = LearnerClassifTorchModel$new(network, ingress_tokens) learner$param_set$set_values(batch_size = 16, epochs = 1)  # A simple train-predict ids = partition(task) learner$train(task, ids$train) learner$predict(task, ids$test) #> <PredictionClassif> for 48 observations: #>     row_ids     truth response #>           2    setosa   setosa #>          13    setosa   setosa #>          18    setosa   setosa #> ---                            #>         140 virginica   setosa #>         143 virginica   setosa #>         149 virginica   setosa"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Classification Network — mlr_learners_classif_torch_image","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"Base Class Image Classification Learners.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"inherit class, one overwrite private $.network() return nn_module one argument forward method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"Parameters include inherited LearnerClassifTorch, param_set construction argument, well : channels :: integer(1)  number input channels. height :: integer(1)  height input image. width :: integer(1)  width input image.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"mlr3::Learner -> mlr3::LearnerClassif -> mlr3torch::LearnerClassifTorch -> LearnerClassifTorchImage","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"LearnerClassifTorchImage$new() LearnerClassifTorchImage$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"","code":"LearnerClassifTorchImage$new(   id,   param_set,   label,   optimizer = t_opt(\"adam\"),   loss = t_loss(\"cross_entropy\"),   callbacks = list(),   packages = c(\"torchvision\", \"magick\"),   man,   properties = c(\"twoclass\", \"multiclass\") )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"id (character(1)) id new object. param_set (paradox::ParamSet) parameter set. label (character(1)) Label new instance. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided packages (character()) R packages object depends . man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). properties (character()) properties object. See mlr_reflections$learner_properties available values.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"","code":"LearnerClassifTorchImage$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_classif_torch_image.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Classification Network — mlr_learners_classif_torch_image","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"My Little Pony Regression — mlr_learners_regr.mlp","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"Fully connected feed forward network dropout activation function.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"Learner can instantiated via dictionary mlr_learners associated sugar function lrn():","code":"mlr_learners$get(\"regr.mlp\") lrn(\"regr.mlp\")"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"meta-information","dir":"Reference","previous_headings":"","what":"Meta Information","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"Task type: “regr” Predict Types: “response” Feature Types: “integer”, “numeric” Required Packages: mlr3, mlr3torch, torch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"Parameters LearnerRegrTorch, well : activation :: character(1) Activation function. activation_args :: named list() named list initialization arguments activation function. layers :: integer(1) number layers. d_hidden :: numeric(1) dimension hidden layers. p :: numeric(1) dropout probability.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"mlr3::Learner -> mlr3::LearnerRegr -> mlr3torch::LearnerRegrTorch -> LearnerRegrMLP","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"LearnerRegrMLP$new() LearnerRegrMLP$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"","code":"LearnerRegrMLP$new(   optimizer = t_opt(\"adam\"),   loss = t_loss(\"mse\"),   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"optimizer (TorchOptimizer) optimizer used train network. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks. Must unique ids.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"","code":"LearnerRegrMLP$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"My Little Pony Regression — mlr_learners_regr.mlp","text":"","code":"# Define the Learner and set parameter values learner = lrn(\"regr.mlp\") learner$param_set$set_values(   layers = 1, d_hidden = 10, batch_size = 1, epochs = 1 )  # Define a Task task = tsk(\"mtcars\")  # Create train and test set ids = partition(task)  # Train the learner on the training ids learner$train(task, ids$train)  # Make predictions for the test rows predictions = learner$predict(task, ids$test)  # Score the predictions predictions$score() #> regr.mse  #> 389.5772"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"base class provides basic functionality training prediction neural network. torch regression learners inherit respective subclass.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"state list elements network, optimizer, loss_fn callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"batch_size :: (integer(1)) batch size. epochs :: integer(1) number epochs. device :: character(1) device. One \"auto\", \"cpu\", \"cuda\". measures_train :: Measure list() Measures. Measures evaluated training. measures_valid :: Measure list() Measures. Measures evaluated validation. drop_last :: logical(1) Whether drop last batch epoch training. Default FALSE. num_threads :: integer(1) number threads (device \"cpu\"). Default 1. shuffle :: logical(1) Whether shuffle instances dataset. Default TRUE. early_stopping_rounds :: integer(1) many rounds wait early stopping. default 0. seed :: integer(1) seed used training. value seed + 1 used prediction. missing (default), random seed generated. Additionally parameters optimizer, loss function callbacks. prefixed \"opt.\", \"loss.\" \"cb.<callback id>.\" respectively.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"inheriting class, one overload two private methods: .network(task, param_vals) (Task, list()) -> nn_module Construct torch::nn_module object given task parameter values, .e. neural network trained learner. classification, output network expected scores application final softmax layer. .dataset(task, param_vals) (Task, list()) -> torch::dataset Create dataset task.  Must least respect parameters batch_size shuffle. also possible overwrite private .dataloader() method instead .dataset() method. Per default, dataloader constructed using output .dataset() method. .dataloader(task, param_vals) (Task, list()) -> torch::dataloader Create dataloader task. Needs respect least batch_size shuffle (otherwise predictions permuted). possible add parameters specifying param_set construction argument, currently possible remove existing parameters, .e. listed section Parameters. None parameters provided param_set can id starts \"loss.\", \"opt.\", \"cb.\"`, preserved dynamically constructed parameters optimizer, loss function, callbacks.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"mlr3::Learner -> mlr3::LearnerRegr -> LearnerRegrTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"network (nn_module()) network (available training). param_set (ParamSet) parameter set history (CallbackTorchHistory) Shortcut learner$model$callbacks$history.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"LearnerRegrTorch$new() LearnerRegrTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"","code":"LearnerRegrTorch$new(   id,   optimizer,   loss,   param_set,   properties = character(0),   packages = character(0),   predict_types = \"response\",   feature_types,   man,   label,   callbacks = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"id (character(1)) id new object. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss used train network. param_set (paradox::ParamSet) parameter set. properties (character()) properties object. See mlr_reflections$learner_properties available values. packages (character()) R packages object depends . predict_types (character()) predict types. See mlr_reflections$learner_predict_types available values. feature_types (character()) feature types. See mlr_reflections$task_feature_types available values. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). label (character(1)) Label new instance. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"","code":"LearnerRegrTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Base Class for a Torch Regression Learner — mlr_learners_regr.torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression Torch Learner — mlr_learners_regr.torch_model","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"Create regression learner instantiated nn_module(). learner used internally PipeOpTorchModelRegr.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"See LearnerRegrTorch","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"mlr3::Learner -> mlr3::LearnerRegr -> mlr3torch::LearnerRegrTorch -> LearnerRegrTorchModel","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"mlr3::Learner$base_learner() mlr3::Learner$format() mlr3::Learner$help() mlr3::Learner$predict() mlr3::Learner$predict_newdata() mlr3::Learner$print() mlr3::Learner$reset() mlr3::Learner$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"LearnerRegrTorchModel$new() LearnerRegrTorchModel$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"","code":"LearnerRegrTorchModel$new(   network,   ingress_tokens,   optimizer = t_opt(\"adam\"),   loss = t_loss(\"mse\"),   callbacks = list(),   packages = character(0),   feature_types = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"network (nn_module) instantiated nn_module. cloned construction. Outputs must scores (softmax). ingress_tokens (list TorchIngressToken()) list ingress tokens defines dataloader defined. optimizer (TorchOptimizer) torch optimizer. loss (TorchLoss) loss used train network. callbacks (list() TorchCallbacks) callbacks used training. Must unique ids. executed order provided packages (character()) R packages object depends . feature_types (character()) feature types. Defaults available feature types.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"","code":"LearnerRegrTorchModel$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_learners_regr.torch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression Torch Learner — mlr_learners_regr.torch_model","text":"","code":"# The mtcars task has 10 features # The output of the network is 1, as it is a regression problem network = nn_linear(10, 1) task = tsk(\"mtcars\")  # This defines the dataloader. # It loads all 10 features, which are also numeric. # The shape is (NA, 10) because the batch dimension is generally NA ingress_tokens = list(   input = TorchIngressToken(task$feature_names, batchgetter_num, c(NA, 10)) )  # Creating the learner and setting required parameters learner = LearnerRegrTorchModel$new(network, ingress_tokens) learner$param_set$set_values(batch_size = 16, epochs = 1)  # A simple train-predict ids = partition(task) learner$train(task, ids$train) learner$predict(task, ids$test) #> <PredictionRegr> for 11 observations: #>     row_ids truth   response #>           4  21.4  -92.40375 #>           5  18.7 -132.58005 #>           9  22.8  -59.54814 #> ---                          #>          31  15.0 -151.95572 #>          26  27.3  -37.40742 #>          28  30.4  -51.47636"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Torch Module Wrappers — mlr_pipeops_module","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"PipeOpModule wraps nn_module called train phase mlr3pipelines::PipeOp. , allows assemble PipeOpModules computational mlr3pipelines::Graph represents neural network architecture. graph can also used create nn_graph inherits nn_module. cases easier create network creating isomorphic graph consisting nodes class PipeOpTorchIngress PipeOpTorch. graph generate graph consisting PipeOpModules part ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"number names input output channels can set construction. input output \"torch_tensor\" training, NULL prediction prediction phase currently serves meaningful purpose.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"training, wrapped nn_module called provided inputs order channels defined. Arguments matched name.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"mlr3pipelines::PipeOp -> PipeOpModule","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"module (nn_module) torch module called training phase.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"PipeOpModule$new() PipeOpModule$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"PipeOpModule$new(   id = \"module\",   module = nn_identity(),   inname = \"input\",   outname = \"output\",   param_vals = list(),   packages = character(0) )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"id (character(1)) id new object. module (nn_module) torch module wrapped. inname (character()) names input channels. outname (character()) names output channels. parameter length 1, parameter module must return tensor. Otherwise must return list() tensors corresponding length. param_vals (named list()) Parameter values set construction. packages (character()) R packages object depends .","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"PipeOpModule$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Torch Module Wrappers — mlr_pipeops_module","text":"","code":"## creating an PipeOpModule manually  # one input and output channel po_module = PipeOpModule$new(\"linear\",   torch::nn_linear(10, 20),   inname = \"input\",   outname = \"output\" ) x = torch::torch_randn(16, 10) # This calls the forward function of the wrapped module. y = po_module$train(list(input = x)) str(y) #> List of 1 #>  $ output:Float [1:16, 1:20]  # multiple input and output channels nn_custom = torch::nn_module(\"nn_custom\",   initialize = function(in_features, out_features) {     self$lin1 = torch::nn_linear(in_features, out_features)     self$lin2 = torch::nn_linear(in_features, out_features)   },   forward = function(x, z) {     list(out1 = self$lin1(x), out2 = torch::nnf_relu(self$lin2(z)))   } )  module = nn_custom(3, 2) po_module = PipeOpModule$new(   \"custom\",   module,   inname = c(\"x\", \"z\"),   outname = c(\"out1\", \"out2\") ) x = torch::torch_randn(1, 3) z = torch::torch_randn(1, 3) out = po_module$train(list(x = x, z = z)) str(out) #> List of 2 #>  $ out1:Float [1:1, 1:2] #>  $ out2:Float [1:1, 1:2]  # How a PipeOpModule is usually generated graph = po(\"torch_ingress_num\") %>>% po(\"nn_linear\", out_features = 10L) result = graph$train(tsk(\"iris\")) # The PipeOpTorchLinear generates a PipeOpModule and adds it to a new (module) graph result[[1]]$graph #> Graph with 2 PipeOps: #>                 ID         State  sccssors         prdcssors #>  torch_ingress_num <<UNTRAINED>> nn_linear                   #>          nn_linear <<UNTRAINED>>           torch_ingress_num linear_module = result[[1L]]$graph$pipeops$nn_linear linear_module #> PipeOp: <nn_linear> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [torch_tensor,NULL] #> Output channels <name [train type, predict type]>: #>   output [torch_tensor,NULL] formalArgs(linear_module$module) #> [1] \"input\" linear_module$input$name #> [1] \"input\""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Applies 1D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Calls nn_avg_pool1d() training.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool1D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"PipeOpTorchAvgPool1D$new() PipeOpTorchAvgPool1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"PipeOpTorchAvgPool1D$new(id = \"nn_avg_pool1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"PipeOpTorchAvgPool1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Average Pooling — mlr_pipeops_nn_avg_pool1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool1d\") pipeop #> PipeOp: <nn_avg_pool1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_avg_pool1d> #>                   id    class lower upper nlevels        default value #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:            stride ParamUty    NA    NA     Inf                      #> 3:           padding ParamUty    NA    NA     Inf              0       #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE       #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Applies 2D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Calls nn_avg_pool2d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool2D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"PipeOpTorchAvgPool2D$new() PipeOpTorchAvgPool2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"PipeOpTorchAvgPool2D$new(id = \"nn_avg_pool2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"PipeOpTorchAvgPool2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Average Pooling — mlr_pipeops_nn_avg_pool2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool2d\") pipeop #> PipeOp: <nn_avg_pool2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_avg_pool2d> #>                   id    class lower upper nlevels        default value #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:            stride ParamUty    NA    NA     Inf                      #> 3:           padding ParamUty    NA    NA     Inf              0       #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE       #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE       #> 6:  divisor_override ParamDbl     0   Inf     Inf <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Applies 3D adaptive average pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Calls nn_avg_pool3d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"kernel_size :: (integer()) size window. Can single number vector. stride :: integer() stride window. Can single number vector. Default: kernel_size. padding :: integer() Implicit zero paddings sides input. Can single number vector. Default: 0. ceil_mode :: integer() TRUE, use ceil instead floor compute output shape. Default: FALSE. count_include_pad :: logical(1) TRUE, include zero-padding averaging calculation. Default: TRUE. divisor_override :: logical(1) specified, used divisor, otherwise size pooling region used. Default: NULL. available dimension greater 1.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchAvgPool -> PipeOpTorchAvgPool3D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"PipeOpTorchAvgPool3D$new() PipeOpTorchAvgPool3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"PipeOpTorchAvgPool3D$new(id = \"nn_avg_pool3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"PipeOpTorchAvgPool3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_avg_pool3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Average Pooling — mlr_pipeops_nn_avg_pool3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_avg_pool3d\") pipeop #> PipeOp: <nn_avg_pool3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_avg_pool3d> #>                   id    class lower upper nlevels        default value #> 1:       kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:            stride ParamUty    NA    NA     Inf                      #> 3:           padding ParamUty    NA    NA     Inf              0       #> 4:         ceil_mode ParamLgl    NA    NA       2          FALSE       #> 5: count_include_pad ParamLgl    NA    NA       2           TRUE       #> 6:  divisor_override ParamDbl     0   Inf     Inf <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Calls torch::nn_batch_norm1d(). parameter num_features inferred second dimension input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm1D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"PipeOpTorchBatchNorm1D$new() PipeOpTorchBatchNorm1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"PipeOpTorchBatchNorm1D$new(id = \"nn_batch_norm1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"PipeOpTorchBatchNorm1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Batch Normalization — mlr_pipeops_nn_batch_norm1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm1d\") pipeop #> PipeOp: <nn_batch_norm1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_batch_norm1d> #>                     id    class lower upper nlevels default value #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05       #> 2:            momentum ParamDbl     0   Inf     Inf     0.1       #> 3:              affine ParamLgl    NA    NA       2    TRUE       #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Calls torch::nn_batch_norm2d(). parameter num_features inferred second dimension input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm2D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"PipeOpTorchBatchNorm2D$new() PipeOpTorchBatchNorm2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"PipeOpTorchBatchNorm2D$new(id = \"nn_batch_norm2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"PipeOpTorchBatchNorm2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Batch Normalization — mlr_pipeops_nn_batch_norm2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm2d\") pipeop #> PipeOp: <nn_batch_norm2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_batch_norm2d> #>                     id    class lower upper nlevels default value #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05       #> 2:            momentum ParamDbl     0   Inf     Inf     0.1       #> 3:              affine ParamLgl    NA    NA       2    TRUE       #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Applies Batch Normalization channel across batch data.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Calls torch::nn_batch_norm3d(). parameter num_features inferred second dimension input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"eps :: numeric(1) value added denominator numerical stability. Default: 1e-5. momentum :: numeric(1) value used running_mean running_var computation. Can set NULL cumulative moving average (.e. simple average). Default: 0.1 affine :: logical(1) boolean value set TRUE, module learnable affine parameters. Default: TRUE track_running_stats :: logical(1) boolean value set TRUE, module tracks running mean variance, set FALSE, module track statistics always uses batch statistics training eval modes. Default: TRUE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchBatchNorm -> PipeOpTorchBatchNorm3D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"PipeOpTorchBatchNorm3D$new() PipeOpTorchBatchNorm3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"PipeOpTorchBatchNorm3D$new(id = \"nn_batch_norm3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"PipeOpTorchBatchNorm3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_batch_norm3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Batch Normalization — mlr_pipeops_nn_batch_norm3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_batch_norm3d\") pipeop #> PipeOp: <nn_batch_norm3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_batch_norm3d> #>                     id    class lower upper nlevels default value #> 1:                 eps ParamDbl     0   Inf     Inf   1e-05       #> 2:            momentum ParamDbl     0   Inf     Inf     0.1       #> 3:              affine ParamLgl    NA    NA       2    TRUE       #> 4: track_running_stats ParamLgl    NA    NA       2    TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":null,"dir":"Reference","previous_headings":"","what":"CELU Activation Function — mlr_pipeops_nn_celu","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Applies element-wise, \\(CELU(x) = max(0,x) + min(0, \\alpha * (exp(x \\alpha) - 1))\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"alpha :: numeric(1) alpha value ELU formulation. Default: 1.0 inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Calls torch::nn_celu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchCELU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"PipeOpTorchCELU$new() PipeOpTorchCELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"PipeOpTorchCELU$new(id = \"nn_celu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"PipeOpTorchCELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_celu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CELU Activation Function — mlr_pipeops_nn_celu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_celu\") pipeop #> PipeOp: <nn_celu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_celu> #>         id    class lower upper nlevels default value #> 1:   alpha ParamDbl  -Inf   Inf     Inf       1       #> 2: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Convolution — mlr_pipeops_nn_conv1d","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Applies 1D convolution input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Calls torch::nn_conv1d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv1D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"PipeOpTorchConv1D$new() PipeOpTorchConv1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"PipeOpTorchConv1D$new(id = \"nn_conv1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"PipeOpTorchConv1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Convolution — mlr_pipeops_nn_conv1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv1d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv1d> (not trained) #> values: <kernel_size=10, out_channels=1> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv1d> #>              id    class lower upper nlevels        default value #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>    10 #> 3:       stride ParamUty    NA    NA     Inf              1       #> 4:      padding ParamUty    NA    NA     Inf              0       #> 5:     dilation ParamUty    NA    NA     Inf              1       #> 6:       groups ParamInt     1   Inf     Inf              1       #> 7:         bias ParamLgl    NA    NA       2           TRUE       #> 8: padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Convolution — mlr_pipeops_nn_conv2d","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Applies 2D convolution input image composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Calls torch::nn_conv2d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv2D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"PipeOpTorchConv2D$new() PipeOpTorchConv2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"PipeOpTorchConv2D$new(id = \"nn_conv2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"PipeOpTorchConv2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Convolution — mlr_pipeops_nn_conv2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv2d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv2d> (not trained) #> values: <kernel_size=10, out_channels=1> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv2d> #>              id    class lower upper nlevels        default value #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>    10 #> 3:       stride ParamUty    NA    NA     Inf              1       #> 4:      padding ParamUty    NA    NA     Inf              0       #> 5:     dilation ParamUty    NA    NA     Inf              1       #> 6:       groups ParamInt     1   Inf     Inf              1       #> 7:         bias ParamLgl    NA    NA       2           TRUE       #> 8: padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Convolution — mlr_pipeops_nn_conv3d","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Applies 3D convolution input image composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Calls torch::nn_conv3d() trained. paramter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"out_channels :: integer(1) Number channels produced convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. default 1. padding :: integer() ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘TRUE’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConv -> PipeOpTorchConv3D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"PipeOpTorchConv3D$new() PipeOpTorchConv3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"PipeOpTorchConv3D$new(id = \"nn_conv3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"PipeOpTorchConv3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Convolution — mlr_pipeops_nn_conv3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv3d\", kernel_size = 10, out_channels = 1) pipeop #> PipeOp: <nn_conv3d> (not trained) #> values: <kernel_size=10, out_channels=1> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv3d> #>              id    class lower upper nlevels        default value #> 1: out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     1 #> 2:  kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>    10 #> 3:       stride ParamUty    NA    NA     Inf              1       #> 4:      padding ParamUty    NA    NA     Inf              0       #> 5:     dilation ParamUty    NA    NA     Inf              1       #> 6:       groups ParamInt     1   Inf     Inf              1       #> 7:         bias ParamLgl    NA    NA       2           TRUE       #> 8: padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Transpose 1D Convolution Transpose 1D Convolution","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Calls nn_conv_transpose1d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose1D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"PipeOpTorchConvTranspose1D$new() PipeOpTorchConvTranspose1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"PipeOpTorchConvTranspose1D$new(id = \"nn_conv_transpose1d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"PipeOpTorchConvTranspose1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 1D Convolution — mlr_pipeops_nn_conv_transpose1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose1d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose1d> (not trained) #> values: <kernel_size=3, out_channels=2> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv_transpose1d> #>                id    class lower upper nlevels        default value #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>     3 #> 3:         stride ParamUty    NA    NA     Inf              1       #> 4:        padding ParamUty    NA    NA     Inf              0       #> 5: output_padding ParamUty    NA    NA     Inf              0       #> 6:       dilation ParamUty    NA    NA     Inf              1       #> 7:         groups ParamInt     1   Inf     Inf              1       #> 8:           bias ParamLgl    NA    NA       2           TRUE       #> 9:   padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Applies 2D transposed convolution operator input image composed several input planes, sometimes also called \"deconvolution\".","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Calls nn_conv_transpose2d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose2D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"PipeOpTorchConvTranspose2D$new() PipeOpTorchConvTranspose2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"PipeOpTorchConvTranspose2D$new(id = \"nn_conv_transpose2d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"PipeOpTorchConvTranspose2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 2D Convolution — mlr_pipeops_nn_conv_transpose2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose2d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose2d> (not trained) #> values: <kernel_size=3, out_channels=2> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv_transpose2d> #>                id    class lower upper nlevels        default value #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>     3 #> 3:         stride ParamUty    NA    NA     Inf              1       #> 4:        padding ParamUty    NA    NA     Inf              0       #> 5: output_padding ParamUty    NA    NA     Inf              0       #> 6:       dilation ParamUty    NA    NA     Inf              1       #> 7:         groups ParamInt     1   Inf     Inf              1       #> 8:           bias ParamLgl    NA    NA       2           TRUE       #> 9:   padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Applies 3D transposed convolution operator input image composed several input planes, sometimes also called \"deconvolution\"","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Calls nn_conv_transpose3d. parameter in_channels inferred second dimension input tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"out_channels :: integer(1) Number output channels produce convolution. kernel_size :: integer() Size convolving kernel. stride :: integer() Stride convolution. Default: 1. padding ::  integer()` ‘dilation * (kernel_size - 1) - padding’ zero-padding added sides input. Default: 0. output_padding ::integer() Additional size added one side output shape. Default: 0. groups :: integer() Number blocked connections input channels output channels. Default: 1 bias :: logical(1) ‘True’, adds learnable bias output. Default: ‘TRUE’. dilation :: integer() Spacing kernel elements. Default: 1. padding_mode :: character(1) padding mode. One \"zeros\", \"reflect\", \"replicate\", \"circular\". Default \"zeros\".","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchConvTranspose -> PipeOpTorchConvTranspose3D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"PipeOpTorchConvTranspose3D$new() PipeOpTorchConvTranspose3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"PipeOpTorchConvTranspose3D$new(id = \"nn_conv_transpose3d\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"PipeOpTorchConvTranspose3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_conv_transpose3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 3D Convolution — mlr_pipeops_nn_conv_transpose3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_conv_transpose3d\", kernel_size = 3, out_channels = 2) pipeop #> PipeOp: <nn_conv_transpose3d> (not trained) #> values: <kernel_size=3, out_channels=2> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_conv_transpose3d> #>                id    class lower upper nlevels        default value #> 1:   out_channels ParamInt     1   Inf     Inf <NoDefault[3]>     2 #> 2:    kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>     3 #> 3:         stride ParamUty    NA    NA     Inf              1       #> 4:        padding ParamUty    NA    NA     Inf              0       #> 5: output_padding ParamUty    NA    NA     Inf              0       #> 6:       dilation ParamUty    NA    NA     Inf              1       #> 7:         groups ParamInt     1   Inf     Inf              1       #> 8:           bias ParamLgl    NA    NA       2           TRUE       #> 9:   padding_mode ParamFct    NA    NA       4          zeros"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropout — mlr_pipeops_nn_dropout","title":"Dropout — mlr_pipeops_nn_dropout","text":"training, randomly zeroes elements input tensor probability p using samples Bernoulli distribution.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Dropout — mlr_pipeops_nn_dropout","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Dropout — mlr_pipeops_nn_dropout","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Dropout — mlr_pipeops_nn_dropout","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Dropout — mlr_pipeops_nn_dropout","text":"p :: numeric(1) Probability element zeroed. Default: 0.5 inplace inplace :: logical(1) set TRUE, operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Dropout — mlr_pipeops_nn_dropout","text":"Calls torch::nn_dropout() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Dropout — mlr_pipeops_nn_dropout","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchDropout","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dropout — mlr_pipeops_nn_dropout","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Dropout — mlr_pipeops_nn_dropout","text":"PipeOpTorchDropout$new() PipeOpTorchDropout$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Dropout — mlr_pipeops_nn_dropout","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"PipeOpTorchDropout$new(id = \"nn_dropout\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropout — mlr_pipeops_nn_dropout","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Dropout — mlr_pipeops_nn_dropout","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"PipeOpTorchDropout$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropout — mlr_pipeops_nn_dropout","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_dropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropout — mlr_pipeops_nn_dropout","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_dropout\") pipeop #> PipeOp: <nn_dropout> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_dropout> #>         id    class lower upper nlevels default value #> 1:       p ParamDbl     0     1     Inf     0.5       #> 2: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":null,"dir":"Reference","previous_headings":"","what":"ELU Activation Function — mlr_pipeops_nn_elu","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Applies element-wise, $$ELU(x) = max(0,x) + min(0, \\alpha * (exp(x) - 1))$$.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"alpha :: numeric(1) alpha value ELU formulation. Default: 1.0 inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Calls torch::nn_elu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchELU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"PipeOpTorchELU$new() PipeOpTorchELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"PipeOpTorchELU$new(id = \"nn_elu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"PipeOpTorchELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_elu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ELU Activation Function — mlr_pipeops_nn_elu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_elu\") pipeop #> PipeOp: <nn_elu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_elu> #>         id    class lower upper nlevels default value #> 1:   alpha ParamDbl  -Inf   Inf     Inf       1       #> 2: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flattens a Tensor — mlr_pipeops_nn_flatten","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"use nn_sequential.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"start_dim :: integer(1) wich dimension start flattening. Default 2. end_dim :: integer(1) wich dimension stop flattening. Default -1.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"Calls torch::nn_flatten() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchFlatten","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"PipeOpTorchFlatten$new() PipeOpTorchFlatten$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"PipeOpTorchFlatten$new(id = \"nn_flatten\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"PipeOpTorchFlatten$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flattens a Tensor — mlr_pipeops_nn_flatten","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_flatten\") pipeop #> PipeOp: <nn_flatten> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_flatten> #>           id    class lower upper nlevels default value #> 1: start_dim ParamInt     1   Inf     Inf       2       #> 2:   end_dim ParamInt     1   Inf     Inf      -1"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":null,"dir":"Reference","previous_headings":"","what":"GELU Activation Function — mlr_pipeops_nn_gelu","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Gelu","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Calls torch::nn_gelu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchGELU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"PipeOpTorchGELU$new() PipeOpTorchGELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"PipeOpTorchGELU$new(id = \"nn_gelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"PipeOpTorchGELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_gelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GELU Activation Function — mlr_pipeops_nn_gelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_gelu\") pipeop #> PipeOp: <nn_gelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_gelu> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":null,"dir":"Reference","previous_headings":"","what":"GLU Activation Function — mlr_pipeops_nn_glu","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"gated linear unit. Computes:","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"dim :: integer(1) Dimension split input. Default: -1","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"Calls torch::nn_glu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchGLU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"PipeOpTorchGLU$new() PipeOpTorchGLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"PipeOpTorchGLU$new(id = \"nn_glu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"PipeOpTorchGLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_glu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLU Activation Function — mlr_pipeops_nn_glu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_glu\") pipeop #> PipeOp: <nn_glu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_glu> #>     id    class lower upper nlevels default value #> 1: dim ParamInt     1   Inf     Inf      -1"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Applies hard shrinkage function element-wise","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"lambd :: numeric(1) lambda value Hardshrink formulation formulation. Default 0.5.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Calls torch::nn_hardshrink() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"PipeOpTorchHardShrink$new() PipeOpTorchHardShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"PipeOpTorchHardShrink$new(id = \"nn_hardshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"PipeOpTorchHardShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Shrink Activation Function — mlr_pipeops_nn_hardshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardshrink\") pipeop #> PipeOp: <nn_hardshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_hardshrink> #>       id    class lower upper nlevels default value #> 1: lambd ParamDbl  -Inf   Inf     Inf     0.5"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Applies element-wise function \\(\\mbox{Hardsigmoid}(x) = \\frac{ReLU6(x + 3)}{6}\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Calls torch::nn_hardsigmoid() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"PipeOpTorchHardSigmoid$new() PipeOpTorchHardSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"PipeOpTorchHardSigmoid$new(id = \"nn_hardsigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"PipeOpTorchHardSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardsigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Sigmoid Activation Function — mlr_pipeops_nn_hardsigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardsigmoid\") pipeop #> PipeOp: <nn_hardsigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_hardsigmoid> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":null,"dir":"Reference","previous_headings":"","what":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Applies HardTanh function element-wise.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"min_val :: numeric(1) Minimum value linear region range. Default: -1. max_val :: numeric(1) Maximum value linear region range. Default: 1. inplace :: logical(1) Can optionally operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Calls torch::nn_hardtanh() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHardTanh","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"PipeOpTorchHardTanh$new() PipeOpTorchHardTanh$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"PipeOpTorchHardTanh$new(id = \"nn_hardtanh\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"PipeOpTorchHardTanh$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_hardtanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hard Tanh Activation Function — mlr_pipeops_nn_hardtanh","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_hardtanh\") pipeop #> PipeOp: <nn_hardtanh> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_hardtanh> #>         id    class lower upper nlevels default value #> 1: min_val ParamDbl  -Inf   Inf     Inf      -1       #> 2: max_val ParamDbl  -Inf   Inf     Inf       1       #> 3: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Head — mlr_pipeops_nn_head","title":"Output Head — mlr_pipeops_nn_head","text":"Output head classification regresssion. NOTE method $shapes_out() access task, returns c(NA, NA). PipeOp trained however, model descriptor correct output shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Output Head — mlr_pipeops_nn_head","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Output Head — mlr_pipeops_nn_head","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Output Head — mlr_pipeops_nn_head","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Output Head — mlr_pipeops_nn_head","text":"bias :: logical(1) Whether use bias. Default TRUE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Output Head — mlr_pipeops_nn_head","text":"Calls torch::nn_linear() input output features inferred input shape / task.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Output Head — mlr_pipeops_nn_head","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchHead","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Output Head — mlr_pipeops_nn_head","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Output Head — mlr_pipeops_nn_head","text":"PipeOpTorchHead$new() PipeOpTorchHead$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Output Head — mlr_pipeops_nn_head","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"PipeOpTorchHead$new(id = \"nn_head\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Head — mlr_pipeops_nn_head","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Output Head — mlr_pipeops_nn_head","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"PipeOpTorchHead$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Head — mlr_pipeops_nn_head","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output Head — mlr_pipeops_nn_head","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_head\") pipeop #> PipeOp: <nn_head> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_head> #>      id    class lower upper nlevels default value #> 1: bias ParamLgl    NA    NA       2    TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer Normalization — mlr_pipeops_nn_layer_norm","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Applies Layer Normalization last certain number dimensions.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"dims :: integer(1) number dimensions normalized (starting last dimension). elementwise_affine :: logical(1) Whether learn affine-linear parameters initialized 1 weights 0 biases. default TRUE. eps :: numeric(1) value added denominator numerical stability.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Calls torch::nn_layer_norm() trained. parameter normalized_shape inferred dimensions last dims dimensions input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLayerNorm","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"PipeOpTorchLayerNorm$new() PipeOpTorchLayerNorm$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"PipeOpTorchLayerNorm$new(id = \"nn_layer_norm\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"PipeOpTorchLayerNorm$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_layer_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer Normalization — mlr_pipeops_nn_layer_norm","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_layer_norm\", dims = 1) pipeop #> PipeOp: <nn_layer_norm> (not trained) #> values: <dims=1> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_layer_norm> #>                    id    class lower upper nlevels        default value #> 1:               dims ParamInt     1   Inf     Inf <NoDefault[3]>     1 #> 2: elementwise_affine ParamLgl    NA    NA       2           TRUE       #> 3:                eps ParamDbl     0   Inf     Inf          1e-05"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Applies element-wise, \\(LeakyReLU(x) = max(0, x) + negative_slope * min(0, x)\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"negative_slope :: numeric(1) Controls angle negative slope. Default: 1e-2. inplace :: logical(1) Can optionally operation -place. Default: ‘FALSE’.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Calls torch::nn_hardswish() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLeakyReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"PipeOpTorchLeakyReLU$new() PipeOpTorchLeakyReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"PipeOpTorchLeakyReLU$new(id = \"nn_leaky_relu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"PipeOpTorchLeakyReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_leaky_relu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leaky ReLU Activation Function — mlr_pipeops_nn_leaky_relu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_leaky_relu\") pipeop #> PipeOp: <nn_leaky_relu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_leaky_relu> #>                id    class lower upper nlevels default value #> 1: negative_slope ParamDbl  -Inf   Inf     Inf    0.01       #> 2:        inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Layer — mlr_pipeops_nn_linear","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Applies linear transformation incoming data: \\(y = xA^T + b\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Linear Layer — mlr_pipeops_nn_linear","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Linear Layer — mlr_pipeops_nn_linear","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Linear Layer — mlr_pipeops_nn_linear","text":"out_features :: integer(1) output features linear layer. bias :: logical(1) Whether use bias. Default TRUE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Calls torch::nn_linear() trained parameter in_features inferred second last dimension input tensor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Linear Layer — mlr_pipeops_nn_linear","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLinear","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Linear Layer — mlr_pipeops_nn_linear","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Linear Layer — mlr_pipeops_nn_linear","text":"PipeOpTorchLinear$new() PipeOpTorchLinear$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Linear Layer — mlr_pipeops_nn_linear","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"PipeOpTorchLinear$new(id = \"nn_linear\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Layer — mlr_pipeops_nn_linear","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Linear Layer — mlr_pipeops_nn_linear","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"PipeOpTorchLinear$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Layer — mlr_pipeops_nn_linear","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Layer — mlr_pipeops_nn_linear","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_linear\", out_features = 10) pipeop #> PipeOp: <nn_linear> (not trained) #> values: <out_features=10> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_linear> #>              id    class lower upper nlevels        default value #> 1: out_features ParamInt     1   Inf     Inf <NoDefault[3]>    10 #> 2:         bias ParamLgl    NA    NA       2           TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Applies element-wise \\(LogSigmoid(x_i) = log(\\frac{1}{1 + exp(-x_i)})\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Calls torch::nn_log_sigmoid() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchLogSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"PipeOpTorchLogSigmoid$new() PipeOpTorchLogSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"PipeOpTorchLogSigmoid$new(id = \"nn_log_sigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"PipeOpTorchLogSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_log_sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Sigmoid Activation Function — mlr_pipeops_nn_log_sigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_log_sigmoid\") pipeop #> PipeOp: <nn_log_sigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_log_sigmoid> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Applies 1D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Calls torch::nn_max_pool1d() training.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool1D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"PipeOpTorchMaxPool1D$new() PipeOpTorchMaxPool1D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"PipeOpTorchMaxPool1D$new(   id = \"nn_max_pool1d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"PipeOpTorchMaxPool1D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D Max Pooling — mlr_pipeops_nn_max_pool1d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool1d\") pipeop #> PipeOp: <nn_max_pool1d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_max_pool1d> #>             id    class lower upper nlevels        default value #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:      stride ParamUty    NA    NA     Inf                      #> 3:     padding ParamUty    NA    NA     Inf              0       #> 4:    dilation ParamInt  -Inf   Inf     Inf              1       #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":null,"dir":"Reference","previous_headings":"","what":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Applies 2D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Calls torch::nn_max_pool2d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool2D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"PipeOpTorchMaxPool2D$new() PipeOpTorchMaxPool2D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"PipeOpTorchMaxPool2D$new(   id = \"nn_max_pool2d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"PipeOpTorchMaxPool2D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2D Max Pooling — mlr_pipeops_nn_max_pool2d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool2d\") pipeop #> PipeOp: <nn_max_pool2d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_max_pool2d> #>             id    class lower upper nlevels        default value #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:      stride ParamUty    NA    NA     Inf                      #> 3:     padding ParamUty    NA    NA     Inf              0       #> 4:    dilation ParamInt  -Inf   Inf     Inf              1       #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Applies 3D max pooling input signal composed several input planes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Calls torch::nn_max_pool3d() training.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"return_indices FALSE construction, one input channel 'input' one output channel 'output'. return_indices TRUE, two output channels 'output' 'indices'. explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"kernel_size :: integer() size window. Can single number vector. stride :: (integer(1)) stride window. Can single number vector. Default: kernel_size padding :: integer() Implicit zero paddings sides input. Can single number tuple (padW,). Default: 0 dilation :: integer() Controls spacing kernel points; also known à trous algorithm. Default: 1 ceil_mode :: logical(1) True, use ceil instead floor compute output shape. Default: FALSE","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMaxPool -> PipeOpTorchMaxPool3D","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"PipeOpTorchMaxPool3D$new() PipeOpTorchMaxPool3D$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"PipeOpTorchMaxPool3D$new(   id = \"nn_max_pool3d\",   return_indices = FALSE,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"id (character(1)) Identifier resulting  object. return_indices (logical(1)) Whether return indices. TRUE, two output channels \"output\" \"indices\". param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"PipeOpTorchMaxPool3D$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_max_pool3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D Max Pooling — mlr_pipeops_nn_max_pool3d","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_max_pool3d\") pipeop #> PipeOp: <nn_max_pool3d> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_max_pool3d> #>             id    class lower upper nlevels        default value #> 1: kernel_size ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2:      stride ParamUty    NA    NA     Inf                      #> 3:     padding ParamUty    NA    NA     Inf              0       #> 4:    dilation ParamInt  -Inf   Inf     Inf              1       #> 5:   ceil_mode ParamLgl    NA    NA       2          FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Operation — mlr_pipeops_nn_merge","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Base class merge operations addition (PipeOpTorchMergeSum), multiplication (PipeOpTorchMergeProd concatenation (PipeOpTorchMergeCat).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge Operation — mlr_pipeops_nn_merge","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge Operation — mlr_pipeops_nn_merge","text":"PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge Operation — mlr_pipeops_nn_merge","text":"See respective child class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Per default, private$.shapes_out() method outputs broadcasted tensors. two things aware: NAs assumed batch (almost always batch size first dimension). Tensors expected number dimensions, .e. missing dimensions filled 1s. reason first dimension batch dimension. private method can overwritten PipeOpTorchs inheriting class.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge Operation — mlr_pipeops_nn_merge","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchMerge","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge Operation — mlr_pipeops_nn_merge","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge Operation — mlr_pipeops_nn_merge","text":"PipeOpTorchMerge$new() PipeOpTorchMerge$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge Operation — mlr_pipeops_nn_merge","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Operation — mlr_pipeops_nn_merge","text":"","code":"PipeOpTorchMerge$new(   id,   module_generator,   param_set = ps(),   innum = 0,   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Operation — mlr_pipeops_nn_merge","text":"id (character(1)) Identifier resulting  object. module_generator (nn_module_generator) torch module generator. param_set (paradox::ParamSet) parameter set. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge Operation — mlr_pipeops_nn_merge","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Operation — mlr_pipeops_nn_merge","text":"","code":"PipeOpTorchMerge$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Operation — mlr_pipeops_nn_merge","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Concatenates multiple tensors given dimension. broadcasting rules applied , must reshape tensors shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"dim :: integer(1) dimension along concatenate tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Calls nn_merge_cat() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeCat","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"PipeOpTorchMergeCat$new() PipeOpTorchMergeCat$speak() PipeOpTorchMergeCat$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$new(id = \"nn_merge_cat\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"method-speak-","dir":"Reference","previous_headings":"","what":"Method speak()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"cat say?","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$speak()"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"PipeOpTorchMergeCat$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Concatenation — mlr_pipeops_nn_merge_cat","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_cat\") pipeop #> PipeOp: <nn_merge_cat> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_merge_cat> #>     id    class lower upper nlevels default value #> 1: dim ParamInt  -Inf   Inf     Inf      -1"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Product — mlr_pipeops_nn_merge_prod","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Calculates product input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Calls nn_merge_prod() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeProd","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"PipeOpTorchMergeProd$new() PipeOpTorchMergeProd$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"PipeOpTorchMergeProd$new(id = \"nn_merge_prod\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"PipeOpTorchMergeProd$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_prod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Product — mlr_pipeops_nn_merge_prod","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_prod\") pipeop #> PipeOp: <nn_merge_prod> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_merge_prod> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge by Summation — mlr_pipeops_nn_merge_sum","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Calculates sum input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. PipeOpTorchMerges either vararg input channel constructor argument innum set, input channels \"input1\", ..., \"input<innum>\". one output channel \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Calls nn_merge_sum() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> mlr3torch::PipeOpTorchMerge -> PipeOpTorchMergeSum","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"PipeOpTorchMergeSum$new() PipeOpTorchMergeSum$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"PipeOpTorchMergeSum$new(id = \"nn_merge_sum\", innum = 0, param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"id (character(1)) Identifier resulting  object. innum (integer(1)) number inputs. Default 0 means one vararg input channel. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"PipeOpTorchMergeSum$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_merge_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge by Summation — mlr_pipeops_nn_merge_sum","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_merge_sum\") pipeop #> PipeOp: <nn_merge_sum> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   ... [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_merge_sum> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":null,"dir":"Reference","previous_headings":"","what":"PReLU Activation Function — mlr_pipeops_nn_prelu","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Applies element-wise function \\(PReLU(x) = max(0,x) + weight * min(0,x)\\) weight learnable parameter.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"num_parameters :: integer(1): Number learn. Although takes int input, two values legitimate: 1, number channels input. Default: 1. init :: numeric(1) T initial value . Default: 0.25.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Calls torch::nn_prelu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchPReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"PipeOpTorchPReLU$new() PipeOpTorchPReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"PipeOpTorchPReLU$new(id = \"nn_prelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"PipeOpTorchPReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_prelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PReLU Activation Function — mlr_pipeops_nn_prelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_prelu\") pipeop #> PipeOp: <nn_prelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_prelu> #>                id    class lower upper nlevels        default value #> 1: num_parameters ParamInt     1   Inf     Inf <NoDefault[3]>       #> 2:           init ParamDbl  -Inf   Inf     Inf           0.25"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":null,"dir":"Reference","previous_headings":"","what":"ReLU Activation Function — mlr_pipeops_nn_relu","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Applies rectified linear unit function element-wise.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Calls torch::nn_relu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"PipeOpTorchReLU$new() PipeOpTorchReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"PipeOpTorchReLU$new(id = \"nn_relu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"PipeOpTorchReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ReLU Activation Function — mlr_pipeops_nn_relu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_relu\") pipeop #> PipeOp: <nn_relu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_relu> #>         id    class lower upper nlevels default value #> 1: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":null,"dir":"Reference","previous_headings":"","what":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Applies element-wise function \\(ReLU6(x) = min(max(0,x), 6)\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Calls torch::nn_relu6() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReLU6","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"PipeOpTorchReLU6$new() PipeOpTorchReLU6$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"PipeOpTorchReLU6$new(id = \"nn_relu6\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"PipeOpTorchReLU6$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_relu6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ReLU6 Activation Function — mlr_pipeops_nn_relu6","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_relu6\") pipeop #> PipeOp: <nn_relu6> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_relu6> #>         id    class lower upper nlevels default value #> 1: inplace ParamLgl    NA    NA       2   FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape a Tensor — mlr_pipeops_nn_reshape","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Reshape tensor given shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"shape :: integer(1) desired output shape. Unknown dimension (one ) can either specified -1 NA.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Calls nn_reshape() trained. internally calls torch::torch_reshape() given shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchReshape","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"PipeOpTorchReshape$new() PipeOpTorchReshape$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"PipeOpTorchReshape$new(id = \"nn_reshape\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"PipeOpTorchReshape$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_reshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape a Tensor — mlr_pipeops_nn_reshape","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_reshape\") pipeop #> PipeOp: <nn_reshape> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_reshape> #>       id    class lower upper nlevels        default value #> 1: shape ParamUty    NA    NA     Inf <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":null,"dir":"Reference","previous_headings":"","what":"RReLU Activation Function — mlr_pipeops_nn_rrelu","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Randomized leaky ReLU.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"lower:: numeric(1) Lower bound uniform distribution. Default: 1/8. upper:: numeric(1) Upper bound uniform distribution. Default: 1/3. inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Calls torch::nn_rrelu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchRReLU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"PipeOpTorchRReLU$new() PipeOpTorchRReLU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"PipeOpTorchRReLU$new(id = \"nn_rrelu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"PipeOpTorchRReLU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_rrelu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RReLU Activation Function — mlr_pipeops_nn_rrelu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_rrelu\") pipeop #> PipeOp: <nn_rrelu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_rrelu> #>         id    class lower upper nlevels   default value #> 1:   lower ParamDbl  -Inf   Inf     Inf     0.125       #> 2:   upper ParamDbl  -Inf   Inf     Inf 0.3333333       #> 3: inplace ParamLgl    NA    NA       2     FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":null,"dir":"Reference","previous_headings":"","what":"SELU Activation Function — mlr_pipeops_nn_selu","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Applies element-wise, $$SELU(x) = scale * (max(0,x) + min(0, \\alpha * (exp(x) - 1)))$$, \\(\\alpha=1.6732632423543772848170429916717\\) \\(scale=1.0507009873554804934193349852946\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"inplace :: logical(1) Whether operation -place. Default: FALSE.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Calls torch::nn_selu() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSELU","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"PipeOpTorchSELU$new() PipeOpTorchSELU$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"PipeOpTorchSELU$new(id = \"nn_selu\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"PipeOpTorchSELU$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_selu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SELU Activation Function — mlr_pipeops_nn_selu","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_selu\") pipeop #> PipeOp: <nn_selu> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_selu> #>         id    class lower upper nlevels        default value #> 1: inplace ParamLgl    NA    NA       2 <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Applies element-wise \\(Sigmoid(x_i) = \\frac{1}{1 + exp(-x_i)}\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Calls torch::nn_sigmoid() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSigmoid","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"PipeOpTorchSigmoid$new() PipeOpTorchSigmoid$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"PipeOpTorchSigmoid$new(id = \"nn_sigmoid\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"PipeOpTorchSigmoid$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoid Activation Function — mlr_pipeops_nn_sigmoid","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_sigmoid\") pipeop #> PipeOp: <nn_sigmoid> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_sigmoid> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax — mlr_pipeops_nn_softmax","title":"Softmax — mlr_pipeops_nn_softmax","text":"Applies softmax function.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Softmax — mlr_pipeops_nn_softmax","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Softmax — mlr_pipeops_nn_softmax","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Softmax — mlr_pipeops_nn_softmax","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Softmax — mlr_pipeops_nn_softmax","text":"dim :: integer(1) dimension along Softmax computed (every slice along dim sum 1).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Softmax — mlr_pipeops_nn_softmax","text":"Calls torch::nn_softmax() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Softmax — mlr_pipeops_nn_softmax","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftmax","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Softmax — mlr_pipeops_nn_softmax","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Softmax — mlr_pipeops_nn_softmax","text":"PipeOpTorchSoftmax$new() PipeOpTorchSoftmax$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Softmax — mlr_pipeops_nn_softmax","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"PipeOpTorchSoftmax$new(id = \"nn_softmax\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax — mlr_pipeops_nn_softmax","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Softmax — mlr_pipeops_nn_softmax","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"PipeOpTorchSoftmax$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax — mlr_pipeops_nn_softmax","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Softmax — mlr_pipeops_nn_softmax","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softmax\") pipeop #> PipeOp: <nn_softmax> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_softmax> #>     id    class lower upper nlevels        default value #> 1: dim ParamInt     1   Inf     Inf <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":null,"dir":"Reference","previous_headings":"","what":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Applies element-wise, function \\(Softplus(x) = 1/\\beta * log(1 + exp(\\beta * x))\\).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"beta :: numeric(1) beta value Softplus formulation. Default: 1 threshold :: numeric(1) Values revert linear function. Default: 20","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Calls torch::nn_softplus() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftPlus","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"PipeOpTorchSoftPlus$new() PipeOpTorchSoftPlus$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"PipeOpTorchSoftPlus$new(id = \"nn_softplus\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"PipeOpTorchSoftPlus$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoftPlus Activation Function — mlr_pipeops_nn_softplus","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softplus\") pipeop #> PipeOp: <nn_softplus> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_softplus> #>           id    class lower upper nlevels default value #> 1:      beta ParamDbl  -Inf   Inf     Inf       1       #> 2: threshold ParamDbl  -Inf   Inf     Inf      20"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Applies soft shrinkage function elementwise","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"lamd :: numeric(1) lambda (must less zero) value Softshrink formulation. Default: 0.5","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Calls torch::nn_softshrink() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"PipeOpTorchSoftShrink$new() PipeOpTorchSoftShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"PipeOpTorchSoftShrink$new(id = \"nn_softshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"PipeOpTorchSoftShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soft Shrink Activation Function — mlr_pipeops_nn_softshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softshrink\") pipeop #> PipeOp: <nn_softshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_softshrink> #>       id    class lower upper nlevels default value #> 1: lambd ParamDbl  -Inf     1     Inf     0.5"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":null,"dir":"Reference","previous_headings":"","what":"SoftSign Activation Function — mlr_pipeops_nn_softsign","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Applies element-wise, function \\(SoftSign(x) = x/(1 + |x|\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Calls torch::nn_softsign() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSoftSign","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"PipeOpTorchSoftSign$new() PipeOpTorchSoftSign$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"PipeOpTorchSoftSign$new(id = \"nn_softsign\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"PipeOpTorchSoftSign$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_softsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoftSign Activation Function — mlr_pipeops_nn_softsign","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_softsign\") pipeop #> PipeOp: <nn_softsign> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_softsign> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Squeezes tensor calling torch::torch_squeeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch. One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"state value calculated public method $shapes_out(). state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Part documentation copied adapted documentation torch. Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"dim :: integer(1) dimension squeeze. NULL, dimensions size 1 squeezed. Negative values interpreted downwards last dimension. dim :: integer(1) dimension unsqueeze. Negative values interpreted downwards last dimension.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Calls nn_squeeze() trained. Calls nn_unsqueeze() trained. internally calls torch::torch_unsqueeze().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchSqueeze","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"PipeOpTorchSqueeze$new() PipeOpTorchSqueeze$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchSqueeze$new(id = \"nn_squeeze\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchSqueeze$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"super-classes-1","dir":"Reference","previous_headings":"","what":"Super classes","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchUnsqueeze","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"public-methods-1","dir":"Reference","previous_headings":"","what":"Public methods","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"PipeOpTorchUnsqueeze$new() PipeOpTorchUnsqueeze$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"method-new--1","dir":"Reference","previous_headings":"","what":"Method new()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchUnsqueeze$new(id = \"nn_unsqueeze\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"method-clone--1","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"PipeOpTorchUnsqueeze$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_squeeze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squeeze a Tensor — mlr_pipeops_nn_squeeze","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_squeeze\") pipeop #> PipeOp: <nn_squeeze> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_squeeze> #>     id    class lower upper nlevels        default value #> 1: dim ParamUty    NA    NA     Inf <NoDefault[3]>       # Construct the PipeOp pipeop = po(\"nn_squeeze\") pipeop #> PipeOp: <nn_squeeze> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_squeeze> #>     id    class lower upper nlevels        default value #> 1: dim ParamUty    NA    NA     Inf <NoDefault[3]>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":null,"dir":"Reference","previous_headings":"","what":"Tanh Activation Function — mlr_pipeops_nn_tanh","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Applies element-wise function:","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Calls torch::nn_tanh() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchTanh","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"PipeOpTorchTanh$new() PipeOpTorchTanh$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"PipeOpTorchTanh$new(id = \"nn_tanh\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"PipeOpTorchTanh$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tanh Activation Function — mlr_pipeops_nn_tanh","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_tanh\") pipeop #> PipeOp: <nn_tanh> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_tanh> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":null,"dir":"Reference","previous_headings":"","what":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Applies element-wise, \\(Tanhshrink(x) = x - Tanh(x)\\)","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"parameters.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Calls torch::nn_tanhshrink() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchTanhShrink","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"PipeOpTorchTanhShrink$new() PipeOpTorchTanhShrink$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"PipeOpTorchTanhShrink$new(id = \"nn_tanhshrink\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"PipeOpTorchTanhShrink$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_tanhshrink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tanh Shrink Activation Function — mlr_pipeops_nn_tanhshrink","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_tanhshrink\") pipeop #> PipeOp: <nn_tanhshrink> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_tanhshrink> #> Empty."},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Treshold Activation Function — mlr_pipeops_nn_threshold","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Thresholds element input Tensor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"state value calculated public method $shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"credit","dir":"Reference","previous_headings":"","what":"Credit","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Part documentation copied adapted documentation torch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"threshold :: numeric(1) value threshold . value :: numeric(1) value replace . inplace :: logical(1) Can optionally operation -place. Default: ‘FALSE’.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Calls torch::nn_threshold() trained.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorch -> PipeOpTorchThreshold","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train() mlr3torch::PipeOpTorch$shapes_out()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"PipeOpTorchThreshold$new() PipeOpTorchThreshold$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"PipeOpTorchThreshold$new(id = \"nn_threshold\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"PipeOpTorchThreshold$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_nn_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treshold Activation Function — mlr_pipeops_nn_threshold","text":"","code":"# Construct the PipeOp pipeop = po(\"nn_threshold\", threshold = 1, value = 2) pipeop #> PipeOp: <nn_threshold> (not trained) #> values: <threshold=1, value=2> #> Input channels <name [train type, predict type]>: #>   input [ModelDescriptor,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task] # The available parameters pipeop$param_set #> <ParamSet:nn_threshold> #>           id    class lower upper nlevels        default value #> 1: threshold ParamDbl  -Inf   Inf     Inf <NoDefault[3]>     1 #> 2:     value ParamDbl  -Inf   Inf     Inf <NoDefault[3]>     2 #> 3:   inplace ParamLgl    NA    NA       2          FALSE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"PipeOpTorch base class PipeOps represent neural network layers Graph. training, generates PipeOpModule wraps nn_module attaches isomorphic architecture, also represented Graph consisting mostly PipeOpModules PipeOpNOPs. former Graph operates ModelDescriptors, latter operates tensors. relationship PipeOpTorch PipeOpModule similar relationshop nn_module_generator (like nn_linear) nn_module (like output nn_linear(...)). crucial difference PipeOpTorch infers auxiliary parameters (like in_features nn_linear) automatically intermediate tensor shapes communicated ModelDescriptor. prediction, PipeOpTorch takes Task channel outputs new Task resulting feature union channel. one input output channel, task simply piped .","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"inheriting class, one overload either private$.shapes_out() private$.shape_dependent_params() methods, overload private$.make_module(). .make_module(shapes_in, param_vals, task) (list(), list()) -> nn_module private method called generated nn_module passed argument module PipeOpModule. must overwritten, module_generator provided. left , calls provided module_generator arguments obtained private method .shape_dependent_params(). .shapes_out(shapes_in, param_vals, task) (list(), list()) -> named list() private method gets list numeric vectors (shapes_in), parameter values (param_vals), well (optional) Task. shapes_in can assumed order input names PipeOp. output shapes must order output names PipeOp. case output shapes depends task (case PipeOpTorchHead), function return valid output shapes (possibly containing NAs) task argument provided . .shape_dependent_params(shapes_in, param_vals, task) (list(), list()) -> named list() private method inputs .shapes_out. .make_module() overwritten, constructs arguments passed module_generator. Usually means must infer auxiliary parameters can inferred input shapes add user-supplied parameter values (param_vals).","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"training, inputs outputs class ModelDescriptor. prediction, input output channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"ParamSet specified child class inheriting PipeOpTorch. Usually parameters arguments wrapped nn_module minus auxiliary parameter can automatically inferred shapes input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"training, PipeOpTorch creates PipeOpModule given parameter specification input shapes incoming ModelDescriptor using private method .make_module(). input shapes provided slot .pointer_shape incoming ModelDescriptors. channel names PipeOpModule identical channel names generating PipeOpTorch. model descriptor union incoming ModelDescriptors created. Note modifies graph first ModelDescriptor place efficiency. PipeOpModule added graph slot union edges connect sending PipeOpModules input channel PipeOpModule addeded graph. possible every incoming ModelDescriptor contains information id channel name sending PipeOp slot .pointer. new graph model_descriptor_union represents current state neural network architecture. isomorphic subgraph consists pipeops class PipeOpTorch PipeOpTorchIngress ancestors PipeOpTorch. output, shallow copy ModelDescriptor created .pointer .pointer_shape updated accordingly. shallow copy means ModelDescriptors point Graph allows graph modified -reference different parts code.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"mlr3pipelines::PipeOp -> PipeOpTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"module_generator (nn_module_generator NULL) module generator wrapped PipeOpTorch. NULL, private method private$.make_module(shapes_in, param_vals) must overwritte, see section 'Inheriting'. change construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"PipeOpTorch$new() PipeOpTorch$shapes_out() PipeOpTorch$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"PipeOpTorch$new(   id,   module_generator,   param_set = ps(),   param_vals = list(),   inname = \"input\",   outname = \"output\",   packages = \"torch\",   tags = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"id (character(1)) Identifier resulting  object. module_generator (nn_module_generator) torch module generator. param_set (paradox::ParamSet) parameter set. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. inname (character()) names PipeOp's input channels. input channels generated PipeOpModule. Unless wrapped module_generator's forward method (present) argument ..., inname must identical argument names order avoid ambiguity. forward method argument ..., order input channels determines tensors passed wrapped nn_module. left NULL (default), argument module_generator must given argument names modue_generator's forward function set inname. outname (character())  names output channels channels. ouput channels generated PipeOpModule therefore also names list returned $train(). case one output channel, nn_module constructed PipeOp training must return named list(), names list names output channels. default \"output\". packages (character()) R packages object depends . tags (character()) tags PipeOp. tags \"torch\" always added.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"method-shapes-out-","dir":"Reference","previous_headings":"","what":"Method shapes_out()","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"Calculates output shapes given input shapes, parameters task.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"PipeOpTorch$shapes_out(shapes_in, task = NULL)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"shapes_in (list() integer() integer(), task) input input shapes, must order input channel names PipeOp. one input channel, shapes_in can also contain shapes input channel. task (Task NULL) task, rarely used (default NULL). exception PipeOpTorchHead.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"named list() containing output shapes. names names output channels PipeOp.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"PipeOpTorch$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Class for Torch Module Constructor Wrappers — mlr_pipeops_torch","text":"","code":"## Creating a neural network # In torch  task = tsk(\"iris\")  network_generator = torch::nn_module(   initialize = function(task, d_hidden) {     d_in = length(task$feature_names)     self$linear = torch::nn_linear(d_in, d_hidden)     self$output = if (task$task_type == \"regr\") {       torch::nn_linear(d_hidden, 1)     } else if (task$task_type == \"classif\") {       torch::nn_linear(d_hidden, length(task$class_names))     }   },   forward = function(x) {     x = self$linear(x)     x = torch::nnf_relu(x)     self$output(x)   } )  network = network_generator(task, d_hidden = 50) x = torch::torch_tensor(as.matrix(task$data(1, task$feature_names))) y = torch::with_no_grad(network(x))   # In mlr3torch network_generator = po(\"torch_ingress_num\") %>>%   po(\"nn_linear\", out_features = 50) %>>%   po(\"nn_head\") md = network_generator$train(task)[[1L]] network = model_descriptor_to_module(md) y = torch::with_no_grad(network(torch_ingress_num.input = x))    ## Implementing a custom PipeOpTorch  # defining a custom module nn_custom = nn_module(\"nn_custom\",   initialize = function(d_in1, d_in2, d_out1, d_out2, bias = TRUE) {     self$linear1 = nn_linear(d_in1, d_out1, bias)     self$linear2 = nn_linear(d_in2, d_out2, bias)   },   forward = function(input1, input2) {     output1 = self$linear1(input1)     output2 = self$linear1(input2)      list(output1 = output1, output2 = output2)   } )  # wrapping the module into a custom PipeOpTorch  library(paradox)  PipeOpTorchCustom = R6::R6Class(\"PipeOpTorchCustom\",   inherit = PipeOpTorch,   public = list(     initialize = function(id = \"nn_custom\", param_vals = list()) {       param_set = ps(         d_out1 = p_int(lower = 1, tags = c(\"required\", \"train\")),         d_out2 = p_int(lower = 1, tags = c(\"required\", \"train\")),         bias = p_lgl(default = TRUE, tags = \"train\")       )       super$initialize(         id = id,         param_vals = param_vals,         param_set = param_set,         inname = c(\"input1\", \"input2\"),         outname = c(\"output1\", \"output2\"),         module_generator = nn_custom       )     }   ),   private = list(     .shape_dependent_params = function(shapes_in, param_vals, task) {       c(param_vals,         list(d_in1 = tail(shapes_in[[\"input1\"]], 1)), d_in2 = tail(shapes_in[[\"input2\"]], 1)       )     },     .shapes_out = function(shapes_in, param_vals, task) {       list(         input1 = c(head(shapes_in[[\"input1\"]], -1), param_vals$d_out1),         input2 = c(head(shapes_in[[\"input2\"]], -1), param_vals$d_out2)       )     }   ) )  ## Training  # generate input task = tsk(\"iris\") task1 = task$clone()$select(paste0(\"Sepal.\", c(\"Length\", \"Width\"))) task2 = task$clone()$select(paste0(\"Petal.\", c(\"Length\", \"Width\"))) graph = gunion(list(po(\"torch_ingress_num_1\"), po(\"torch_ingress_num_2\"))) mds_in = graph$train( list(task1, task2), single_input = FALSE)  mds_in[[1L]][c(\"graph\", \"task\", \"ingress\", \".pointer\", \".pointer_shape\")] #> $graph #> Graph with 1 PipeOps: #>                   ID         State sccssors prdcssors #>  torch_ingress_num_1 <<UNTRAINED>>                    #>  #> $task #> <TaskClassif:iris> (150 x 3): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (2): #>   - dbl (2): Sepal.Length, Sepal.Width #>  #> $ingress #> $ingress$torch_ingress_num_1.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #>  #> $.pointer #> [1] \"torch_ingress_num_1\" \"output\"              #>  #> $.pointer_shape #> [1] NA  2 #>  mds_in[[2L]][c(\"graph\", \"task\", \"ingress\", \".pointer\", \".pointer_shape\")] #> $graph #> Graph with 1 PipeOps: #>                   ID         State sccssors prdcssors #>  torch_ingress_num_2 <<UNTRAINED>>                    #>  #> $task #> <TaskClassif:iris> (150 x 3): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (2): #>   - dbl (2): Petal.Length, Petal.Width #>  #> $ingress #> $ingress$torch_ingress_num_2.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) #>  #>  #> $.pointer #> [1] \"torch_ingress_num_2\" \"output\"              #>  #> $.pointer_shape #> [1] NA  2 #>   # creating the PipeOpTorch and training it po_torch = PipeOpTorchCustom$new() po_torch$param_set$values = list(d_out1 = 10, d_out2 = 20) train_input = list(input1 = mds_in[[1L]], input2 = mds_in[[2L]]) mds_out = do.call(po_torch$train, args = list(input = train_input)) po_torch$state #> $output1 #> [1] NA 10 #>  #> $output2 #> [1] NA 20 #>   # the new model descriptors  # the resulting graphs are identical identical(mds_out[[1L]]$graph, mds_out[[2L]]$graph) #> [1] TRUE # not that as a side-effect, also one of the input graphs is modified in-place for efficiency mds_in[[1L]]$graph$edges #>                 src_id src_channel    dst_id dst_channel #> 1: torch_ingress_num_1      output nn_custom      input1 #> 2: torch_ingress_num_2      output nn_custom      input2  # The new task has both Sepal and Petal features identical(mds_out[[1L]]$task, mds_out[[2L]]$task) #> [1] TRUE mds_out[[2L]]$task #> <TaskClassif:iris> (150 x 5): Iris Flowers #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width  # The new ingress slot contains all ingressors identical(mds_out[[1L]]$ingress, mds_out[[2L]]$ingress) #> [1] TRUE mds_out[[1L]]$ingress #> $torch_ingress_num_1.input #> Ingress: Task[Sepal.Length,Sepal.Width] --> Tensor(NA, 2) #>  #> $torch_ingress_num_2.input #> Ingress: Task[Petal.Length,Petal.Width] --> Tensor(NA, 2) #>   # The .pointer and .pointer_shape slots are different mds_out[[1L]]$.pointer #> [1] \"nn_custom\" \"output1\"   mds_out[[2L]]$.pointer #> [1] \"nn_custom\" \"output2\"    mds_out[[1L]]$.pointer_shape #> [1] NA 10 mds_out[[2L]]$.pointer_shape #> [1] NA 20  ## Prediction predict_input = list(input1 = task1, input2 = task2) tasks_out = do.call(po_torch$predict, args = list(input = predict_input)) identical(tasks_out[[1L]], tasks_out[[2L]]) #> [1] TRUE"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback Configuration — mlr_pipeops_torch_callbacks","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"Configures callbacks deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"one input channel \"input\" one output channel \"output\". training, channels class ModelDescriptor. prediction, channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"parameters defined dynamically callbacks, id respective callbacks respective set id.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"training callbacks cloned added ModelDescriptor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"mlr3pipelines::PipeOp -> PipeOpTorchCallbacks","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"PipeOpTorchCallbacks$new() PipeOpTorchCallbacks$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"PipeOpTorchCallbacks$new(   callbacks = list(),   id = \"torch_callbacks\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"callbacks (list TorchCallbacks)  callbacks (something convertible via as_torch_callbacks()). Must unique ids. callbacks cloned construction. id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"PipeOpTorchCallbacks$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_callbacks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Callback Configuration — mlr_pipeops_torch_callbacks","text":"","code":"po_cb = po(\"torch_callbacks\", \"checkpoint\") po_cb$param_set #> <ParamSetCollection:torch_callbacks> #>                 id    class lower upper nlevels        default value #> 1: checkpoint.path ParamUty    NA    NA     Inf <NoDefault[3]>       #> 2: checkpoint.freq ParamInt     1   Inf     Inf <NoDefault[3]>       mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$callbacks #> named list() mdout = po_cb$train(mdin)[[1L]] mdout$callbacks #> $checkpoint #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackTorchCheckpoint #> * Parameters: list() #> * Packages: torch,mlr3torch #>  # Can be called again po_cb1 = po(\"torch_callbacks\", t_clbk(\"progress\")) mdout1 = po_cb1$train(list(mdout))[[1L]] mdout1$callbacks #> $progress #> <TorchCallback:progress> Progress #> * Generator: CallbackTorchProgress #> * Parameters: list() #> * Packages: progress,torch,mlr3torch #>  #> $checkpoint #> <TorchCallback:checkpoint> Checkpoint #> * Generator: CallbackTorchCheckpoint #> * Parameters: list() #> * Packages: torch,mlr3torch #>"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":null,"dir":"Reference","previous_headings":"","what":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Use entry-point mlr3torch-networks. Unless advanced user, need use directly PipeOpTorchIngressNumeric, PipeOpTorchIngressCategorical PipeOpTorchIngressImage.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"state set input shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Defined construction argument param_set, well : select :: logical(1) Whether select features task can consumed PipeOpTorchIngress. Default FALSE, .e. errs training receives task feature types handle.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Creates object class TorchIngressToken given task. purpuse store information construct torch dataloader task entry point network.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"mlr3pipelines::PipeOp -> PipeOpTorchIngress","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"feature_types (character(1)) features types can consumed PipeOpTorchIngress.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"PipeOpTorchIngress$new() PipeOpTorchIngress$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"","code":"PipeOpTorchIngress$new(   id,   param_set = ps(),   param_vals = list(),   packages = character(0),   feature_types )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"id (character(1)) Identifier resulting  object. param_set (paradox::ParamSet) parameter set. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. packages (character()) R packages object depends . feature_types (character()) feature types. See mlr_reflections$task_feature_types available values.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"","code":"PipeOpTorchIngress$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entrypoint to Torch Network — mlr_pipeops_torch_ingress","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Ingress PipeOp represents categorical (factor(), ordered() logical()) entry point torch network.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"select :: logical(1) Whether PipeOp selected supported feature types. Otherwise err receiving tasks unsupported feature types.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Uses batchgetter_categ().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressCategorical","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"PipeOpTorchIngressCategorical$new() PipeOpTorchIngressCategorical$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"PipeOpTorchIngressCategorical$new(   id = \"torch_ingress_categ\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"PipeOpTorchIngressCategorical$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_categ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Entry Point for Categorical Features — mlr_pipeops_torch_ingress_categ","text":"","code":"graph = po(\"select\", selector = selector_type(\"factor\")) %>>%   po(\"torch_ingress_categ\") task = tsk(\"german_credit\") # The output is a TorchIngressToken token = graph$train(task)[[1L]] ingress = token$ingress[[1L]] ingress$batchgetter(task$data(1, ingress$features), \"cpu\") #> torch_tensor #>  5  5  1  2  3  1  3  1  3  1  4  5  1  2 #> [ CPULongType{1,14} ]"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"uses task \"imageuri\" column loads images. preprocessing (image resizing) instead just errors images fit. also data augmentation etc.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"select :: logical(1) Whether PipeOp selected supported feature types. Otherwise err, receiving tasks unsupported feature types. channels :: integer(1) number input channels. height :: integer(1) height pixels. width :: integer(1) width pixels.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"Uses magick::image_read() load image.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressImage","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"PipeOpTorchIngressImage$new() PipeOpTorchIngressImage$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"","code":"PipeOpTorchIngressImage$new(id = \"torch_ingress_img\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"","code":"PipeOpTorchIngressImage$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_img.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Entry Point for Images — mlr_pipeops_torch_ingress_img","text":"","code":"po_ingress = po(\"torch_ingress_img\", channels = 3, height = 64, width = 64) po_ingress #> PipeOp: <torch_ingress_img> (not trained) #> values: <channels=3, height=64, width=64> #> Input channels <name [train type, predict type]>: #>   input [Task,Task] #> Output channels <name [train type, predict type]>: #>   output [ModelDescriptor,Task]"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Ingress PipeOp represents numeric (integer() numeric()) entry point torch network.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Uses batchgetter_num().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"state set input shape.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchIngress -> PipeOpTorchIngressNumeric","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"PipeOpTorchIngressNumeric$new() PipeOpTorchIngressNumeric$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"PipeOpTorchIngressNumeric$new(id = \"torch_ingress_num\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"PipeOpTorchIngressNumeric$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_ingress_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Torch Entry Point for Numeric Features — mlr_pipeops_torch_ingress_num","text":"","code":"graph = po(\"select\", selector = selector_type(c(\"numeric\", \"integer\"))) %>>%   po(\"torch_ingress_num\") task = tsk(\"german_credit\") # The output is a TorchIngressToken token = graph$train(task)[[1L]] ingress = token$ingress[[1L]] ingress$batchgetter(task$data(1:5, ingress$features), \"cpu\") #> torch_tensor #>    67  1169     6 #>    22  5951    48 #>    49  2096    12 #>    45  7882    42 #>    53  4870    24 #> [ CPUFloatType{5,3} ]"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Configuration — mlr_pipeops_torch_loss","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"Configures loss deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"One input channel called \"input\" one output channel called \"output\". explanation see PipeOpTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"parameters defined dynamically loss set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"training loss cloned added ModelDescriptor.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"mlr3pipelines::PipeOp -> PipeOpTorchLoss","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"PipeOpTorchLoss$new() PipeOpTorchLoss$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"PipeOpTorchLoss$new(loss, id = \"torch_loss\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"loss (TorchLoss) character(1) nn_loss loss (something convertible via as_torch_loss()). id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"PipeOpTorchLoss$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Configuration — mlr_pipeops_torch_loss","text":"","code":"po_loss = po(\"torch_loss\", \"cross_entropy\") po_loss$param_set #> <ParamSet:torch_loss> #>              id    class lower upper nlevels default value #> 1:       weight ParamUty    NA    NA     Inf               #> 2: ignore_index ParamInt  -Inf   Inf     Inf    -100       #> 3:    reduction ParamFct    NA    NA       2    mean       mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$loss #> NULL mdout = po_loss$train(mdin)[[1L]] mdout$loss #> <TorchLoss:cross_entropy> Cross Entropy #> * Generator: nn_crossentropy_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: classif"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Model — mlr_pipeops_torch_model","title":"Torch Model — mlr_pipeops_torch_model","text":"Builds Torch Learner ModelDescriptor trains given parameter specification. specific task type, use PipeOpTorchModelClassif PipeOpTorchModelRegr.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Model — mlr_pipeops_torch_model","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Model — mlr_pipeops_torch_model","text":"trained LearnerRegrTorchModel LearnerClassifTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Model — mlr_pipeops_torch_model","text":"batch_size :: (integer(1)) batch size. epochs :: integer(1) number epochs. device :: character(1) device. One \"auto\", \"cpu\", \"cuda\". measures_train :: Measure list() Measures. Measures evaluated training. measures_valid :: Measure list() Measures. Measures evaluated validation. drop_last :: logical(1) Whether drop last batch epoch training. Default FALSE. num_threads :: integer(1) number threads (device \"cpu\"). Default 1. shuffle :: logical(1) Whether shuffle instances dataset. Default TRUE. early_stopping_rounds :: integer(1) many rounds wait early stopping. default 0. seed :: integer(1) seed used training. value seed + 1 used prediction. missing (default), random seed generated. Additionally parameters optimizer, loss function callbacks. prefixed \"opt.\", \"loss.\" \"cb.<callback id>.\" respectively.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Model — mlr_pipeops_torch_model","text":"First nn_graph created calling model_descriptor_to_module() LearnerClassifTorchModel LearnerRegrTorchModel created nn_graph combination information stored ModelDescriptor. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Torch Model — mlr_pipeops_torch_model","text":"mlr3pipelines::PipeOp -> PipeOpTorchModel","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Model — mlr_pipeops_torch_model","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Model — mlr_pipeops_torch_model","text":"PipeOpTorchModel$new() PipeOpTorchModel$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Model — mlr_pipeops_torch_model","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Model — mlr_pipeops_torch_model","text":"","code":"PipeOpTorchModel$new(id = \"torch_model\", param_vals = list(), task_type)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Model — mlr_pipeops_torch_model","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. task_type character(1) task type model.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Model — mlr_pipeops_torch_model","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Model — mlr_pipeops_torch_model","text":"","code":"PipeOpTorchModel$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Model — mlr_pipeops_torch_model","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Classification Model — mlr_pipeops_torch_model_classif","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"Builds mlr3 Classification Torch Learner Input. default optimizer adam default loss cross entropy.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"See LearnerClassifTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"trained LearnerRegrTorchModel LearnerClassifTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"First nn_graph created calling model_descriptor_to_module() LearnerClassifTorchModel LearnerRegrTorchModel created nn_graph combination information stored ModelDescriptor. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchModel -> PipeOpTorchModelClassif","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"PipeOpTorchModelClassif$new() PipeOpTorchModelClassif$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"","code":"PipeOpTorchModelClassif$new(id = \"torch_model_classif\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"","code":"PipeOpTorchModelClassif$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_classif.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Classification Model — mlr_pipeops_torch_model_classif","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":null,"dir":"Reference","previous_headings":"","what":"Torch Regression Model — mlr_pipeops_torch_model_regr","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"Builds Regression Torch Learner Input. default optimizer adam default loss mean-square error.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"See LearnerRegrTorch","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"one input channel \"input\" takes ModelDescriptor traing Task specified task_type prediction. output NULL training Prediction given task_type prediction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"trained LearnerRegrTorchModel LearnerClassifTorchModel.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"First nn_graph created calling model_descriptor_to_module() LearnerClassifTorchModel LearnerRegrTorchModel created nn_graph combination information stored ModelDescriptor. parameters set according parameters specified PipeOpTorchModel '$train() method called [Task] stored [ModelDescriptor`].","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"mlr3pipelines::PipeOp -> mlr3torch::PipeOpTorchModel -> PipeOpTorchModelRegr","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"PipeOpTorchModelRegr$new() PipeOpTorchModelRegr$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"","code":"PipeOpTorchModelRegr$new(id = \"torch_model_regr\", param_vals = list())"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"","code":"PipeOpTorchModelRegr$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_model_regr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Torch Regression Model — mlr_pipeops_torch_model_regr","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Configuration — mlr_pipeops_torch_optimizer","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"Configures optimizer deep learning model.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"one input channel \"input\" one output channel \"output\". training, channels class ModelDescriptor. prediction, channels class Task.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"state value calculated public method shapes_out().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"parameters defined dynamically optimizer set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"training, optimizer cloned added ModelDescriptor. Note parameter set stored TorchOptimizer reference-identical parameter set pipeop .","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"mlr3pipelines::PipeOp -> PipeOpTorchOptimizer","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"mlr3pipelines::PipeOp$help() mlr3pipelines::PipeOp$predict() mlr3pipelines::PipeOp$print() mlr3pipelines::PipeOp$train()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"PipeOpTorchOptimizer$new() PipeOpTorchOptimizer$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"PipeOpTorchOptimizer$new(   optimizer = t_opt(\"adam\"),   id = \"torch_optimizer\",   param_vals = list() )"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"optimizer (TorchOptimizer character(1) torch_optimizer_generator) optimizer (something convertible via as_torch_optimizer()). id (character(1)) Identifier resulting  object. param_vals (list()) List hyperparameter settings, overwriting hyperparameter settings otherwise set construction.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"PipeOpTorchOptimizer$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/mlr_pipeops_torch_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Configuration — mlr_pipeops_torch_optimizer","text":"","code":"po_opt = po(\"torch_optimizer\", \"sgd\", lr = 0.01) po_opt$param_set #> <ParamSet:torch_optimizer> #>              id    class lower upper nlevels        default value #> 1:           lr ParamDbl     0   Inf     Inf <NoDefault[3]>  0.01 #> 2:     momentum ParamDbl     0     1     Inf              0       #> 3:    dampening ParamDbl     0     1     Inf              0       #> 4: weight_decay ParamDbl     0     1     Inf              0       #> 5:     nesterov ParamLgl    NA    NA       2          FALSE       mdin = po(\"torch_ingress_num\")$train(list(tsk(\"iris\"))) mdin[[1L]]$optimizer #> NULL mdout = po_opt$train(mdin) mdout[[1L]]$optimizer #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_sgd #> * Parameters: lr=0.01 #> * Packages: torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"First nn_graph created using model_descriptor_to_module learner created module remaining information model descriptor, must include optimizer loss function optionally callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"","code":"model_descriptor_to_learner(model_descriptor)"},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"model_descriptor (ModelDescriptor) model descriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Torch Learner from a ModelDescriptor — model_descriptor_to_learner","text":"Learner","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"Creates nn_graph ModelDescriptor. Mostly internal use, since ModelDescriptor circumstances harder use just creating nn_graph directly.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"","code":"model_descriptor_to_module(   model_descriptor,   output_pointers = NULL,   list_output = FALSE )"},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"model_descriptor (ModelDescriptor) Model Descriptor. .pointer ignored, instead output_pointer values used. $graph member modified -reference. output_pointers (list character) Collection .pointers indicate part model_descriptor$graph used output. Entries format ModelDescriptor$.pointer. list_output (logical(1)) Whether output list tensors. FALSE, length(output_pointers) must 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_to_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a nn_graph from ModelDescriptor — model_descriptor_to_module","text":"nn_graph","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of ModelDescriptors — model_descriptor_union","title":"Union of ModelDescriptors — model_descriptor_union","text":"mostly internal function used PipeOpTorchs multiple input channels. creates union multiple ModelDescriptors: graphs combinded (identical begin ). first entry's graph modified reference. PipeOps ID must identical. new input edges may added PipeOps. Drops .pointer / .pointer_shape entries. new task feature union two incoming tasks. optimizer loss ModelDescriptors must identical. Ingress tokens callbacks merged, objects \"id\" must identical.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of ModelDescriptors — model_descriptor_union","text":"","code":"model_descriptor_union(md1, md2)"},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of ModelDescriptors — model_descriptor_union","text":"md1 (ModelDescriptor) first ModelDescriptor. md2 (ModelDescriptor) second ModelDescriptor.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of ModelDescriptors — model_descriptor_union","text":"ModelDescriptor","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/model_descriptor_union.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Union of ModelDescriptors — model_descriptor_union","text":"requirement new input edgedes may added PipeOps  theoretically necessary, since assume ModelDescriptor built beginning end (.e. PipeOps never get new ancestors) can make assumption simplify things. Otherwise need treat \"...\"-inputs special.)","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/nn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Network — nn_graph","title":"Graph Network — nn_graph","text":"Represents neural network using Graph usually costains mostly PipeOpModules.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Network — nn_graph","text":"","code":"nn_graph(graph, shapes_in, output_map = graph$output$name, list_output = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Network — nn_graph","text":"graph (Graph) Graph wrap. shapes_in (named integer) Shape info tensors go graph. Names must graph$input$name, possibly different order. output_map (character) graph's outputs use. Must subset graph$output$name. list_output (logical(1)) Whether output list tensors. FALSE (default), length(output_map) must 1.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Network — nn_graph","text":"nn_graph","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/nn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Network — nn_graph","text":"","code":"graph = po(\"module_1\", module = nn_linear(10, 20)) %>>%   po(\"module_2\", module = nn_relu()) %>>%   po(\"module_3\", module = nn_linear(20, 1)) network = nn_graph(graph, shapes_in = list(module_1.input = c(NA, 10))) network #> An `nn_module` containing 241 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • modules: <nn_module_list> #241 parameters x = torch_randn(16, 10) network(module_1.input = x) #> torch_tensor #> -0.0670 #> -0.1243 #> -0.1128 #> -0.2372 #> -0.2694 #>  0.0737 #> -0.0529 #> -0.1954 #>  0.1527 #>  0.7232 #> -0.1667 #> -0.1251 #>  0.1371 #> -0.2624 #> -0.0573 #>  0.0309 #> [ CPUFloatType{16,1} ][ grad_fn = <AddmmBackward0> ]"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenates multiple tensors — nn_merge_cat","title":"Concatenates multiple tensors — nn_merge_cat","text":"Concatenates multiple tensors given dimension. broadcasting rules applied , must reshape tensors shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenates multiple tensors — nn_merge_cat","text":"","code":"nn_merge_cat(dim = -1)"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenates multiple tensors — nn_merge_cat","text":"dim (integer(1)) dimension concatenation.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Product of multiple tensors — nn_merge_prod","title":"Product of multiple tensors — nn_merge_prod","text":"Calculates product input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product of multiple tensors — nn_merge_prod","text":"","code":"nn_merge_prod()"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of multiple tensors — nn_merge_sum","title":"Sum of multiple tensors — nn_merge_sum","text":"Calculates sum input tensors.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_merge_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of multiple tensors — nn_merge_sum","text":"","code":"nn_merge_sum()"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape — nn_reshape","title":"Reshape — nn_reshape","text":"Reshape tensor given shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape — nn_reshape","text":"","code":"nn_reshape(shape)"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape — nn_reshape","text":"shape (integer()) desired output shape.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_squeeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Squeeze — nn_squeeze","title":"Squeeze — nn_squeeze","text":"Squeezes tensor calling torch::torch_squeeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_squeeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squeeze — nn_squeeze","text":"","code":"nn_squeeze(dim)"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_squeeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squeeze — nn_squeeze","text":"dim (integer()) dimension squeeze.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_unsqueeze.html","id":null,"dir":"Reference","previous_headings":"","what":"Unsqueeze — nn_unsqueeze","title":"Unsqueeze — nn_unsqueeze","text":"Unsqueezes tensor calling torch::torch_unsqueeze() given dimension dim.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/nn_unsqueeze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unsqueeze — nn_unsqueeze","text":"","code":"nn_unsqueeze(dim)"},{"path":"https://mlr3torch.mlr-org.com/reference/nn_unsqueeze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unsqueeze — nn_unsqueeze","text":"dim (integer(1)) dimension unsqueeze.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset a classification models last layer — reset_last_layer","title":"Reset a classification models last layer — reset_last_layer","text":"Used pretrained models last layer set e.g. 1000 classes training intended applied e.g. 10 classes.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset a classification models last layer — reset_last_layer","text":"","code":"reset_last_layer(model, num_classes, bias, freeze)  # S3 method for AlexNet reset_last_layer(model, num_classes, bias = TRUE, freeze = FALSE)  # S3 method for resnet reset_last_layer(model, num_classes, bias = TRUE, freeze = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset a classification models last layer — reset_last_layer","text":"model pretrained model, e.g. torchvision::model_alexnet(pretrained = TRUE) num_classes Number desired output classes. bias [TRUE] Whether use bias last layer. freeze (logical(1)) Whether freee layers expect output layer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset a classification models last layer — reset_last_layer","text":"input model modified last layer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reset a classification models last layer — reset_last_layer","text":", also freezes parameters last layer.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/reset_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset a classification models last layer — reset_last_layer","text":"","code":"if (FALSE) { # AlexNet model = torchvision::model_alexnet(pretrained = TRUE) model$classifier[[7]]$out_feature model = reset_last_layer(model, 10) model$classifier[[7]]$out_feature  # ResNet model = torchvision::model_resnet18(pretrained = TRUE) model$fc$out_feature model = reset_last_layer(model, 10) model$fc$out_feature }"},{"path":"https://mlr3torch.mlr-org.com/reference/t_clbk.html","id":null,"dir":"Reference","previous_headings":"","what":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","title":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","text":"Retrieves one torch callback mlr3torch_callbacks. Works like mlr3::lrn() mlr3::tsk().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_clbk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","text":"","code":"t_clbk(.key, ...)  t_clbks(.keys)"},{"path":"https://mlr3torch.mlr-org.com/reference/t_clbk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","text":".key (character(1)) key callback. ... () See description dictionary_sugar_get. .keys (character()) keys callbacks.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_clbk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","text":"TorchCallback","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/t_clbk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sugar Function to Retrieve Torch Callback(s) — t_clbk","text":"","code":"t_clbk(\"progress\") #> <TorchCallback:progress> Progress #> * Generator: CallbackTorchProgress #> * Parameters: list() #> * Packages: progress,torch,mlr3torch"},{"path":"https://mlr3torch.mlr-org.com/reference/t_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Function Quick Access — t_loss","title":"Loss Function Quick Access — t_loss","text":"Loss Function Quick Access","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Function Quick Access — t_loss","text":"","code":"t_loss(.key, ...)  t_losses(.keys, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/t_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Function Quick Access — t_loss","text":".key (character(1)) Key object retrieve. ... () See description dictionary_sugar_get. .keys (character()) keys losses.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loss Function Quick Access — t_loss","text":"TorchLoss","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/t_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss Function Quick Access — t_loss","text":"","code":"t_loss(\"mse\", reduction = \"mean\") #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: reduction=mean #> * Packages: torch,mlr3torch #> * Task Types: regr # get the dictionary t_loss() #> <DictionaryMlr3torchLosses> with 3 stored values #> Keys: cross_entropy, l1, mse t_losses(c(\"mse\", \"l1\")) #> $mse #> <TorchLoss:mse> Mean Squared Error #> * Generator: nn_mse_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr #>  #> $l1 #> <TorchLoss:l1> Absolute Error #> * Generator: nn_l1_loss #> * Parameters: list() #> * Packages: torch,mlr3torch #> * Task Types: regr #>  # get the dictionary t_losses() #> <DictionaryMlr3torchLosses> with 3 stored values #> Keys: cross_entropy, l1, mse"},{"path":"https://mlr3torch.mlr-org.com/reference/t_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizers Quick Access — t_opt","title":"Optimizers Quick Access — t_opt","text":"Optimizers Quick Access","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizers Quick Access — t_opt","text":"","code":"t_opt(.key, ...)  t_opts(.keys, ...)"},{"path":"https://mlr3torch.mlr-org.com/reference/t_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizers Quick Access — t_opt","text":".key (character(1)) Key object retrieve. ... () See description dictionary_sugar_get. .keys (character()) keys optimizers.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/t_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizers Quick Access — t_opt","text":"TorchOptimizer","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/t_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizers Quick Access — t_opt","text":"","code":"t_opt(\"adam\", lr = 0.1) #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: lr=0.1 #> * Packages: torch,mlr3torch # get the dictionary t_opt() #> <DictionaryMlr3torchOptimizers> with 7 stored values #> Keys: adadelta, adagrad, adam, asgd, rmsprop, rprop, sgd t_opts(c(\"adam\", \"sgd\")) #> $adam #> <TorchOptimizer:adam> Adaptive Moment Estimation #> * Generator: optim_adam #> * Parameters: list() #> * Packages: torch,mlr3torch #>  #> $sgd #> <TorchOptimizer:sgd> Stochastic Gradient Descent #> * Generator: optim_sgd #> * Parameters: list() #> * Packages: torch,mlr3torch #>  # get the dictionary t_opts() #> <DictionaryMlr3torchOptimizers> with 7 stored values #> Keys: adadelta, adagrad, adam, asgd, rmsprop, rprop, sgd"},{"path":"https://mlr3torch.mlr-org.com/reference/task_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Dataset from a Task — task_dataset","title":"Create a Dataset from a Task — task_dataset","text":"Creates torch dataset mlr3 Task. resulting dataset's $.get_batch() method returns list elements x, y index: x list tensors, whose content defined parameter feature_ingress_tokens. y target variable content defined parameter target_batchgetter. .index index batch task's data. data returned device specified parameter device.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/task_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dataset from a Task — task_dataset","text":"","code":"task_dataset(   task,   feature_ingress_tokens,   target_batchgetter = NULL,   device = \"cpu\" )"},{"path":"https://mlr3torch.mlr-org.com/reference/task_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dataset from a Task — task_dataset","text":"task (Task) task build dataset. feature_ingress_tokens (named list() TorchIngressToken) ingress token defines one item $x value batch corresponding names. target_batchgetter (function(data, device)) function taking arguments data, data.table containing target variable, device. must return target torch tensor selected device. device (character()) device, e.g. \"cuda\" \"cpu\".","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/task_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Dataset from a Task — task_dataset","text":"torch::dataset","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/task_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dataset from a Task — task_dataset","text":"","code":"task = tsk(\"iris\") sepal_ingress = TorchIngressToken(   features = c(\"Sepal.Length\", \"Sepal.Width\"),   batchgetter = batchgetter_num,   shape = c(NA, 2) ) petal_ingress = TorchIngressToken(   features = c(\"Petal.Length\", \"Petal.Width\"),   batchgetter = batchgetter_num,   shape = c(NA, 2) ) ingress_tokens = list(sepal = sepal_ingress, petal = petal_ingress)  target_batchgetter = function(data, device) {   torch_tensor(data = data[[1L]], dtype = torch_float32(), device)$unsqueeze(2) } dataset = task_dataset(task, ingress_tokens, target_batchgetter, \"cpu\") batch = dataset$.getbatch(1:10) batch #> $x #> $x$sepal #> torch_tensor #>  5.1000  3.5000 #>  4.9000  3.0000 #>  4.7000  3.2000 #>  4.6000  3.1000 #>  5.0000  3.6000 #>  5.4000  3.9000 #>  4.6000  3.4000 #>  5.0000  3.4000 #>  4.4000  2.9000 #>  4.9000  3.1000 #> [ CPUFloatType{10,2} ] #>  #> $x$petal #> torch_tensor #>  1.4000  0.2000 #>  1.4000  0.2000 #>  1.3000  0.2000 #>  1.5000  0.2000 #>  1.4000  0.2000 #>  1.7000  0.4000 #>  1.4000  0.3000 #>  1.5000  0.2000 #>  1.4000  0.2000 #>  1.5000  0.1000 #> [ CPUFloatType{10,2} ] #>  #>  #> $y #> torch_tensor #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #>  1 #> [ CPUFloatType{10,1} ] #>  #> $.index #>  [1]  1  2  3  4  5  6  7  8  9 10 #>"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Torch Callback — torch_callback","title":"Create a Torch Callback — torch_callback","text":"Convenience function create custom callback torch. information correctly implement new callback, see CallbackTorch. returns TorchCallback wrapping CallbackTorch.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Torch Callback — torch_callback","text":"","code":"torch_callback(   id,   classname = paste0(\"CallbackTorch\", capitalize(id)),   param_set = NULL,   packages = NULL,   label = capitalize(id),   man = NULL,   on_begin = NULL,   on_end = NULL,   on_epoch_begin = NULL,   on_before_valid = NULL,   on_epoch_end = NULL,   on_batch_begin = NULL,   on_batch_end = NULL,   on_after_backward = NULL,   on_batch_valid_begin = NULL,   on_batch_valid_end = NULL,   initialize = NULL,   public = NULL,   private = NULL,   active = NULL,   parent_env = parent.frame(),   inherit = CallbackTorch )"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Torch Callback — torch_callback","text":"id (character(1))` id callbacks. Note ids callbacks passed learner must unique. classname (character(1)) class name. param_set (ParamSet) parameter set, present inferred initialize method. packages (character())packages callback depends . Default isNULL`. label (character(1)) Label new instance. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). on_begin, on_end, on_epoch_begin, on_before_valid, on_epoch_end, on_batch_begin, on_batch_end, on_after_backward, on_batch_valid_begin, on_batch_valid_end (function) Function execute given stage, see section Stages. initialize (function()) initialization method callback. public, private, active (list()) Additional public, private, active fields add callback. parent_env (environment()) parent environment R6Class. inherit (R6ClassGenerator) class inherit. class must either CallbackTorch (default) inherit .","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Torch Callback — torch_callback","text":"TorchCallback","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Create a Torch Callback — torch_callback","text":"first creates R6ClassGenerator using torch_callback wraps generator TorchCallback.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"stages","dir":"Reference","previous_headings":"","what":"Stages","title":"Create a Torch Callback — torch_callback","text":"begin :: Run training loop begins. epoch_begin :: Run beginning epoch. before_validation :: Run validation loop. batch_begin :: Run forward call. after_backward :: Run backward call. batch_end :: Run optimizer step. batch_valid_begin :: Run forward call validation loop. batch_valid_end :: Run forward call validation loop. epoch_end :: Run end epoch. end :: Run last, using .exit().","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/torch_callback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Torch Callback — torch_callback","text":"","code":"custom_tcb = torch_callback(\"custom\",   initialize = function(name) {     self$name = name   },   on_begin = function(ctx) {     cat(\"Hello\", self$name, \", we will train for \", ctx$total_epochs, \"epochs.\\n\")   },   on_end = function(ctx) {     cat(\"Training is done.\")   } )  learner = lrn(\"classif.torch_featureless\",   batch_size = 16,   epochs = 1,   callbacks = custom_tcb,   cb.custom.name = \"Marie\" ) task = tsk(\"iris\") learner$train(task) #> Hello Marie , we will train for  1 epochs. #> Training is done."},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Torch Wrappers — torch_wrapper","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Abstract Base Class TorchLoss, TorchOptimizer, TorchCallback inherit. class wraps generator (R6Class Generator torch version generator) annotates metadata ParamSet, label, ID, packages, manual page. parameters construction arguments wrapped generator parameter $values passed generator calling public method $generate().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Defined constructor argument param_set.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base Class for Torch Wrappers — torch_wrapper","text":"label (character(1)) Label object. Can used tables, plot text output instead ID. param_set (paradox::ParamSet) Set hyperparameters. packages (character(1)) Set required packages. packages loaded, attached. id (character(1)) Identifier object. Used tables, plot text output. generator wrapped generator described. man (character(1)) String format [pkg]::[topic] pointing manual page object.","code":""},{"path":[]},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Torch Wrappers — torch_wrapper","text":"TorchWrapper$new() TorchWrapper$print() TorchWrapper$generate() TorchWrapper$help() TorchWrapper$clone()","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Wrappers — torch_wrapper","text":"","code":"TorchWrapper$new(   generator,   id,   param_set = NULL,   packages = NULL,   label = id,   man = NULL )"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Wrappers — torch_wrapper","text":"generator wrapped generator described. id (character(1)) id new object. param_set (paradox::ParamSet) parameter set. packages (character()) R packages object depends . label (character(1)) Label new instance. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Prints object","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Wrappers — torch_wrapper","text":"","code":"TorchWrapper$print(...)"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Wrappers — torch_wrapper","text":"... ","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Calls generator given parameter values.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Wrappers — torch_wrapper","text":"","code":"TorchWrapper$generate()"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"Base Class for Torch Wrappers — torch_wrapper","text":"Displays help file wrapped object.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Wrappers — torch_wrapper","text":"","code":"TorchWrapper$help()"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Torch Wrappers — torch_wrapper","text":"objects class cloneable method.","code":""},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Torch Wrappers — torch_wrapper","text":"","code":"TorchWrapper$clone(deep = FALSE)"},{"path":"https://mlr3torch.mlr-org.com/reference/torch_wrapper.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Torch Wrappers — torch_wrapper","text":"deep Whether make deep clone.","code":""},{"path":[]}]
